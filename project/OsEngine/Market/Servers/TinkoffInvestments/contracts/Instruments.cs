// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instruments.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tinkoff.InvestApi.V1 {

  /// <summary>Holder for reflection information generated from instruments.proto</summary>
  public static partial class InstrumentsReflection {

    #region Descriptor
    /// <summary>File descriptor for instruments.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstrumentsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFpbnN0cnVtZW50cy5wcm90bxIldGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90",
            "bxoMY29tbW9uLnByb3RvGh9nb29nbGUvYXBpL2ZpZWxkX2JlaGF2aW9yLnBy",
            "b3RvIqkBChdUcmFkaW5nU2NoZWR1bGVzUmVxdWVzdBIVCghleGNoYW5nZRgB",
            "IAEoCUgAiAEBEi0KBGZyb20YAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wSAGIAQESKwoCdG8YAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wSAKIAQFCCwoJX2V4Y2hhbmdlQgcKBV9mcm9tQgUKA190byJlChhU",
            "cmFkaW5nU2NoZWR1bGVzUmVzcG9uc2USSQoJZXhjaGFuZ2VzGAEgAygLMjYu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5UcmFkaW5n",
            "U2NoZWR1bGUiZAoPVHJhZGluZ1NjaGVkdWxlEhAKCGV4Y2hhbmdlGAEgASgJ",
            "Ej8KBGRheXMYAiADKAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLlRyYWRpbmdEYXkilwcKClRyYWRpbmdEYXkSKAoEZGF0ZRgB",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFgoOaXNfdHJhZGlu",
            "Z19kYXkYAiABKAgSLgoKc3RhcnRfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASLAoIZW5kX3RpbWUYBCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEj4KGm9wZW5pbmdfYXVjdGlvbl9zdGFydF90aW1l",
            "GAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI8ChhjbG9zaW5n",
            "X2F1Y3Rpb25fZW5kX3RpbWUYCCABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEkYKImV2ZW5pbmdfb3BlbmluZ19hdWN0aW9uX3N0YXJ0X3RpbWUY",
            "CSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjYKEmV2ZW5pbmdf",
            "c3RhcnRfdGltZRgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "NAoQZXZlbmluZ19lbmRfdGltZRgLIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASNwoTY2xlYXJpbmdfc3RhcnRfdGltZRgMIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASNQoRY2xlYXJpbmdfZW5kX3RpbWUYDSAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjgKFHByZW1hcmtldF9z",
            "dGFydF90aW1lGA4gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI2",
            "ChJwcmVtYXJrZXRfZW5kX3RpbWUYDyABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEj4KGmNsb3NpbmdfYXVjdGlvbl9zdGFydF90aW1lGBAgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI8ChhvcGVuaW5nX2F1Y3Rp",
            "b25fZW5kX3RpbWUYESABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EkkKCWludGVydmFscxgSIAMoCzI2LnRpbmtvZmYucHVibGljLmludmVzdC5h",
            "cGkuY29udHJhY3QudjEuVHJhZGluZ0ludGVydmFsSgQIBRAGSgQIBhAHIp0B",
            "ChFJbnN0cnVtZW50UmVxdWVzdBJOCgdpZF90eXBlGAEgASgOMjcudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50SWRU",
            "eXBlQgTiQQECEhcKCmNsYXNzX2NvZGUYAiABKAlIAIgBARIQCgJpZBgDIAEo",
            "CUIE4kEBAkINCgtfY2xhc3NfY29kZSKDAQoSSW5zdHJ1bWVudHNSZXF1ZXN0",
            "ElcKEWluc3RydW1lbnRfc3RhdHVzGAEgASgOMjcudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50U3RhdHVzSACIAQFC",
            "FAoSX2luc3RydW1lbnRfc3RhdHVzIowBChRGaWx0ZXJPcHRpb25zUmVxdWVz",
            "dBIcCg9iYXNpY19hc3NldF91aWQYASABKAlIAIgBARIlChhiYXNpY19hc3Nl",
            "dF9wb3NpdGlvbl91aWQYAiABKAlIAYgBAUISChBfYmFzaWNfYXNzZXRfdWlk",
            "QhsKGV9iYXNpY19hc3NldF9wb3NpdGlvbl91aWQiTwoMQm9uZFJlc3BvbnNl",
            "Ej8KCmluc3RydW1lbnQYASABKAsyKy50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkJvbmQiUQoNQm9uZHNSZXNwb25zZRJACgtpbnN0",
            "cnVtZW50cxgBIAMoCzIrLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuQm9uZCKyAQoVR2V0Qm9uZENvdXBvbnNSZXF1ZXN0EhAKBGZp",
            "Z2kYASABKAlCAhgBEi0KBGZyb20YAiABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wSACIAQESKwoCdG8YAyABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wSAGIAQESGwoNaW5zdHJ1bWVudF9pZBgEIAEoCUIE4kEBAkIH",
            "CgVfZnJvbUIFCgNfdG8iVwoWR2V0Qm9uZENvdXBvbnNSZXNwb25zZRI9CgZl",
            "dmVudHMYASADKAsyLS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkNvdXBvbiLvAgoUR2V0Qm9uZEV2ZW50c1JlcXVlc3QSLQoEZnJv",
            "bRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAIgBARIrCgJ0",
            "bxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAYgBARIbCg1p",
            "bnN0cnVtZW50X2lkGAQgASgJQgTiQQECElMKBHR5cGUYBSABKA4yRS50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkdldEJvbmRFdmVu",
            "dHNSZXF1ZXN0LkV2ZW50VHlwZSJ5CglFdmVudFR5cGUSGgoWRVZFTlRfVFlQ",
            "RV9VTlNQRUNJRklFRBAAEhIKDkVWRU5UX1RZUEVfQ1BOEAESEwoPRVZFTlRf",
            "VFlQRV9DQUxMEAISEgoORVZFTlRfVFlQRV9NVFkQAxITCg9FVkVOVF9UWVBF",
            "X0NPTlYQBEIHCgVfZnJvbUIFCgNfdG8i8QgKFUdldEJvbmRFdmVudHNSZXNw",
            "b25zZRJWCgZldmVudHMYASADKAsyRi50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkdldEJvbmRFdmVudHNSZXNwb25zZS5Cb25kRXZl",
            "bnQa/wcKCUJvbmRFdmVudBIVCg1pbnN0cnVtZW50X2lkGAIgASgJEhQKDGV2",
            "ZW50X251bWJlchgDIAEoBRIuCgpldmVudF9kYXRlGAQgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBJZCgpldmVudF90eXBlGAUgASgOMkUudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRCb25kRXZl",
            "bnRzUmVxdWVzdC5FdmVudFR5cGUSSQoPZXZlbnRfdG90YWxfdm9sGAYgASgL",
            "MjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90",
            "YXRpb24SLAoIZml4X2RhdGUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEi0KCXJhdGVfZGF0ZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASMAoMZGVmYXVsdF9kYXRlGAkgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIxCg1yZWFsX3BheV9kYXRlGAogASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIsCghwYXlfZGF0ZRgLIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASRwoMcGF5X29uZV9ib25kGAwgASgLMjEu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Nb25leVZh",
            "bHVlEkkKDm1vbmV5X2Zsb3dfdmFsGA0gASgLMjEudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5Nb25leVZhbHVlEhEKCWV4ZWN1dGlv",
            "bhgOIAEoCRIWCg5vcGVyYXRpb25fdHlwZRgPIAEoCRI/CgV2YWx1ZRgQIAEo",
            "CzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVv",
            "dGF0aW9uEgwKBG5vdGUYESABKAkSHgoWY29udmVydF90b19maW5fdG9vbF9p",
            "ZBgSIAEoCRI1ChFjb3Vwb25fc3RhcnRfZGF0ZRgTIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASMwoPY291cG9uX2VuZF9kYXRlGBQgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIVCg1jb3Vwb25fcGVyaW9kGBUg",
            "ASgFEk4KFGNvdXBvbl9pbnRlcmVzdF9yYXRlGBYgASgLMjAudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24ioAMKBkNv",
            "dXBvbhIMCgRmaWdpGAEgASgJEi8KC2NvdXBvbl9kYXRlGAIgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIVCg1jb3Vwb25fbnVtYmVyGAMgASgD",
            "EiwKCGZpeF9kYXRlGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBJHCgxwYXlfb25lX2JvbmQYBSABKAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLk1vbmV5VmFsdWUSRgoLY291cG9uX3R5cGUY",
            "BiABKA4yMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "LkNvdXBvblR5cGUSNQoRY291cG9uX3N0YXJ0X2RhdGUYByABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEjMKD2NvdXBvbl9lbmRfZGF0ZRgIIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFQoNY291cG9uX3Blcmlv",
            "ZBgJIAEoBSJXChBDdXJyZW5jeVJlc3BvbnNlEkMKCmluc3RydW1lbnQYASAB",
            "KAsyLy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkN1",
            "cnJlbmN5IloKEkN1cnJlbmNpZXNSZXNwb25zZRJECgtpbnN0cnVtZW50cxgB",
            "IAMoCzIvLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "Q3VycmVuY3kiTQoLRXRmUmVzcG9uc2USPgoKaW5zdHJ1bWVudBgBIAEoCzIq",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRXRmIk8K",
            "DEV0ZnNSZXNwb25zZRI/CgtpbnN0cnVtZW50cxgBIAMoCzIqLnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRXRmIlMKDkZ1dHVyZVJl",
            "c3BvbnNlEkEKCmluc3RydW1lbnQYASABKAsyLS50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLkZ1dHVyZSJVCg9GdXR1cmVzUmVzcG9u",
            "c2USQgoLaW5zdHJ1bWVudHMYASADKAsyLS50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLkZ1dHVyZSJTCg5PcHRpb25SZXNwb25zZRJB",
            "CgppbnN0cnVtZW50GAEgASgLMi0udGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5PcHRpb24iVQoPT3B0aW9uc1Jlc3BvbnNlEkIKC2lu",
            "c3RydW1lbnRzGAEgAygLMi0udGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5PcHRpb24i7w8KBk9wdGlvbhILCgN1aWQYASABKAkSFAoM",
            "cG9zaXRpb25fdWlkGAIgASgJEg4KBnRpY2tlchgDIAEoCRISCgpjbGFzc19j",
            "b2RlGAQgASgJEiAKGGJhc2ljX2Fzc2V0X3Bvc2l0aW9uX3VpZBgFIAEoCRJU",
            "Cg50cmFkaW5nX3N0YXR1cxgVIAEoDjI8LnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuU2VjdXJpdHlUcmFkaW5nU3RhdHVzEkoKDXJl",
            "YWxfZXhjaGFuZ2UYHyABKA4yMy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLlJlYWxFeGNoYW5nZRJJCglkaXJlY3Rpb24YKSABKA4y",
            "Ni50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk9wdGlv",
            "bkRpcmVjdGlvbhJOCgxwYXltZW50X3R5cGUYKiABKA4yOC50aW5rb2ZmLnB1",
            "YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk9wdGlvblBheW1lbnRUeXBl",
            "EkEKBXN0eWxlGCsgASgOMjIudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5PcHRpb25TdHlsZRJUCg9zZXR0bGVtZW50X3R5cGUYLCAB",
            "KA4yOy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk9w",
            "dGlvblNldHRsZW1lbnRUeXBlEgwKBG5hbWUYZSABKAkSEAoIY3VycmVuY3kY",
            "byABKAkSGwoTc2V0dGxlbWVudF9jdXJyZW5jeRhwIAEoCRITCgphc3NldF90",
            "eXBlGIMBIAEoCRIUCgtiYXNpY19hc3NldBiEASABKAkSEQoIZXhjaGFuZ2UY",
            "jQEgASgJEhgKD2NvdW50cnlfb2ZfcmlzaxiXASABKAkSHQoUY291bnRyeV9v",
            "Zl9yaXNrX25hbWUYmAEgASgJEg8KBnNlY3RvchihASABKAkSQAoFYnJhbmQY",
            "ogEgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5CcmFuZERhdGESDAoDbG90GMkBIAEoBRJLChBiYXNpY19hc3NldF9zaXpl",
            "GNMBIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuUXVvdGF0aW9uEkAKBWtsb25nGN0BIAEoCzIwLnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkEKBmtzaG9ydBje",
            "ASABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "LlF1b3RhdGlvbhJACgVkbG9uZxjfASABKAsyMC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJBCgZkc2hvcnQY4AEg",
            "ASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5R",
            "dW90YXRpb24SRAoJZGxvbmdfbWluGOEBIAEoCzIwLnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkUKCmRzaG9ydF9t",
            "aW4Y4gEgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5RdW90YXRpb24STgoTbWluX3ByaWNlX2luY3JlbWVudBjnASABKAsy",
            "MC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3Rh",
            "dGlvbhJICgxzdHJpa2VfcHJpY2UY8QEgASgLMjEudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5Nb25leVZhbHVlEjQKD2V4cGlyYXRp",
            "b25fZGF0ZRitAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjUK",
            "EGZpcnN0X3RyYWRlX2RhdGUYtwIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBI0Cg9sYXN0X3RyYWRlX2RhdGUYuAIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBI7ChZmaXJzdF8xbWluX2NhbmRsZV9kYXRlGMEC",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOwoWZmlyc3RfMWRh",
            "eV9jYW5kbGVfZGF0ZRjCAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEhsKEnNob3J0X2VuYWJsZWRfZmxhZxiRAyABKAgSFQoMZm9yX2lpc19m",
            "bGFnGJIDIAEoCBIRCghvdGNfZmxhZxiTAyABKAgSGwoSYnV5X2F2YWlsYWJs",
            "ZV9mbGFnGJQDIAEoCBIcChNzZWxsX2F2YWlsYWJsZV9mbGFnGJUDIAEoCBIf",
            "ChZmb3JfcXVhbF9pbnZlc3Rvcl9mbGFnGJYDIAEoCBIVCgx3ZWVrZW5kX2Zs",
            "YWcYlwMgASgIEhkKEGJsb2NrZWRfdGNhX2ZsYWcYmAMgASgIEiEKGGFwaV90",
            "cmFkZV9hdmFpbGFibGVfZmxhZxiZAyABKAgiUQoNU2hhcmVSZXNwb25zZRJA",
            "CgppbnN0cnVtZW50GAEgASgLMiwudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5TaGFyZSJTCg5TaGFyZXNSZXNwb25zZRJBCgtpbnN0",
            "cnVtZW50cxgBIAMoCzIsLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuU2hhcmUilhAKBEJvbmQSDAoEZmlnaRgBIAEoCRIOCgZ0aWNr",
            "ZXIYAiABKAkSEgoKY2xhc3NfY29kZRgDIAEoCRIMCgRpc2luGAQgASgJEgsK",
            "A2xvdBgFIAEoBRIQCghjdXJyZW5jeRgGIAEoCRI/CgVrbG9uZxgHIAEoCzIw",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0",
            "aW9uEkAKBmtzaG9ydBgIIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5h",
            "cGkuY29udHJhY3QudjEuUXVvdGF0aW9uEj8KBWRsb25nGAkgASgLMjAudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24S",
            "QAoGZHNob3J0GAogASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24SQwoJZGxvbmdfbWluGAsgASgLMjAudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24S",
            "RAoKZHNob3J0X21pbhgMIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5h",
            "cGkuY29udHJhY3QudjEuUXVvdGF0aW9uEhoKEnNob3J0X2VuYWJsZWRfZmxh",
            "ZxgNIAEoCBIMCgRuYW1lGA8gASgJEhAKCGV4Y2hhbmdlGBAgASgJEiAKGGNv",
            "dXBvbl9xdWFudGl0eV9wZXJfeWVhchgRIAEoBRIxCg1tYXR1cml0eV9kYXRl",
            "GBIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJCCgdub21pbmFs",
            "GBMgASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5Nb25leVZhbHVlEkoKD2luaXRpYWxfbm9taW5hbBgUIAEoCzIxLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuTW9uZXlWYWx1ZRIy",
            "Cg5zdGF0ZV9yZWdfZGF0ZRgVIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASMgoOcGxhY2VtZW50X2RhdGUYFiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEkoKD3BsYWNlbWVudF9wcmljZRgXIAEoCzIxLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuTW9uZXlWYWx1ZRJE",
            "CglhY2lfdmFsdWUYGCABKAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLk1vbmV5VmFsdWUSFwoPY291bnRyeV9vZl9yaXNrGBkg",
            "ASgJEhwKFGNvdW50cnlfb2Zfcmlza19uYW1lGBogASgJEg4KBnNlY3Rvchgb",
            "IAEoCRISCgppc3N1ZV9raW5kGBwgASgJEhIKCmlzc3VlX3NpemUYHSABKAMS",
            "FwoPaXNzdWVfc2l6ZV9wbGFuGB4gASgDElQKDnRyYWRpbmdfc3RhdHVzGB8g",
            "ASgOMjwudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5T",
            "ZWN1cml0eVRyYWRpbmdTdGF0dXMSEAoIb3RjX2ZsYWcYICABKAgSGgoSYnV5",
            "X2F2YWlsYWJsZV9mbGFnGCEgASgIEhsKE3NlbGxfYXZhaWxhYmxlX2ZsYWcY",
            "IiABKAgSHAoUZmxvYXRpbmdfY291cG9uX2ZsYWcYIyABKAgSFgoOcGVycGV0",
            "dWFsX2ZsYWcYJCABKAgSGQoRYW1vcnRpemF0aW9uX2ZsYWcYJSABKAgSTQoT",
            "bWluX3ByaWNlX2luY3JlbWVudBgmIAEoCzIwLnRpbmtvZmYucHVibGljLmlu",
            "dmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEiAKGGFwaV90cmFkZV9h",
            "dmFpbGFibGVfZmxhZxgnIAEoCBILCgN1aWQYKCABKAkSSgoNcmVhbF9leGNo",
            "YW5nZRgpIAEoDjIzLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJh",
            "Y3QudjEuUmVhbEV4Y2hhbmdlEhQKDHBvc2l0aW9uX3VpZBgqIAEoCRIRCglh",
            "c3NldF91aWQYKyABKAkSFAoMZm9yX2lpc19mbGFnGDMgASgIEh4KFmZvcl9x",
            "dWFsX2ludmVzdG9yX2ZsYWcYNCABKAgSFAoMd2Vla2VuZF9mbGFnGDUgASgI",
            "EhgKEGJsb2NrZWRfdGNhX2ZsYWcYNiABKAgSGQoRc3Vib3JkaW5hdGVkX2Zs",
            "YWcYNyABKAgSFgoObGlxdWlkaXR5X2ZsYWcYOCABKAgSOgoWZmlyc3RfMW1p",
            "bl9jYW5kbGVfZGF0ZRg9IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASOgoWZmlyc3RfMWRheV9jYW5kbGVfZGF0ZRg+IAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASRAoKcmlza19sZXZlbBg/IAEoDjIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUmlza0xldmVsEj8K",
            "BWJyYW5kGEAgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250",
            "cmFjdC52MS5CcmFuZERhdGEi7AoKCEN1cnJlbmN5EgwKBGZpZ2kYASABKAkS",
            "DgoGdGlja2VyGAIgASgJEhIKCmNsYXNzX2NvZGUYAyABKAkSDAoEaXNpbhgE",
            "IAEoCRILCgNsb3QYBSABKAUSEAoIY3VycmVuY3kYBiABKAkSPwoFa2xvbmcY",
            "ByABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "LlF1b3RhdGlvbhJACgZrc2hvcnQYCCABKAsyMC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhI/CgVkbG9uZxgJIAEo",
            "CzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVv",
            "dGF0aW9uEkAKBmRzaG9ydBgKIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkMKCWRsb25nX21pbhgLIAEo",
            "CzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVv",
            "dGF0aW9uEkQKCmRzaG9ydF9taW4YDCABKAsyMC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIaChJzaG9ydF9lbmFi",
            "bGVkX2ZsYWcYDSABKAgSDAoEbmFtZRgPIAEoCRIQCghleGNoYW5nZRgQIAEo",
            "CRJCCgdub21pbmFsGBEgASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5Nb25leVZhbHVlEhcKD2NvdW50cnlfb2ZfcmlzaxgS",
            "IAEoCRIcChRjb3VudHJ5X29mX3Jpc2tfbmFtZRgTIAEoCRJUCg50cmFkaW5n",
            "X3N0YXR1cxgUIAEoDjI8LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuU2VjdXJpdHlUcmFkaW5nU3RhdHVzEhAKCG90Y19mbGFnGBUg",
            "ASgIEhoKEmJ1eV9hdmFpbGFibGVfZmxhZxgWIAEoCBIbChNzZWxsX2F2YWls",
            "YWJsZV9mbGFnGBcgASgIEhkKEWlzb19jdXJyZW5jeV9uYW1lGBggASgJEk0K",
            "E21pbl9wcmljZV9pbmNyZW1lbnQYGSABKAsyMC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIgChhhcGlfdHJhZGVf",
            "YXZhaWxhYmxlX2ZsYWcYGiABKAgSCwoDdWlkGBsgASgJEkoKDXJlYWxfZXhj",
            "aGFuZ2UYHCABKA4yMy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLlJlYWxFeGNoYW5nZRIUCgxwb3NpdGlvbl91aWQYHSABKAkSFAoM",
            "Zm9yX2lpc19mbGFnGCkgASgIEh4KFmZvcl9xdWFsX2ludmVzdG9yX2ZsYWcY",
            "NCABKAgSFAoMd2Vla2VuZF9mbGFnGDUgASgIEhgKEGJsb2NrZWRfdGNhX2Zs",
            "YWcYNiABKAgSOgoWZmlyc3RfMW1pbl9jYW5kbGVfZGF0ZRg4IAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOgoWZmlyc3RfMWRheV9jYW5kbGVf",
            "ZGF0ZRg5IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASPwoFYnJh",
            "bmQYPCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLkJyYW5kRGF0YSK2DAoDRXRmEgwKBGZpZ2kYASABKAkSDgoGdGlja2Vy",
            "GAIgASgJEhIKCmNsYXNzX2NvZGUYAyABKAkSDAoEaXNpbhgEIAEoCRILCgNs",
            "b3QYBSABKAUSEAoIY3VycmVuY3kYBiABKAkSPwoFa2xvbmcYByABKAsyMC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlv",
            "bhJACgZrc2hvcnQYCCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLlF1b3RhdGlvbhI/CgVkbG9uZxgJIAEoCzIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkAK",
            "BmRzaG9ydBgKIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuUXVvdGF0aW9uEkMKCWRsb25nX21pbhgLIAEoCzIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkQK",
            "CmRzaG9ydF9taW4YDCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIaChJzaG9ydF9lbmFibGVkX2ZsYWcY",
            "DSABKAgSDAoEbmFtZRgPIAEoCRIQCghleGNoYW5nZRgQIAEoCRJKChBmaXhl",
            "ZF9jb21taXNzaW9uGBEgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5RdW90YXRpb24SEgoKZm9jdXNfdHlwZRgSIAEoCRIx",
            "Cg1yZWxlYXNlZF9kYXRlGBMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBJECgpudW1fc2hhcmVzGBQgASgLMjAudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SFwoPY291bnRyeV9vZl9y",
            "aXNrGBUgASgJEhwKFGNvdW50cnlfb2Zfcmlza19uYW1lGBYgASgJEg4KBnNl",
            "Y3RvchgXIAEoCRIYChByZWJhbGFuY2luZ19mcmVxGBggASgJElQKDnRyYWRp",
            "bmdfc3RhdHVzGBkgASgOMjwudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5TZWN1cml0eVRyYWRpbmdTdGF0dXMSEAoIb3RjX2ZsYWcY",
            "GiABKAgSGgoSYnV5X2F2YWlsYWJsZV9mbGFnGBsgASgIEhsKE3NlbGxfYXZh",
            "aWxhYmxlX2ZsYWcYHCABKAgSTQoTbWluX3ByaWNlX2luY3JlbWVudBgdIAEo",
            "CzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVv",
            "dGF0aW9uEiAKGGFwaV90cmFkZV9hdmFpbGFibGVfZmxhZxgeIAEoCBILCgN1",
            "aWQYHyABKAkSSgoNcmVhbF9leGNoYW5nZRggIAEoDjIzLnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUmVhbEV4Y2hhbmdlEhQKDHBv",
            "c2l0aW9uX3VpZBghIAEoCRIRCglhc3NldF91aWQYIiABKAkSFAoMZm9yX2lp",
            "c19mbGFnGCkgASgIEh4KFmZvcl9xdWFsX2ludmVzdG9yX2ZsYWcYKiABKAgS",
            "FAoMd2Vla2VuZF9mbGFnGCsgASgIEhgKEGJsb2NrZWRfdGNhX2ZsYWcYLCAB",
            "KAgSFgoObGlxdWlkaXR5X2ZsYWcYLSABKAgSOgoWZmlyc3RfMW1pbl9jYW5k",
            "bGVfZGF0ZRg4IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOgoW",
            "Zmlyc3RfMWRheV9jYW5kbGVfZGF0ZRg5IAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASPwoFYnJhbmQYPCABKAsyMC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLkJyYW5kRGF0YSLVDgoGRnV0dXJlEgwK",
            "BGZpZ2kYASABKAkSDgoGdGlja2VyGAIgASgJEhIKCmNsYXNzX2NvZGUYAyAB",
            "KAkSCwoDbG90GAQgASgFEhAKCGN1cnJlbmN5GAUgASgJEj8KBWtsb25nGAYg",
            "ASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5R",
            "dW90YXRpb24SQAoGa3Nob3J0GAcgASgLMjAudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SPwoFZGxvbmcYCCABKAsy",
            "MC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3Rh",
            "dGlvbhJACgZkc2hvcnQYCSABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJDCglkbG9uZ19taW4YCiABKAsy",
            "MC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3Rh",
            "dGlvbhJECgpkc2hvcnRfbWluGAsgASgLMjAudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SGgoSc2hvcnRfZW5hYmxl",
            "ZF9mbGFnGAwgASgIEgwKBG5hbWUYDSABKAkSEAoIZXhjaGFuZ2UYDiABKAkS",
            "NAoQZmlyc3RfdHJhZGVfZGF0ZRgPIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASMwoPbGFzdF90cmFkZV9kYXRlGBAgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIUCgxmdXR1cmVzX3R5cGUYESABKAkSEgoKYXNz",
            "ZXRfdHlwZRgSIAEoCRITCgtiYXNpY19hc3NldBgTIAEoCRJKChBiYXNpY19h",
            "c3NldF9zaXplGBQgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24SFwoPY291bnRyeV9vZl9yaXNrGBUgASgJ",
            "EhwKFGNvdW50cnlfb2Zfcmlza19uYW1lGBYgASgJEg4KBnNlY3RvchgXIAEo",
            "CRIzCg9leHBpcmF0aW9uX2RhdGUYGCABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wElQKDnRyYWRpbmdfc3RhdHVzGBkgASgOMjwudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5TZWN1cml0eVRyYWRpbmdT",
            "dGF0dXMSEAoIb3RjX2ZsYWcYGiABKAgSGgoSYnV5X2F2YWlsYWJsZV9mbGFn",
            "GBsgASgIEhsKE3NlbGxfYXZhaWxhYmxlX2ZsYWcYHCABKAgSTQoTbWluX3By",
            "aWNlX2luY3JlbWVudBgdIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5h",
            "cGkuY29udHJhY3QudjEuUXVvdGF0aW9uEiAKGGFwaV90cmFkZV9hdmFpbGFi",
            "bGVfZmxhZxgeIAEoCBILCgN1aWQYHyABKAkSSgoNcmVhbF9leGNoYW5nZRgg",
            "IAEoDjIzLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "UmVhbEV4Y2hhbmdlEhQKDHBvc2l0aW9uX3VpZBghIAEoCRIgChhiYXNpY19h",
            "c3NldF9wb3NpdGlvbl91aWQYIiABKAkSFAoMZm9yX2lpc19mbGFnGCkgASgI",
            "Eh4KFmZvcl9xdWFsX2ludmVzdG9yX2ZsYWcYKiABKAgSFAoMd2Vla2VuZF9m",
            "bGFnGCsgASgIEhgKEGJsb2NrZWRfdGNhX2ZsYWcYLCABKAgSOgoWZmlyc3Rf",
            "MW1pbl9jYW5kbGVfZGF0ZRg4IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASOgoWZmlyc3RfMWRheV9jYW5kbGVfZGF0ZRg5IAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASUAoVaW5pdGlhbF9tYXJnaW5fb25fYnV5",
            "GD0gASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5Nb25leVZhbHVlElEKFmluaXRpYWxfbWFyZ2luX29uX3NlbGwYPiABKAsy",
            "MS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk1vbmV5",
            "VmFsdWUSVAoabWluX3ByaWNlX2luY3JlbWVudF9hbW91bnQYPyABKAsyMC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlv",
            "bhI/CgVicmFuZBhAIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuQnJhbmREYXRhIsIMCgVTaGFyZRIMCgRmaWdpGAEgASgJ",
            "Eg4KBnRpY2tlchgCIAEoCRISCgpjbGFzc19jb2RlGAMgASgJEgwKBGlzaW4Y",
            "BCABKAkSCwoDbG90GAUgASgFEhAKCGN1cnJlbmN5GAYgASgJEj8KBWtsb25n",
            "GAcgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5RdW90YXRpb24SQAoGa3Nob3J0GAggASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SPwoFZGxvbmcYCSAB",
            "KAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1",
            "b3RhdGlvbhJACgZkc2hvcnQYCiABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJDCglkbG9uZ19taW4YCyAB",
            "KAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1",
            "b3RhdGlvbhJECgpkc2hvcnRfbWluGAwgASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SGgoSc2hvcnRfZW5h",
            "YmxlZF9mbGFnGA0gASgIEgwKBG5hbWUYDyABKAkSEAoIZXhjaGFuZ2UYECAB",
            "KAkSLAoIaXBvX2RhdGUYESABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEhIKCmlzc3VlX3NpemUYEiABKAMSFwoPY291bnRyeV9vZl9yaXNrGBMg",
            "ASgJEhwKFGNvdW50cnlfb2Zfcmlza19uYW1lGBQgASgJEg4KBnNlY3RvchgV",
            "IAEoCRIXCg9pc3N1ZV9zaXplX3BsYW4YFiABKAMSQgoHbm9taW5hbBgXIAEo",
            "CzIxLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuTW9u",
            "ZXlWYWx1ZRJUCg50cmFkaW5nX3N0YXR1cxgZIAEoDjI8LnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuU2VjdXJpdHlUcmFkaW5nU3Rh",
            "dHVzEhAKCG90Y19mbGFnGBogASgIEhoKEmJ1eV9hdmFpbGFibGVfZmxhZxgb",
            "IAEoCBIbChNzZWxsX2F2YWlsYWJsZV9mbGFnGBwgASgIEhYKDmRpdl95aWVs",
            "ZF9mbGFnGB0gASgIEkQKCnNoYXJlX3R5cGUYHiABKA4yMC50aW5rb2ZmLnB1",
            "YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlNoYXJlVHlwZRJNChNtaW5f",
            "cHJpY2VfaW5jcmVtZW50GB8gASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SIAoYYXBpX3RyYWRlX2F2YWls",
            "YWJsZV9mbGFnGCAgASgIEgsKA3VpZBghIAEoCRJKCg1yZWFsX2V4Y2hhbmdl",
            "GCIgASgOMjMudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5SZWFsRXhjaGFuZ2USFAoMcG9zaXRpb25fdWlkGCMgASgJEhEKCWFzc2V0",
            "X3VpZBgkIAEoCRIUCgxmb3JfaWlzX2ZsYWcYLiABKAgSHgoWZm9yX3F1YWxf",
            "aW52ZXN0b3JfZmxhZxgvIAEoCBIUCgx3ZWVrZW5kX2ZsYWcYMCABKAgSGAoQ",
            "YmxvY2tlZF90Y2FfZmxhZxgxIAEoCBIWCg5saXF1aWRpdHlfZmxhZxgyIAEo",
            "CBI6ChZmaXJzdF8xbWluX2NhbmRsZV9kYXRlGDggASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBI6ChZmaXJzdF8xZGF5X2NhbmRsZV9kYXRlGDkg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI/CgVicmFuZBg8IAEo",
            "CzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQnJh",
            "bmREYXRhIqkBChpHZXRBY2NydWVkSW50ZXJlc3RzUmVxdWVzdBIQCgRmaWdp",
            "GAEgASgJQgIYARIuCgRmcm9tGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcEIE4kEBAhIsCgJ0bxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXBCBOJBAQISGwoNaW5zdHJ1bWVudF9pZBgEIAEoCUIE4kEBAiJw",
            "ChtHZXRBY2NydWVkSW50ZXJlc3RzUmVzcG9uc2USUQoRYWNjcnVlZF9pbnRl",
            "cmVzdHMYASADKAsyNi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkFjY3J1ZWRJbnRlcmVzdCKIAgoPQWNjcnVlZEludGVyZXN0EigK",
            "BGRhdGUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEj8KBXZh",
            "bHVlGAIgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5RdW90YXRpb24SRwoNdmFsdWVfcGVyY2VudBgDIAEoCzIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkEK",
            "B25vbWluYWwYBCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLlF1b3RhdGlvbiJIChdHZXRGdXR1cmVzTWFyZ2luUmVxdWVz",
            "dBIQCgRmaWdpGAEgASgJQgIYARIbCg1pbnN0cnVtZW50X2lkGAQgASgJQgTi",
            "QQECIuQCChhHZXRGdXR1cmVzTWFyZ2luUmVzcG9uc2USUAoVaW5pdGlhbF9t",
            "YXJnaW5fb25fYnV5GAEgASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5Nb25leVZhbHVlElEKFmluaXRpYWxfbWFyZ2luX29u",
            "X3NlbGwYAiABKAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLk1vbmV5VmFsdWUSTQoTbWluX3ByaWNlX2luY3JlbWVudBgDIAEo",
            "CzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVv",
            "dGF0aW9uElQKGm1pbl9wcmljZV9pbmNyZW1lbnRfYW1vdW50GAQgASgLMjAu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRp",
            "b24iWwoSSW5zdHJ1bWVudFJlc3BvbnNlEkUKCmluc3RydW1lbnQYASABKAsy",
            "MS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkluc3Ry",
            "dW1lbnQiiwsKCkluc3RydW1lbnQSDAoEZmlnaRgBIAEoCRIOCgZ0aWNrZXIY",
            "AiABKAkSEgoKY2xhc3NfY29kZRgDIAEoCRIMCgRpc2luGAQgASgJEgsKA2xv",
            "dBgFIAEoBRIQCghjdXJyZW5jeRgGIAEoCRI/CgVrbG9uZxgHIAEoCzIwLnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9u",
            "EkAKBmtzaG9ydBgIIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuUXVvdGF0aW9uEj8KBWRsb25nGAkgASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQAoG",
            "ZHNob3J0GAogASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250",
            "cmFjdC52MS5RdW90YXRpb24SQwoJZGxvbmdfbWluGAsgASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SRAoK",
            "ZHNob3J0X21pbhgMIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuUXVvdGF0aW9uEhoKEnNob3J0X2VuYWJsZWRfZmxhZxgN",
            "IAEoCBIMCgRuYW1lGA4gASgJEhAKCGV4Y2hhbmdlGA8gASgJEhcKD2NvdW50",
            "cnlfb2ZfcmlzaxgQIAEoCRIcChRjb3VudHJ5X29mX3Jpc2tfbmFtZRgRIAEo",
            "CRIXCg9pbnN0cnVtZW50X3R5cGUYEiABKAkSVAoOdHJhZGluZ19zdGF0dXMY",
            "EyABKA4yPC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "LlNlY3VyaXR5VHJhZGluZ1N0YXR1cxIQCghvdGNfZmxhZxgUIAEoCBIaChJi",
            "dXlfYXZhaWxhYmxlX2ZsYWcYFSABKAgSGwoTc2VsbF9hdmFpbGFibGVfZmxh",
            "ZxgWIAEoCBJNChNtaW5fcHJpY2VfaW5jcmVtZW50GBcgASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SIAoY",
            "YXBpX3RyYWRlX2F2YWlsYWJsZV9mbGFnGBggASgIEgsKA3VpZBgZIAEoCRJK",
            "Cg1yZWFsX2V4Y2hhbmdlGBogASgOMjMudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5SZWFsRXhjaGFuZ2USFAoMcG9zaXRpb25fdWlk",
            "GBsgASgJEhEKCWFzc2V0X3VpZBgcIAEoCRIUCgxmb3JfaWlzX2ZsYWcYJCAB",
            "KAgSHgoWZm9yX3F1YWxfaW52ZXN0b3JfZmxhZxglIAEoCBIUCgx3ZWVrZW5k",
            "X2ZsYWcYJiABKAgSGAoQYmxvY2tlZF90Y2FfZmxhZxgnIAEoCBJOCg9pbnN0",
            "cnVtZW50X2tpbmQYKCABKA4yNS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLkluc3RydW1lbnRUeXBlEjoKFmZpcnN0XzFtaW5fY2Fu",
            "ZGxlX2RhdGUYOCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjoK",
            "FmZpcnN0XzFkYXlfY2FuZGxlX2RhdGUYOSABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEj8KBWJyYW5kGDwgASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5CcmFuZERhdGEisAEKE0dldERpdmlk",
            "ZW5kc1JlcXVlc3QSEAoEZmlnaRgBIAEoCUICGAESLQoEZnJvbRgCIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAIgBARIrCgJ0bxgDIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAYgBARIbCg1pbnN0cnVtZW50",
            "X2lkGAQgASgJQgTiQQECQgcKBV9mcm9tQgUKA190byJaChRHZXREaXZpZGVu",
            "ZHNSZXNwb25zZRJCCglkaXZpZGVuZHMYASADKAsyLy50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkRpdmlkZW5kIoYECghEaXZpZGVu",
            "ZBJHCgxkaXZpZGVuZF9uZXQYASABKAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLk1vbmV5VmFsdWUSMAoMcGF5bWVudF9kYXRl",
            "GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCg1kZWNsYXJl",
            "ZF9kYXRlGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCg1s",
            "YXN0X2J1eV9kYXRlGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBIVCg1kaXZpZGVuZF90eXBlGAUgASgJEi8KC3JlY29yZF9kYXRlGAYgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBISCgpyZWd1bGFyaXR5GAcg",
            "ASgJEkYKC2Nsb3NlX3ByaWNlGAggASgLMjEudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5Nb25leVZhbHVlEkUKC3lpZWxkX3ZhbHVl",
            "GAkgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5RdW90YXRpb24SLgoKY3JlYXRlZF9hdBgKIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXAiIAoMQXNzZXRSZXF1ZXN0EhAKAmlkGAEgASgJQgTi",
            "QQECIlAKDUFzc2V0UmVzcG9uc2USPwoFYXNzZXQYASABKAsyMC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkFzc2V0RnVsbCJ4Cg1B",
            "c3NldHNSZXF1ZXN0ElMKD2luc3RydW1lbnRfdHlwZRgBIAEoDjI1LnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudFR5",
            "cGVIAIgBAUISChBfaW5zdHJ1bWVudF90eXBlIk4KDkFzc2V0c1Jlc3BvbnNl",
            "EjwKBmFzc2V0cxgBIAMoCzIsLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuQXNzZXQimAUKCUFzc2V0RnVsbBILCgN1aWQYASABKAkS",
            "PgoEdHlwZRgCIAEoDjIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuQXNzZXRUeXBlEgwKBG5hbWUYAyABKAkSEgoKbmFtZV9icmll",
            "ZhgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIuCgpkZWxldGVkX2F0GAYg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIWCg5yZXF1aXJlZF90",
            "ZXN0cxgHIAMoCRJICghjdXJyZW5jeRgIIAEoCzI0LnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuQXNzZXRDdXJyZW5jeUgAEkgKCHNl",
            "Y3VyaXR5GAkgASgLMjQudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250",
            "cmFjdC52MS5Bc3NldFNlY3VyaXR5SAASFAoMZ29zX3JlZ19jb2RlGAogASgJ",
            "EgsKA2NmaRgLIAEoCRIQCghjb2RlX25zZBgMIAEoCRIOCgZzdGF0dXMYDSAB",
            "KAkSOwoFYnJhbmQYDiABKAsyLC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLkJyYW5kEi4KCnVwZGF0ZWRfYXQYDyABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEg8KB2JyX2NvZGUYECABKAkSFAoMYnJf",
            "Y29kZV9uYW1lGBEgASgJEksKC2luc3RydW1lbnRzGBIgAygLMjYudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Bc3NldEluc3RydW1l",
            "bnRCBQoDZXh0Iq8BCgVBc3NldBILCgN1aWQYASABKAkSPgoEdHlwZRgCIAEo",
            "DjIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQXNz",
            "ZXRUeXBlEgwKBG5hbWUYAyABKAkSSwoLaW5zdHJ1bWVudHMYBCADKAsyNi50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkFzc2V0SW5z",
            "dHJ1bWVudCImCg1Bc3NldEN1cnJlbmN5EhUKDWJhc2VfY3VycmVuY3kYASAB",
            "KAki9gMKDUFzc2V0U2VjdXJpdHkSDAoEaXNpbhgBIAEoCRIMCgR0eXBlGAIg",
            "ASgJEk4KD2luc3RydW1lbnRfa2luZBgKIAEoDjI1LnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudFR5cGUSQgoFc2hh",
            "cmUYAyABKAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLkFzc2V0U2hhcmVIABJACgRib25kGAQgASgLMjAudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Bc3NldEJvbmRIABJLCgJzcBgF",
            "IAEoCzI9LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "QXNzZXRTdHJ1Y3R1cmVkUHJvZHVjdEgAEj4KA2V0ZhgGIAEoCzIvLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQXNzZXRFdGZIABJf",
            "ChRjbGVhcmluZ19jZXJ0aWZpY2F0ZRgHIAEoCzI/LnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuQXNzZXRDbGVhcmluZ0NlcnRpZmlj",
            "YXRlSABCBQoDZXh0ItUFCgpBc3NldFNoYXJlEj4KBHR5cGUYASABKA4yMC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlNoYXJlVHlw",
            "ZRJECgppc3N1ZV9zaXplGAIgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQQoHbm9taW5hbBgDIAEoCzIw",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0",
            "aW9uEhgKEG5vbWluYWxfY3VycmVuY3kYBCABKAkSFQoNcHJpbWFyeV9pbmRl",
            "eBgFIAEoCRJHCg1kaXZpZGVuZF9yYXRlGAYgASgLMjAudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SHAoUcHJlZmVy",
            "cmVkX3NoYXJlX3R5cGUYByABKAkSLAoIaXBvX2RhdGUYCCABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEjEKDXJlZ2lzdHJ5X2RhdGUYCSABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhYKDmRpdl95aWVsZF9mbGFn",
            "GAogASgIEhIKCmlzc3VlX2tpbmQYCyABKAkSMgoOcGxhY2VtZW50X2RhdGUY",
            "DCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMKC3JlcHJlc19p",
            "c2luGA0gASgJEkkKD2lzc3VlX3NpemVfcGxhbhgOIAEoCzIwLnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkUKC3Rv",
            "dGFsX2Zsb2F0GA8gASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24i4AYKCUFzc2V0Qm9uZBJJCg9jdXJyZW50",
            "X25vbWluYWwYASABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLlF1b3RhdGlvbhITCgtib3Jyb3dfbmFtZRgCIAEoCRJECgpp",
            "c3N1ZV9zaXplGAMgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24SQQoHbm9taW5hbBgEIAEoCzIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEhgK",
            "EG5vbWluYWxfY3VycmVuY3kYBSABKAkSEgoKaXNzdWVfa2luZBgGIAEoCRIV",
            "Cg1pbnRlcmVzdF9raW5kGAcgASgJEiAKGGNvdXBvbl9xdWFudGl0eV9wZXJf",
            "eWVhchgIIAEoBRIcChRpbmRleGVkX25vbWluYWxfZmxhZxgJIAEoCBIZChFz",
            "dWJvcmRpbmF0ZWRfZmxhZxgKIAEoCBIXCg9jb2xsYXRlcmFsX2ZsYWcYCyAB",
            "KAgSFQoNdGF4X2ZyZWVfZmxhZxgMIAEoCBIZChFhbW9ydGl6YXRpb25fZmxh",
            "ZxgNIAEoCBIcChRmbG9hdGluZ19jb3Vwb25fZmxhZxgOIAEoCBIWCg5wZXJw",
            "ZXR1YWxfZmxhZxgPIAEoCBIxCg1tYXR1cml0eV9kYXRlGBAgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIYChByZXR1cm5fY29uZGl0aW9uGBEg",
            "ASgJEjIKDnN0YXRlX3JlZ19kYXRlGBIgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBIyCg5wbGFjZW1lbnRfZGF0ZRgTIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASSQoPcGxhY2VtZW50X3ByaWNlGBQgASgLMjAu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRp",
            "b24SSQoPaXNzdWVfc2l6ZV9wbGFuGBUgASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24ioAUKFkFzc2V0U3Ry",
            "dWN0dXJlZFByb2R1Y3QSEwoLYm9ycm93X25hbWUYASABKAkSQQoHbm9taW5h",
            "bBgCIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuUXVvdGF0aW9uEhgKEG5vbWluYWxfY3VycmVuY3kYAyABKAkSSgoEdHlw",
            "ZRgEIAEoDjI8LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuU3RydWN0dXJlZFByb2R1Y3RUeXBlEhcKD2xvZ2ljX3BvcnRmb2xpbxgF",
            "IAEoCRJECgphc3NldF90eXBlGAYgASgOMjAudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5Bc3NldFR5cGUSEwoLYmFzaWNfYXNzZXQY",
            "ByABKAkSSAoOc2FmZXR5X2JhcnJpZXIYCCABKAsyMC50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIxCg1tYXR1cml0",
            "eV9kYXRlGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJJCg9p",
            "c3N1ZV9zaXplX3BsYW4YCiABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJECgppc3N1ZV9zaXplGAsgASgL",
            "MjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90",
            "YXRpb24SMgoOcGxhY2VtZW50X2RhdGUYDCABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEhIKCmlzc3VlX2tpbmQYDSABKAki2AoKCEFzc2V0RXRm",
            "EkcKDXRvdGFsX2V4cGVuc2UYASABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJFCgtodXJkbGVfcmF0ZRgC",
            "IAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "UXVvdGF0aW9uEkkKD3BlcmZvcm1hbmNlX2ZlZRgDIAEoCzIwLnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkoKEGZp",
            "eGVkX2NvbW1pc3Npb24YBCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIUCgxwYXltZW50X3R5cGUYBSAB",
            "KAkSFgoOd2F0ZXJtYXJrX2ZsYWcYBiABKAgSRQoLYnV5X3ByZW1pdW0YByAB",
            "KAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1",
            "b3RhdGlvbhJHCg1zZWxsX2Rpc2NvdW50GAggASgLMjAudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SGAoQcmViYWxh",
            "bmNpbmdfZmxhZxgJIAEoCBIYChByZWJhbGFuY2luZ19mcmVxGAogASgJEhcK",
            "D21hbmFnZW1lbnRfdHlwZRgLIAEoCRIVCg1wcmltYXJ5X2luZGV4GAwgASgJ",
            "EhIKCmZvY3VzX3R5cGUYDSABKAkSFgoObGV2ZXJhZ2VkX2ZsYWcYDiABKAgS",
            "QwoJbnVtX3NoYXJlGA8gASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5RdW90YXRpb24SEgoKdWNpdHNfZmxhZxgQIAEoCBIx",
            "Cg1yZWxlYXNlZF9kYXRlGBEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBITCgtkZXNjcmlwdGlvbhgSIAEoCRIhChlwcmltYXJ5X2luZGV4X2Rl",
            "c2NyaXB0aW9uGBMgASgJEh0KFXByaW1hcnlfaW5kZXhfY29tcGFueRgUIAEo",
            "CRJPChVpbmRleF9yZWNvdmVyeV9wZXJpb2QYFSABKAsyMC50aW5rb2ZmLnB1",
            "YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIRCglpbmF2",
            "X2NvZGUYFiABKAkSFgoOZGl2X3lpZWxkX2ZsYWcYFyABKAgSTAoSZXhwZW5z",
            "ZV9jb21taXNzaW9uGBggASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5RdW90YXRpb24SVgoccHJpbWFyeV9pbmRleF90cmFj",
            "a2luZ19lcnJvchgZIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuUXVvdGF0aW9uEhgKEHJlYmFsYW5jaW5nX3BsYW4YGiAB",
            "KAkSEAoIdGF4X3JhdGUYGyABKAkSNQoRcmViYWxhbmNpbmdfZGF0ZXMYHCAD",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhIKCmlzc3VlX2tpbmQY",
            "HSABKAkSQQoHbm9taW5hbBgeIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEhgKEG5vbWluYWxfY3VycmVu",
            "Y3kYHyABKAkidwoYQXNzZXRDbGVhcmluZ0NlcnRpZmljYXRlEkEKB25vbWlu",
            "YWwYASABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLlF1b3RhdGlvbhIYChBub21pbmFsX2N1cnJlbmN5GAIgASgJIp0BCgVC",
            "cmFuZBILCgN1aWQYASABKAkSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlv",
            "bhgDIAEoCRIMCgRpbmZvGAQgASgJEg8KB2NvbXBhbnkYBSABKAkSDgoGc2Vj",
            "dG9yGAYgASgJEhcKD2NvdW50cnlfb2ZfcmlzaxgHIAEoCRIcChRjb3VudHJ5",
            "X29mX3Jpc2tfbmFtZRgIIAEoCSKVAgoPQXNzZXRJbnN0cnVtZW50EgsKA3Vp",
            "ZBgBIAEoCRIMCgRmaWdpGAIgASgJEhcKD2luc3RydW1lbnRfdHlwZRgDIAEo",
            "CRIOCgZ0aWNrZXIYBCABKAkSEgoKY2xhc3NfY29kZRgFIAEoCRJECgVsaW5r",
            "cxgGIAMoCzI1LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuSW5zdHJ1bWVudExpbmsSTgoPaW5zdHJ1bWVudF9raW5kGAogASgOMjUu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVt",
            "ZW50VHlwZRIUCgxwb3NpdGlvbl91aWQYCyABKAkiNgoOSW5zdHJ1bWVudExp",
            "bmsSDAoEdHlwZRgBIAEoCRIWCg5pbnN0cnVtZW50X3VpZBgCIAEoCSIVChNH",
            "ZXRGYXZvcml0ZXNSZXF1ZXN0Im8KFEdldEZhdm9yaXRlc1Jlc3BvbnNlElcK",
            "FGZhdm9yaXRlX2luc3RydW1lbnRzGAEgAygLMjkudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5GYXZvcml0ZUluc3RydW1lbnQijAIK",
            "EkZhdm9yaXRlSW5zdHJ1bWVudBIMCgRmaWdpGAEgASgJEg4KBnRpY2tlchgC",
            "IAEoCRISCgpjbGFzc19jb2RlGAMgASgJEgwKBGlzaW4YBCABKAkSFwoPaW5z",
            "dHJ1bWVudF90eXBlGAsgASgJEgwKBG5hbWUYDCABKAkSCwoDdWlkGA0gASgJ",
            "EhAKCG90Y19mbGFnGBAgASgIEiAKGGFwaV90cmFkZV9hdmFpbGFibGVfZmxh",
            "ZxgRIAEoCBJOCg9pbnN0cnVtZW50X2tpbmQYEiABKA4yNS50aW5rb2ZmLnB1",
            "YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkluc3RydW1lbnRUeXBlItMB",
            "ChRFZGl0RmF2b3JpdGVzUmVxdWVzdBJgCgtpbnN0cnVtZW50cxgBIAMoCzJF",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRWRpdEZh",
            "dm9yaXRlc1JlcXVlc3RJbnN0cnVtZW50QgTiQQECElkKC2FjdGlvbl90eXBl",
            "GAYgASgOMj4udGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5FZGl0RmF2b3JpdGVzQWN0aW9uVHlwZUIE4kEBAiJdCh5FZGl0RmF2b3Jp",
            "dGVzUmVxdWVzdEluc3RydW1lbnQSFQoEZmlnaRgBIAEoCUICGAFIAIgBARIb",
            "Cg1pbnN0cnVtZW50X2lkGAIgASgJQgTiQQECQgcKBV9maWdpInAKFUVkaXRG",
            "YXZvcml0ZXNSZXNwb25zZRJXChRmYXZvcml0ZV9pbnN0cnVtZW50cxgBIAMo",
            "CzI5LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRmF2",
            "b3JpdGVJbnN0cnVtZW50IhUKE0dldENvdW50cmllc1JlcXVlc3QiYQoUR2V0",
            "Q291bnRyaWVzUmVzcG9uc2USSQoJY291bnRyaWVzGAEgAygLMjYudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Db3VudHJ5UmVzcG9u",
            "c2UiFAoSSW5kaWNhdGl2ZXNSZXF1ZXN0ImUKE0luZGljYXRpdmVzUmVzcG9u",
            "c2USTgoLaW5zdHJ1bWVudHMYASADKAsyOS50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLkluZGljYXRpdmVSZXNwb25zZSKQAgoSSW5k",
            "aWNhdGl2ZVJlc3BvbnNlEgwKBGZpZ2kYASABKAkSDgoGdGlja2VyGAIgASgJ",
            "EhIKCmNsYXNzX2NvZGUYAyABKAkSEAoIY3VycmVuY3kYBCABKAkSTgoPaW5z",
            "dHJ1bWVudF9raW5kGAogASgOMjUudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5JbnN0cnVtZW50VHlwZRIMCgRuYW1lGAwgASgJEhAK",
            "CGV4Y2hhbmdlGA0gASgJEgsKA3VpZBgOIAEoCRIbChJidXlfYXZhaWxhYmxl",
            "X2ZsYWcYlAMgASgIEhwKE3NlbGxfYXZhaWxhYmxlX2ZsYWcYlQMgASgIIlkK",
            "D0NvdW50cnlSZXNwb25zZRIQCghhbGZhX3R3bxgBIAEoCRISCgphbGZhX3Ro",
            "cmVlGAIgASgJEgwKBG5hbWUYAyABKAkSEgoKbmFtZV9icmllZhgEIAEoCSLZ",
            "AQoVRmluZEluc3RydW1lbnRSZXF1ZXN0EhMKBXF1ZXJ5GAEgASgJQgTiQQEC",
            "ElMKD2luc3RydW1lbnRfa2luZBgCIAEoDjI1LnRpbmtvZmYucHVibGljLmlu",
            "dmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudFR5cGVIAIgBARIlChhh",
            "cGlfdHJhZGVfYXZhaWxhYmxlX2ZsYWcYAyABKAhIAYgBAUISChBfaW5zdHJ1",
            "bWVudF9raW5kQhsKGV9hcGlfdHJhZGVfYXZhaWxhYmxlX2ZsYWciZQoWRmlu",
            "ZEluc3RydW1lbnRSZXNwb25zZRJLCgtpbnN0cnVtZW50cxgBIAMoCzI2LnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVu",
            "dFNob3J0IusDCg9JbnN0cnVtZW50U2hvcnQSDAoEaXNpbhgBIAEoCRIMCgRm",
            "aWdpGAIgASgJEg4KBnRpY2tlchgDIAEoCRISCgpjbGFzc19jb2RlGAQgASgJ",
            "EhcKD2luc3RydW1lbnRfdHlwZRgFIAEoCRIMCgRuYW1lGAYgASgJEgsKA3Vp",
            "ZBgHIAEoCRIUCgxwb3NpdGlvbl91aWQYCCABKAkSTgoPaW5zdHJ1bWVudF9r",
            "aW5kGAogASgOMjUudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5JbnN0cnVtZW50VHlwZRIgChhhcGlfdHJhZGVfYXZhaWxhYmxlX2Zs",
            "YWcYCyABKAgSFAoMZm9yX2lpc19mbGFnGAwgASgIEjoKFmZpcnN0XzFtaW5f",
            "Y2FuZGxlX2RhdGUYGiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EjoKFmZpcnN0XzFkYXlfY2FuZGxlX2RhdGUYGyABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEh4KFmZvcl9xdWFsX2ludmVzdG9yX2ZsYWcYHCAB",
            "KAgSFAoMd2Vla2VuZF9mbGFnGB0gASgIEhgKEGJsb2NrZWRfdGNhX2ZsYWcY",
            "HiABKAgiTwoQR2V0QnJhbmRzUmVxdWVzdBI7CgZwYWdpbmcYASABKAsyKy50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlBhZ2UiIwoP",
            "R2V0QnJhbmRSZXF1ZXN0EhAKAmlkGAEgASgJQgTiQQECIpYBChFHZXRCcmFu",
            "ZHNSZXNwb25zZRI8CgZicmFuZHMYASADKAsyLC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLkJyYW5kEkMKBnBhZ2luZxgCIAEoCzIz",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUGFnZVJl",
            "c3BvbnNlIjMKG0dldEFzc2V0RnVuZGFtZW50YWxzUmVxdWVzdBIUCgZhc3Nl",
            "dHMYASADKAlCBOJBAQIi/Q4KHEdldEFzc2V0RnVuZGFtZW50YWxzUmVzcG9u",
            "c2USawoMZnVuZGFtZW50YWxzGAEgAygLMlUudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5HZXRBc3NldEZ1bmRhbWVudGFsc1Jlc3Bv",
            "bnNlLlN0YXRpc3RpY1Jlc3BvbnNlGu8NChFTdGF0aXN0aWNSZXNwb25zZRIR",
            "Cglhc3NldF91aWQYASABKAkSEAoIY3VycmVuY3kYAiABKAkSHQoVbWFya2V0",
            "X2NhcGl0YWxpemF0aW9uGAMgASgBEiAKGGhpZ2hfcHJpY2VfbGFzdF81Ml93",
            "ZWVrcxgEIAEoARIfChdsb3dfcHJpY2VfbGFzdF81Ml93ZWVrcxgFIAEoARIp",
            "CiFhdmVyYWdlX2RhaWx5X3ZvbHVtZV9sYXN0XzEwX2RheXMYBiABKAESKQoh",
            "YXZlcmFnZV9kYWlseV92b2x1bWVfbGFzdF80X3dlZWtzGAcgASgBEgwKBGJl",
            "dGEYCCABKAESEgoKZnJlZV9mbG9hdBgJIAEoARIlCh1mb3J3YXJkX2FubnVh",
            "bF9kaXZpZGVuZF95aWVsZBgKIAEoARIaChJzaGFyZXNfb3V0c3RhbmRpbmcY",
            "CyABKAESEwoLcmV2ZW51ZV90dG0YDCABKAESEgoKZWJpdGRhX3R0bRgNIAEo",
            "ARIWCg5uZXRfaW5jb21lX3R0bRgOIAEoARIPCgdlcHNfdHRtGA8gASgBEhcK",
            "D2RpbHV0ZWRfZXBzX3R0bRgQIAEoARIaChJmcmVlX2Nhc2hfZmxvd190dG0Y",
            "ESABKAESLAokZml2ZV95ZWFyX2FubnVhbF9yZXZlbnVlX2dyb3d0aF9yYXRl",
            "GBIgASgBEi0KJXRocmVlX3llYXJfYW5udWFsX3JldmVudWVfZ3Jvd3RoX3Jh",
            "dGUYEyABKAESFAoMcGVfcmF0aW9fdHRtGBQgASgBEhoKEnByaWNlX3RvX3Nh",
            "bGVzX3R0bRgVIAEoARIZChFwcmljZV90b19ib29rX3R0bRgWIAEoARIjChtw",
            "cmljZV90b19mcmVlX2Nhc2hfZmxvd190dG0YFyABKAESIgoadG90YWxfZW50",
            "ZXJwcmlzZV92YWx1ZV9tcnEYGCABKAESGAoQZXZfdG9fZWJpdGRhX21ycRgZ",
            "IAEoARIWCg5uZXRfbWFyZ2luX21ycRgaIAEoARIfChduZXRfaW50ZXJlc3Rf",
            "bWFyZ2luX21ycRgbIAEoARILCgNyb2UYHCABKAESCwoDcm9hGB0gASgBEgwK",
            "BHJvaWMYHiABKAESFgoOdG90YWxfZGVidF9tcnEYHyABKAESIAoYdG90YWxf",
            "ZGVidF90b19lcXVpdHlfbXJxGCAgASgBEiAKGHRvdGFsX2RlYnRfdG9fZWJp",
            "dGRhX21ycRghIAEoARIfChdmcmVlX2Nhc2hfZmxvd190b19wcmljZRgiIAEo",
            "ARIaChJuZXRfZGVidF90b19lYml0ZGEYIyABKAESGQoRY3VycmVudF9yYXRp",
            "b19tcnEYJCABKAESJgoeZml4ZWRfY2hhcmdlX2NvdmVyYWdlX3JhdGlvX2Z5",
            "GCUgASgBEiAKGGRpdmlkZW5kX3lpZWxkX2RhaWx5X3R0bRgmIAEoARIZChFk",
            "aXZpZGVuZF9yYXRlX3R0bRgnIAEoARIbChNkaXZpZGVuZHNfcGVyX3NoYXJl",
            "GCggASgBEikKIWZpdmVfeWVhcnNfYXZlcmFnZV9kaXZpZGVuZF95aWVsZBgp",
            "IAEoARItCiVmaXZlX3llYXJfYW5udWFsX2RpdmlkZW5kX2dyb3d0aF9yYXRl",
            "GCogASgBEiAKGGRpdmlkZW5kX3BheW91dF9yYXRpb19meRgrIAEoARIUCgxi",
            "dXlfYmFja190dG0YLCABKAESKwojb25lX3llYXJfYW5udWFsX3JldmVudWVf",
            "Z3Jvd3RoX3JhdGUYLSABKAESHwoXZG9taWNpbGVfaW5kaWNhdG9yX2NvZGUY",
            "LiABKAkSIQoZYWRyX3RvX2NvbW1vbl9zaGFyZV9yYXRpbxgvIAEoARIbChNu",
            "dW1iZXJfb2ZfZW1wbG95ZWVzGDAgASgBEjQKEGV4X2RpdmlkZW5kX2RhdGUY",
            "MSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjwKGGZpc2NhbF9w",
            "ZXJpb2Rfc3RhcnRfZGF0ZRgyIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASOgoWZmlzY2FsX3BlcmlvZF9lbmRfZGF0ZRgzIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASIQoZcmV2ZW51ZV9jaGFuZ2VfZml2ZV95",
            "ZWFycxg1IAEoARIdChVlcHNfY2hhbmdlX2ZpdmVfeWVhcnMYNiABKAESIAoY",
            "ZWJpdGRhX2NoYW5nZV9maXZlX3llYXJzGDcgASgBEiQKHHRvdGFsX2RlYnRf",
            "Y2hhbmdlX2ZpdmVfeWVhcnMYOCABKAESEwoLZXZfdG9fc2FsZXMYOSABKAEi",
            "oQEKFkdldEFzc2V0UmVwb3J0c1JlcXVlc3QSGwoNaW5zdHJ1bWVudF9pZBgB",
            "IAEoCUIE4kEBAhItCgRmcm9tGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcEgAiAEBEisKAnRvGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcEgBiAEBQgcKBV9mcm9tQgUKA190byKnBAoXR2V0QXNzZXRSZXBv",
            "cnRzUmVzcG9uc2USYwoGZXZlbnRzGAEgAygLMlMudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRBc3NldFJlcG9ydHNSZXNwb25z",
            "ZS5HZXRBc3NldFJlcG9ydHNFdmVudBqiAgoUR2V0QXNzZXRSZXBvcnRzRXZl",
            "bnQSFQoNaW5zdHJ1bWVudF9pZBgBIAEoCRIvCgtyZXBvcnRfZGF0ZRgCIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoLcGVyaW9kX3llYXIY",
            "AyABKAUSEgoKcGVyaW9kX251bRgEIAEoBRJpCgtwZXJpb2RfdHlwZRgFIAEo",
            "DjJULnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuR2V0",
            "QXNzZXRSZXBvcnRzUmVzcG9uc2UuQXNzZXRSZXBvcnRQZXJpb2RUeXBlEi4K",
            "CmNyZWF0ZWRfYXQYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "IoEBChVBc3NldFJlcG9ydFBlcmlvZFR5cGUSGwoXUEVSSU9EX1RZUEVfVU5T",
            "UEVDSUZJRUQQABIXChNQRVJJT0RfVFlQRV9RVUFSVEVSEAESGgoWUEVSSU9E",
            "X1RZUEVfU0VNSUFOTlVBTBACEhYKElBFUklPRF9UWVBFX0FOTlVBTBADImsK",
            "HEdldENvbnNlbnN1c0ZvcmVjYXN0c1JlcXVlc3QSQAoGcGFnaW5nGAEgASgL",
            "MisudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5QYWdl",
            "SACIAQFCCQoHX3BhZ2luZyKGBgodR2V0Q29uc2Vuc3VzRm9yZWNhc3RzUmVz",
            "cG9uc2USagoFaXRlbXMYASADKAsyWy50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkdldENvbnNlbnN1c0ZvcmVjYXN0c1Jlc3BvbnNl",
            "LkNvbnNlbnN1c0ZvcmVjYXN0c0l0ZW0SQQoEcGFnZRgCIAEoCzIzLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUGFnZVJlc3BvbnNl",
            "GrUEChZDb25zZW5zdXNGb3JlY2FzdHNJdGVtEgsKA3VpZBgBIAEoCRIRCglh",
            "c3NldF91aWQYAiABKAkSLgoKY3JlYXRlZF9hdBgDIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASSwoRYmVzdF90YXJnZXRfcHJpY2UYBCABKAsy",
            "MC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3Rh",
            "dGlvbhJJCg9iZXN0X3RhcmdldF9sb3cYBSABKAsyMC50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJKChBiZXN0X3Rh",
            "cmdldF9oaWdoGAYgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24SGwoTdG90YWxfYnV5X3JlY29tbWVuZBgH",
            "IAEoBRIcChR0b3RhbF9ob2xkX3JlY29tbWVuZBgIIAEoBRIcChR0b3RhbF9z",
            "ZWxsX3JlY29tbWVuZBgJIAEoBRIQCghjdXJyZW5jeRgKIAEoCRJICgljb25z",
            "ZW5zdXMYCyABKA4yNS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLlJlY29tbWVuZGF0aW9uEjIKDnByb2dub3Npc19kYXRlGAwgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCIrChJHZXRGb3JlY2FzdFJl",
            "cXVlc3QSFQoNaW5zdHJ1bWVudF9pZBgBIAEoCSKXCgoTR2V0Rm9yZWNhc3RS",
            "ZXNwb25zZRJWCgd0YXJnZXRzGAEgAygLMkUudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5HZXRGb3JlY2FzdFJlc3BvbnNlLlRhcmdl",
            "dEl0ZW0SWwoJY29uc2Vuc3VzGAIgASgLMkgudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5HZXRGb3JlY2FzdFJlc3BvbnNlLkNvbnNl",
            "bnN1c0l0ZW0ajAQKClRhcmdldEl0ZW0SCwoDdWlkGAEgASgJEg4KBnRpY2tl",
            "chgCIAEoCRIPCgdjb21wYW55GAMgASgJEk0KDnJlY29tbWVuZGF0aW9uGAQg",
            "ASgOMjUudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5S",
            "ZWNvbW1lbmRhdGlvbhI3ChNyZWNvbW1lbmRhdGlvbl9kYXRlGAUgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIQCghjdXJyZW5jeRgGIAEoCRJH",
            "Cg1jdXJyZW50X3ByaWNlGAcgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SRgoMdGFyZ2V0X3ByaWNlGAgg",
            "ASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5R",
            "dW90YXRpb24SRgoMcHJpY2VfY2hhbmdlGAkgASgLMjAudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SSgoQcHJpY2Vf",
            "Y2hhbmdlX3JlbBgKIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuUXVvdGF0aW9uEhEKCXNob3dfbmFtZRgLIAEoCRq7BAoN",
            "Q29uc2Vuc3VzSXRlbRILCgN1aWQYASABKAkSDgoGdGlja2VyGAIgASgJEk0K",
            "DnJlY29tbWVuZGF0aW9uGAMgASgOMjUudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5SZWNvbW1lbmRhdGlvbhIQCghjdXJyZW5jeRgE",
            "IAEoCRJHCg1jdXJyZW50X3ByaWNlGAUgASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQwoJY29uc2Vuc3Vz",
            "GAYgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5RdW90YXRpb24SRAoKbWluX3RhcmdldBgHIAEoCzIwLnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkQKCm1heF90",
            "YXJnZXQYCCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLlF1b3RhdGlvbhJGCgxwcmljZV9jaGFuZ2UYCSABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJK",
            "ChBwcmljZV9jaGFuZ2VfcmVsGAogASgLMjAudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24i4AEKD1RyYWRpbmdJbnRl",
            "cnZhbBIMCgR0eXBlGAEgASgJElUKCGludGVydmFsGAIgASgLMkMudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5UcmFkaW5nSW50ZXJ2",
            "YWwuVGltZUludGVydmFsGmgKDFRpbWVJbnRlcnZhbBIsCghzdGFydF90cxgB",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASKgoGZW5kX3RzGAIg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCrXAQoKQ291cG9uVHlw",
            "ZRIbChdDT1VQT05fVFlQRV9VTlNQRUNJRklFRBAAEhgKFENPVVBPTl9UWVBF",
            "X0NPTlNUQU5UEAESGAoUQ09VUE9OX1RZUEVfRkxPQVRJTkcQAhIYChRDT1VQ",
            "T05fVFlQRV9ESVNDT1VOVBADEhgKFENPVVBPTl9UWVBFX01PUlRHQUdFEAQS",
            "EwoPQ09VUE9OX1RZUEVfRklYEAUSGAoUQ09VUE9OX1RZUEVfVkFSSUFCTEUQ",
            "BhIVChFDT1VQT05fVFlQRV9PVEhFUhAHKmgKD09wdGlvbkRpcmVjdGlvbhIg",
            "ChxPUFRJT05fRElSRUNUSU9OX1VOU1BFQ0lGSUVEEAASGAoUT1BUSU9OX0RJ",
            "UkVDVElPTl9QVVQQARIZChVPUFRJT05fRElSRUNUSU9OX0NBTEwQAip7ChFP",
            "cHRpb25QYXltZW50VHlwZRIjCh9PUFRJT05fUEFZTUVOVF9UWVBFX1VOU1BF",
            "Q0lGSUVEEAASHwobT1BUSU9OX1BBWU1FTlRfVFlQRV9QUkVNSVVNEAESIAoc",
            "T1BUSU9OX1BBWU1FTlRfVFlQRV9NQVJHSU5BTBACKmEKC09wdGlvblN0eWxl",
            "EhwKGE9QVElPTl9TVFlMRV9VTlNQRUNJRklFRBAAEhkKFU9QVElPTl9TVFlM",
            "RV9BTUVSSUNBThABEhkKFU9QVElPTl9TVFlMRV9FVVJPUEVBThACKpUBChRP",
            "cHRpb25TZXR0bGVtZW50VHlwZRIlCiFPUFRJT05fRVhFQ1VUSU9OX1RZUEVf",
            "VU5TUEVDSUZJRUQQABIrCidPUFRJT05fRVhFQ1VUSU9OX1RZUEVfUEhZU0lD",
            "QUxfREVMSVZFUlkQARIpCiVPUFRJT05fRVhFQ1VUSU9OX1RZUEVfQ0FTSF9T",
            "RVRUTEVNRU5UEAIqrgEKEEluc3RydW1lbnRJZFR5cGUSHQoZSU5TVFJVTUVO",
            "VF9JRF9VTlNQRUNJRklFRBAAEhsKF0lOU1RSVU1FTlRfSURfVFlQRV9GSUdJ",
            "EAESHQoZSU5TVFJVTUVOVF9JRF9UWVBFX1RJQ0tFUhACEhoKFklOU1RSVU1F",
            "TlRfSURfVFlQRV9VSUQQAxIjCh9JTlNUUlVNRU5UX0lEX1RZUEVfUE9TSVRJ",
            "T05fVUlEEAQqbAoQSW5zdHJ1bWVudFN0YXR1cxIhCh1JTlNUUlVNRU5UX1NU",
            "QVRVU19VTlNQRUNJRklFRBAAEhoKFklOU1RSVU1FTlRfU1RBVFVTX0JBU0UQ",
            "ARIZChVJTlNUUlVNRU5UX1NUQVRVU19BTEwQAirlAQoJU2hhcmVUeXBlEhoK",
            "FlNIQVJFX1RZUEVfVU5TUEVDSUZJRUQQABIVChFTSEFSRV9UWVBFX0NPTU1P",
            "ThABEhgKFFNIQVJFX1RZUEVfUFJFRkVSUkVEEAISEgoOU0hBUkVfVFlQRV9B",
            "RFIQAxISCg5TSEFSRV9UWVBFX0dEUhAEEhIKDlNIQVJFX1RZUEVfTUxQEAUS",
            "GgoWU0hBUkVfVFlQRV9OWV9SRUdfU0hSUxAGEh4KGlNIQVJFX1RZUEVfQ0xP",
            "U0VEX0VORF9GVU5EEAcSEwoPU0hBUkVfVFlQRV9SRUlUEAgqiQEKCUFzc2V0",
            "VHlwZRIaChZBU1NFVF9UWVBFX1VOU1BFQ0lGSUVEEAASFwoTQVNTRVRfVFlQ",
            "RV9DVVJSRU5DWRABEhgKFEFTU0VUX1RZUEVfQ09NTU9ESVRZEAISFAoQQVNT",
            "RVRfVFlQRV9JTkRFWBADEhcKE0FTU0VUX1RZUEVfU0VDVVJJVFkQBCpmChVT",
            "dHJ1Y3R1cmVkUHJvZHVjdFR5cGUSFwoTU1BfVFlQRV9VTlNQRUNJRklFRBAA",
            "EhcKE1NQX1RZUEVfREVMSVZFUkFCTEUQARIbChdTUF9UWVBFX05PTl9ERUxJ",
            "VkVSQUJMRRACKo0BChdFZGl0RmF2b3JpdGVzQWN0aW9uVHlwZRIqCiZFRElU",
            "X0ZBVk9SSVRFU19BQ1RJT05fVFlQRV9VTlNQRUNJRklFRBAAEiIKHkVESVRf",
            "RkFWT1JJVEVTX0FDVElPTl9UWVBFX0FERBABEiIKHkVESVRfRkFWT1JJVEVT",
            "X0FDVElPTl9UWVBFX0RFTBACKnMKDFJlYWxFeGNoYW5nZRIdChlSRUFMX0VY",
            "Q0hBTkdFX1VOU1BFQ0lGSUVEEAASFgoSUkVBTF9FWENIQU5HRV9NT0VYEAES",
            "FQoRUkVBTF9FWENIQU5HRV9SVFMQAhIVChFSRUFMX0VYQ0hBTkdFX09UQxAD",
            "KnoKDlJlY29tbWVuZGF0aW9uEh4KGlJFQ09NTUVOREFUSU9OX1VOU1BFQ0lG",
            "SUVEEAASFgoSUkVDT01NRU5EQVRJT05fQlVZEAESFwoTUkVDT01NRU5EQVRJ",
            "T05fSE9MRBACEhcKE1JFQ09NTUVOREFUSU9OX1NFTEwQAyppCglSaXNrTGV2",
            "ZWwSGgoWUklTS19MRVZFTF9VTlNQRUNJRklFRBAAEhIKDlJJU0tfTEVWRUxf",
            "TE9XEAESFwoTUklTS19MRVZFTF9NT0RFUkFURRACEhMKD1JJU0tfTEVWRUxf",
            "SElHSBADMu8iChJJbnN0cnVtZW50c1NlcnZpY2USkwEKEFRyYWRpbmdTY2hl",
            "ZHVsZXMSPi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "LlRyYWRpbmdTY2hlZHVsZXNSZXF1ZXN0Gj8udGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5UcmFkaW5nU2NoZWR1bGVzUmVzcG9uc2US",
            "dwoGQm9uZEJ5EjgudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5JbnN0cnVtZW50UmVxdWVzdBozLnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuQm9uZFJlc3BvbnNlEngKBUJvbmRzEjkudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50",
            "c1JlcXVlc3QaNC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLkJvbmRzUmVzcG9uc2USjQEKDkdldEJvbmRDb3Vwb25zEjwudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRCb25kQ291cG9u",
            "c1JlcXVlc3QaPS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLkdldEJvbmRDb3Vwb25zUmVzcG9uc2USigEKDUdldEJvbmRFdmVudHMS",
            "Oy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkdldEJv",
            "bmRFdmVudHNSZXF1ZXN0GjwudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5HZXRCb25kRXZlbnRzUmVzcG9uc2USfwoKQ3VycmVuY3lC",
            "eRI4LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5z",
            "dHJ1bWVudFJlcXVlc3QaNy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLkN1cnJlbmN5UmVzcG9uc2USggEKCkN1cnJlbmNpZXMSOS50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkluc3RydW1l",
            "bnRzUmVxdWVzdBo5LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJh",
            "Y3QudjEuQ3VycmVuY2llc1Jlc3BvbnNlEnUKBUV0ZkJ5EjgudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50UmVxdWVz",
            "dBoyLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRXRm",
            "UmVzcG9uc2USdgoERXRmcxI5LnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuSW5zdHJ1bWVudHNSZXF1ZXN0GjMudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5FdGZzUmVzcG9uc2USewoIRnV0",
            "dXJlQnkSOC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "Lkluc3RydW1lbnRSZXF1ZXN0GjUudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5GdXR1cmVSZXNwb25zZRJ8CgdGdXR1cmVzEjkudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50",
            "c1JlcXVlc3QaNi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLkZ1dHVyZXNSZXNwb25zZRJ7CghPcHRpb25CeRI4LnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudFJlcXVlc3Qa",
            "NS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk9wdGlv",
            "blJlc3BvbnNlEoEBCgdPcHRpb25zEjkudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50c1JlcXVlc3QaNi50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk9wdGlvbnNSZXNwb25z",
            "ZSIDiAIBEoABCglPcHRpb25zQnkSOy50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkZpbHRlck9wdGlvbnNSZXF1ZXN0GjYudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5PcHRpb25zUmVzcG9u",
            "c2USeQoHU2hhcmVCeRI4LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuSW5zdHJ1bWVudFJlcXVlc3QaNC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlNoYXJlUmVzcG9uc2USegoGU2hhcmVz",
            "EjkudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0",
            "cnVtZW50c1JlcXVlc3QaNS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLlNoYXJlc1Jlc3BvbnNlEoQBCgtJbmRpY2F0aXZlcxI5LnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5kaWNhdGl2",
            "ZXNSZXF1ZXN0GjoudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5JbmRpY2F0aXZlc1Jlc3BvbnNlEpwBChNHZXRBY2NydWVkSW50ZXJl",
            "c3RzEkEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5H",
            "ZXRBY2NydWVkSW50ZXJlc3RzUmVxdWVzdBpCLnRpbmtvZmYucHVibGljLmlu",
            "dmVzdC5hcGkuY29udHJhY3QudjEuR2V0QWNjcnVlZEludGVyZXN0c1Jlc3Bv",
            "bnNlEpMBChBHZXRGdXR1cmVzTWFyZ2luEj4udGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5HZXRGdXR1cmVzTWFyZ2luUmVxdWVzdBo/",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuR2V0RnV0",
            "dXJlc01hcmdpblJlc3BvbnNlEoYBCg9HZXRJbnN0cnVtZW50QnkSOC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkluc3RydW1lbnRS",
            "ZXF1ZXN0GjkudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5JbnN0cnVtZW50UmVzcG9uc2UShwEKDEdldERpdmlkZW5kcxI6LnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuR2V0RGl2aWRlbmRz",
            "UmVxdWVzdBo7LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuR2V0RGl2aWRlbmRzUmVzcG9uc2USdwoKR2V0QXNzZXRCeRIzLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQXNzZXRSZXF1ZXN0",
            "GjQudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Bc3Nl",
            "dFJlc3BvbnNlEngKCUdldEFzc2V0cxI0LnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuQXNzZXRzUmVxdWVzdBo1LnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQXNzZXRzUmVzcG9uc2UShwEK",
            "DEdldEZhdm9yaXRlcxI6LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuR2V0RmF2b3JpdGVzUmVxdWVzdBo7LnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuR2V0RmF2b3JpdGVzUmVzcG9uc2US",
            "igEKDUVkaXRGYXZvcml0ZXMSOy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLkVkaXRGYXZvcml0ZXNSZXF1ZXN0GjwudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5FZGl0RmF2b3JpdGVzUmVz",
            "cG9uc2UShwEKDEdldENvdW50cmllcxI6LnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuR2V0Q291bnRyaWVzUmVxdWVzdBo7LnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuR2V0Q291bnRyaWVz",
            "UmVzcG9uc2USjQEKDkZpbmRJbnN0cnVtZW50EjwudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5GaW5kSW5zdHJ1bWVudFJlcXVlc3Qa",
            "PS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkZpbmRJ",
            "bnN0cnVtZW50UmVzcG9uc2USfgoJR2V0QnJhbmRzEjcudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRCcmFuZHNSZXF1ZXN0Gjgu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRCcmFu",
            "ZHNSZXNwb25zZRJyCgpHZXRCcmFuZEJ5EjYudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5HZXRCcmFuZFJlcXVlc3QaLC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkJyYW5kEp8BChRHZXRB",
            "c3NldEZ1bmRhbWVudGFscxJCLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuR2V0QXNzZXRGdW5kYW1lbnRhbHNSZXF1ZXN0GkMudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRBc3NldEZ1",
            "bmRhbWVudGFsc1Jlc3BvbnNlEpABCg9HZXRBc3NldFJlcG9ydHMSPS50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkdldEFzc2V0UmVw",
            "b3J0c1JlcXVlc3QaPi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkdldEFzc2V0UmVwb3J0c1Jlc3BvbnNlEqIBChVHZXRDb25zZW5z",
            "dXNGb3JlY2FzdHMSQy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkdldENvbnNlbnN1c0ZvcmVjYXN0c1JlcXVlc3QaRC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkdldENvbnNlbnN1c0Zv",
            "cmVjYXN0c1Jlc3BvbnNlEoYBCg1HZXRGb3JlY2FzdEJ5EjkudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRGb3JlY2FzdFJlcXVl",
            "c3QaOi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkdl",
            "dEZvcmVjYXN0UmVzcG9uc2VCYQoccnUudGlua29mZi5waWFwaS5jb250cmFj",
            "dC52MVABWgwuLztpbnZlc3RhcGmiAgVUSUFQSaoCFFRpbmtvZmYuSW52ZXN0",
            "QXBpLlYxygIRVGlua29mZlxJbnZlc3RcVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Tinkoff.InvestApi.V1.CommonReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tinkoff.InvestApi.V1.CouponType), typeof(global::Tinkoff.InvestApi.V1.OptionDirection), typeof(global::Tinkoff.InvestApi.V1.OptionPaymentType), typeof(global::Tinkoff.InvestApi.V1.OptionStyle), typeof(global::Tinkoff.InvestApi.V1.OptionSettlementType), typeof(global::Tinkoff.InvestApi.V1.InstrumentIdType), typeof(global::Tinkoff.InvestApi.V1.InstrumentStatus), typeof(global::Tinkoff.InvestApi.V1.ShareType), typeof(global::Tinkoff.InvestApi.V1.AssetType), typeof(global::Tinkoff.InvestApi.V1.StructuredProductType), typeof(global::Tinkoff.InvestApi.V1.EditFavoritesActionType), typeof(global::Tinkoff.InvestApi.V1.RealExchange), typeof(global::Tinkoff.InvestApi.V1.Recommendation), typeof(global::Tinkoff.InvestApi.V1.RiskLevel), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest), global::Tinkoff.InvestApi.V1.TradingSchedulesRequest.Parser, new[]{ "Exchange", "From", "To" }, new[]{ "Exchange", "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingSchedulesResponse), global::Tinkoff.InvestApi.V1.TradingSchedulesResponse.Parser, new[]{ "Exchanges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingSchedule), global::Tinkoff.InvestApi.V1.TradingSchedule.Parser, new[]{ "Exchange", "Days" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingDay), global::Tinkoff.InvestApi.V1.TradingDay.Parser, new[]{ "Date", "IsTradingDay", "StartTime", "EndTime", "OpeningAuctionStartTime", "ClosingAuctionEndTime", "EveningOpeningAuctionStartTime", "EveningStartTime", "EveningEndTime", "ClearingStartTime", "ClearingEndTime", "PremarketStartTime", "PremarketEndTime", "ClosingAuctionStartTime", "OpeningAuctionEndTime", "Intervals" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.InstrumentRequest), global::Tinkoff.InvestApi.V1.InstrumentRequest.Parser, new[]{ "IdType", "ClassCode", "Id" }, new[]{ "ClassCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.InstrumentsRequest), global::Tinkoff.InvestApi.V1.InstrumentsRequest.Parser, new[]{ "InstrumentStatus" }, new[]{ "InstrumentStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.FilterOptionsRequest), global::Tinkoff.InvestApi.V1.FilterOptionsRequest.Parser, new[]{ "BasicAssetUid", "BasicAssetPositionUid" }, new[]{ "BasicAssetUid", "BasicAssetPositionUid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.BondResponse), global::Tinkoff.InvestApi.V1.BondResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.BondsResponse), global::Tinkoff.InvestApi.V1.BondsResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetBondCouponsRequest), global::Tinkoff.InvestApi.V1.GetBondCouponsRequest.Parser, new[]{ "Figi", "From", "To", "InstrumentId" }, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetBondCouponsResponse), global::Tinkoff.InvestApi.V1.GetBondCouponsResponse.Parser, new[]{ "Events" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetBondEventsRequest), global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Parser, new[]{ "From", "To", "InstrumentId", "Type" }, new[]{ "From", "To" }, new[]{ typeof(global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetBondEventsResponse), global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Parser, new[]{ "Events" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Types.BondEvent), global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Types.BondEvent.Parser, new[]{ "InstrumentId", "EventNumber", "EventDate", "EventType", "EventTotalVol", "FixDate", "RateDate", "DefaultDate", "RealPayDate", "PayDate", "PayOneBond", "MoneyFlowVal", "Execution", "OperationType", "Value", "Note", "ConvertToFinToolId", "CouponStartDate", "CouponEndDate", "CouponPeriod", "CouponInterestRate" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Coupon), global::Tinkoff.InvestApi.V1.Coupon.Parser, new[]{ "Figi", "CouponDate", "CouponNumber", "FixDate", "PayOneBond", "CouponType", "CouponStartDate", "CouponEndDate", "CouponPeriod" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.CurrencyResponse), global::Tinkoff.InvestApi.V1.CurrencyResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.CurrenciesResponse), global::Tinkoff.InvestApi.V1.CurrenciesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.EtfResponse), global::Tinkoff.InvestApi.V1.EtfResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.EtfsResponse), global::Tinkoff.InvestApi.V1.EtfsResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.FutureResponse), global::Tinkoff.InvestApi.V1.FutureResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.FuturesResponse), global::Tinkoff.InvestApi.V1.FuturesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.OptionResponse), global::Tinkoff.InvestApi.V1.OptionResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.OptionsResponse), global::Tinkoff.InvestApi.V1.OptionsResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Option), global::Tinkoff.InvestApi.V1.Option.Parser, new[]{ "Uid", "PositionUid", "Ticker", "ClassCode", "BasicAssetPositionUid", "TradingStatus", "RealExchange", "Direction", "PaymentType", "Style", "SettlementType", "Name", "Currency", "SettlementCurrency", "AssetType", "BasicAsset", "Exchange", "CountryOfRisk", "CountryOfRiskName", "Sector", "Brand", "Lot", "BasicAssetSize", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "MinPriceIncrement", "StrikePrice", "ExpirationDate", "FirstTradeDate", "LastTradeDate", "First1MinCandleDate", "First1DayCandleDate", "ShortEnabledFlag", "ForIisFlag", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "ApiTradeAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.ShareResponse), global::Tinkoff.InvestApi.V1.ShareResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.SharesResponse), global::Tinkoff.InvestApi.V1.SharesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Bond), global::Tinkoff.InvestApi.V1.Bond.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "CouponQuantityPerYear", "MaturityDate", "Nominal", "InitialNominal", "StateRegDate", "PlacementDate", "PlacementPrice", "AciValue", "CountryOfRisk", "CountryOfRiskName", "Sector", "IssueKind", "IssueSize", "IssueSizePlan", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "FloatingCouponFlag", "PerpetualFlag", "AmortizationFlag", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "AssetUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "SubordinatedFlag", "LiquidityFlag", "First1MinCandleDate", "First1DayCandleDate", "RiskLevel", "Brand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Currency), global::Tinkoff.InvestApi.V1.Currency.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency_", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "Nominal", "CountryOfRisk", "CountryOfRiskName", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "IsoCurrencyName", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "First1MinCandleDate", "First1DayCandleDate", "Brand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Etf), global::Tinkoff.InvestApi.V1.Etf.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "FixedCommission", "FocusType", "ReleasedDate", "NumShares", "CountryOfRisk", "CountryOfRiskName", "Sector", "RebalancingFreq", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "AssetUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "LiquidityFlag", "First1MinCandleDate", "First1DayCandleDate", "Brand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Future), global::Tinkoff.InvestApi.V1.Future.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "FirstTradeDate", "LastTradeDate", "FuturesType", "AssetType", "BasicAsset", "BasicAssetSize", "CountryOfRisk", "CountryOfRiskName", "Sector", "ExpirationDate", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "BasicAssetPositionUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "First1MinCandleDate", "First1DayCandleDate", "InitialMarginOnBuy", "InitialMarginOnSell", "MinPriceIncrementAmount", "Brand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Share), global::Tinkoff.InvestApi.V1.Share.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "IpoDate", "IssueSize", "CountryOfRisk", "CountryOfRiskName", "Sector", "IssueSizePlan", "Nominal", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "DivYieldFlag", "ShareType", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "AssetUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "LiquidityFlag", "First1MinCandleDate", "First1DayCandleDate", "Brand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest), global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest.Parser, new[]{ "Figi", "From", "To", "InstrumentId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse), global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse.Parser, new[]{ "AccruedInterests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AccruedInterest), global::Tinkoff.InvestApi.V1.AccruedInterest.Parser, new[]{ "Date", "Value", "ValuePercent", "Nominal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest), global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest.Parser, new[]{ "Figi", "InstrumentId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse), global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse.Parser, new[]{ "InitialMarginOnBuy", "InitialMarginOnSell", "MinPriceIncrement", "MinPriceIncrementAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.InstrumentResponse), global::Tinkoff.InvestApi.V1.InstrumentResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Instrument), global::Tinkoff.InvestApi.V1.Instrument.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "CountryOfRisk", "CountryOfRiskName", "InstrumentType", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "AssetUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "InstrumentKind", "First1MinCandleDate", "First1DayCandleDate", "Brand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetDividendsRequest), global::Tinkoff.InvestApi.V1.GetDividendsRequest.Parser, new[]{ "Figi", "From", "To", "InstrumentId" }, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetDividendsResponse), global::Tinkoff.InvestApi.V1.GetDividendsResponse.Parser, new[]{ "Dividends" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Dividend), global::Tinkoff.InvestApi.V1.Dividend.Parser, new[]{ "DividendNet", "PaymentDate", "DeclaredDate", "LastBuyDate", "DividendType", "RecordDate", "Regularity", "ClosePrice", "YieldValue", "CreatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetRequest), global::Tinkoff.InvestApi.V1.AssetRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetResponse), global::Tinkoff.InvestApi.V1.AssetResponse.Parser, new[]{ "Asset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetsRequest), global::Tinkoff.InvestApi.V1.AssetsRequest.Parser, new[]{ "InstrumentType" }, new[]{ "InstrumentType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetsResponse), global::Tinkoff.InvestApi.V1.AssetsResponse.Parser, new[]{ "Assets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetFull), global::Tinkoff.InvestApi.V1.AssetFull.Parser, new[]{ "Uid", "Type", "Name", "NameBrief", "Description", "DeletedAt", "RequiredTests", "Currency", "Security", "GosRegCode", "Cfi", "CodeNsd", "Status", "Brand", "UpdatedAt", "BrCode", "BrCodeName", "Instruments" }, new[]{ "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Asset), global::Tinkoff.InvestApi.V1.Asset.Parser, new[]{ "Uid", "Type", "Name", "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetCurrency), global::Tinkoff.InvestApi.V1.AssetCurrency.Parser, new[]{ "BaseCurrency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetSecurity), global::Tinkoff.InvestApi.V1.AssetSecurity.Parser, new[]{ "Isin", "Type", "InstrumentKind", "Share", "Bond", "Sp", "Etf", "ClearingCertificate" }, new[]{ "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetShare), global::Tinkoff.InvestApi.V1.AssetShare.Parser, new[]{ "Type", "IssueSize", "Nominal", "NominalCurrency", "PrimaryIndex", "DividendRate", "PreferredShareType", "IpoDate", "RegistryDate", "DivYieldFlag", "IssueKind", "PlacementDate", "RepresIsin", "IssueSizePlan", "TotalFloat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetBond), global::Tinkoff.InvestApi.V1.AssetBond.Parser, new[]{ "CurrentNominal", "BorrowName", "IssueSize", "Nominal", "NominalCurrency", "IssueKind", "InterestKind", "CouponQuantityPerYear", "IndexedNominalFlag", "SubordinatedFlag", "CollateralFlag", "TaxFreeFlag", "AmortizationFlag", "FloatingCouponFlag", "PerpetualFlag", "MaturityDate", "ReturnCondition", "StateRegDate", "PlacementDate", "PlacementPrice", "IssueSizePlan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetStructuredProduct), global::Tinkoff.InvestApi.V1.AssetStructuredProduct.Parser, new[]{ "BorrowName", "Nominal", "NominalCurrency", "Type", "LogicPortfolio", "AssetType", "BasicAsset", "SafetyBarrier", "MaturityDate", "IssueSizePlan", "IssueSize", "PlacementDate", "IssueKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetEtf), global::Tinkoff.InvestApi.V1.AssetEtf.Parser, new[]{ "TotalExpense", "HurdleRate", "PerformanceFee", "FixedCommission", "PaymentType", "WatermarkFlag", "BuyPremium", "SellDiscount", "RebalancingFlag", "RebalancingFreq", "ManagementType", "PrimaryIndex", "FocusType", "LeveragedFlag", "NumShare", "UcitsFlag", "ReleasedDate", "Description", "PrimaryIndexDescription", "PrimaryIndexCompany", "IndexRecoveryPeriod", "InavCode", "DivYieldFlag", "ExpenseCommission", "PrimaryIndexTrackingError", "RebalancingPlan", "TaxRate", "RebalancingDates", "IssueKind", "Nominal", "NominalCurrency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetClearingCertificate), global::Tinkoff.InvestApi.V1.AssetClearingCertificate.Parser, new[]{ "Nominal", "NominalCurrency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Brand), global::Tinkoff.InvestApi.V1.Brand.Parser, new[]{ "Uid", "Name", "Description", "Info", "Company", "Sector", "CountryOfRisk", "CountryOfRiskName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AssetInstrument), global::Tinkoff.InvestApi.V1.AssetInstrument.Parser, new[]{ "Uid", "Figi", "InstrumentType", "Ticker", "ClassCode", "Links", "InstrumentKind", "PositionUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.InstrumentLink), global::Tinkoff.InvestApi.V1.InstrumentLink.Parser, new[]{ "Type", "InstrumentUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetFavoritesRequest), global::Tinkoff.InvestApi.V1.GetFavoritesRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetFavoritesResponse), global::Tinkoff.InvestApi.V1.GetFavoritesResponse.Parser, new[]{ "FavoriteInstruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.FavoriteInstrument), global::Tinkoff.InvestApi.V1.FavoriteInstrument.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "InstrumentType", "Name", "Uid", "OtcFlag", "ApiTradeAvailableFlag", "InstrumentKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.EditFavoritesRequest), global::Tinkoff.InvestApi.V1.EditFavoritesRequest.Parser, new[]{ "Instruments", "ActionType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.EditFavoritesRequestInstrument), global::Tinkoff.InvestApi.V1.EditFavoritesRequestInstrument.Parser, new[]{ "Figi", "InstrumentId" }, new[]{ "Figi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.EditFavoritesResponse), global::Tinkoff.InvestApi.V1.EditFavoritesResponse.Parser, new[]{ "FavoriteInstruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetCountriesRequest), global::Tinkoff.InvestApi.V1.GetCountriesRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetCountriesResponse), global::Tinkoff.InvestApi.V1.GetCountriesResponse.Parser, new[]{ "Countries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.IndicativesRequest), global::Tinkoff.InvestApi.V1.IndicativesRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.IndicativesResponse), global::Tinkoff.InvestApi.V1.IndicativesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.IndicativeResponse), global::Tinkoff.InvestApi.V1.IndicativeResponse.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Currency", "InstrumentKind", "Name", "Exchange", "Uid", "BuyAvailableFlag", "SellAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.CountryResponse), global::Tinkoff.InvestApi.V1.CountryResponse.Parser, new[]{ "AlfaTwo", "AlfaThree", "Name", "NameBrief" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.FindInstrumentRequest), global::Tinkoff.InvestApi.V1.FindInstrumentRequest.Parser, new[]{ "Query", "InstrumentKind", "ApiTradeAvailableFlag" }, new[]{ "InstrumentKind", "ApiTradeAvailableFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.FindInstrumentResponse), global::Tinkoff.InvestApi.V1.FindInstrumentResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.InstrumentShort), global::Tinkoff.InvestApi.V1.InstrumentShort.Parser, new[]{ "Isin", "Figi", "Ticker", "ClassCode", "InstrumentType", "Name", "Uid", "PositionUid", "InstrumentKind", "ApiTradeAvailableFlag", "ForIisFlag", "First1MinCandleDate", "First1DayCandleDate", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetBrandsRequest), global::Tinkoff.InvestApi.V1.GetBrandsRequest.Parser, new[]{ "Paging" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetBrandRequest), global::Tinkoff.InvestApi.V1.GetBrandRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetBrandsResponse), global::Tinkoff.InvestApi.V1.GetBrandsResponse.Parser, new[]{ "Brands", "Paging" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest), global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest.Parser, new[]{ "Assets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse), global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Parser, new[]{ "Fundamentals" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Types.StatisticResponse), global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Types.StatisticResponse.Parser, new[]{ "AssetUid", "Currency", "MarketCapitalization", "HighPriceLast52Weeks", "LowPriceLast52Weeks", "AverageDailyVolumeLast10Days", "AverageDailyVolumeLast4Weeks", "Beta", "FreeFloat", "ForwardAnnualDividendYield", "SharesOutstanding", "RevenueTtm", "EbitdaTtm", "NetIncomeTtm", "EpsTtm", "DilutedEpsTtm", "FreeCashFlowTtm", "FiveYearAnnualRevenueGrowthRate", "ThreeYearAnnualRevenueGrowthRate", "PeRatioTtm", "PriceToSalesTtm", "PriceToBookTtm", "PriceToFreeCashFlowTtm", "TotalEnterpriseValueMrq", "EvToEbitdaMrq", "NetMarginMrq", "NetInterestMarginMrq", "Roe", "Roa", "Roic", "TotalDebtMrq", "TotalDebtToEquityMrq", "TotalDebtToEbitdaMrq", "FreeCashFlowToPrice", "NetDebtToEbitda", "CurrentRatioMrq", "FixedChargeCoverageRatioFy", "DividendYieldDailyTtm", "DividendRateTtm", "DividendsPerShare", "FiveYearsAverageDividendYield", "FiveYearAnnualDividendGrowthRate", "DividendPayoutRatioFy", "BuyBackTtm", "OneYearAnnualRevenueGrowthRate", "DomicileIndicatorCode", "AdrToCommonShareRatio", "NumberOfEmployees", "ExDividendDate", "FiscalPeriodStartDate", "FiscalPeriodEndDate", "RevenueChangeFiveYears", "EpsChangeFiveYears", "EbitdaChangeFiveYears", "TotalDebtChangeFiveYears", "EvToSales" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAssetReportsRequest), global::Tinkoff.InvestApi.V1.GetAssetReportsRequest.Parser, new[]{ "InstrumentId", "From", "To" }, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAssetReportsResponse), global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Parser, new[]{ "Events" }, null, new[]{ typeof(global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.GetAssetReportsEvent), global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.GetAssetReportsEvent.Parser, new[]{ "InstrumentId", "ReportDate", "PeriodYear", "PeriodNum", "PeriodType", "CreatedAt" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest), global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest.Parser, new[]{ "Paging" }, new[]{ "Paging" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse), global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Parser, new[]{ "Items", "Page" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Types.ConsensusForecastsItem), global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Types.ConsensusForecastsItem.Parser, new[]{ "Uid", "AssetUid", "CreatedAt", "BestTargetPrice", "BestTargetLow", "BestTargetHigh", "TotalBuyRecommend", "TotalHoldRecommend", "TotalSellRecommend", "Currency", "Consensus", "PrognosisDate" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetForecastRequest), global::Tinkoff.InvestApi.V1.GetForecastRequest.Parser, new[]{ "InstrumentId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetForecastResponse), global::Tinkoff.InvestApi.V1.GetForecastResponse.Parser, new[]{ "Targets", "Consensus" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.TargetItem), global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.TargetItem.Parser, new[]{ "Uid", "Ticker", "Company", "Recommendation", "RecommendationDate", "Currency", "CurrentPrice", "TargetPrice", "PriceChange", "PriceChangeRel", "ShowName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.ConsensusItem), global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.ConsensusItem.Parser, new[]{ "Uid", "Ticker", "Recommendation", "Currency", "CurrentPrice", "Consensus", "MinTarget", "MaxTarget", "PriceChange", "PriceChangeRel" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingInterval), global::Tinkoff.InvestApi.V1.TradingInterval.Parser, new[]{ "Type", "Interval" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingInterval.Types.TimeInterval), global::Tinkoff.InvestApi.V1.TradingInterval.Types.TimeInterval.Parser, new[]{ "StartTs", "EndTs" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///Тип купонов.
  /// </summary>
  public enum CouponType {
    /// <summary>
    ///Неопределенное значение
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Постоянный
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_CONSTANT")] Constant = 1,
    /// <summary>
    ///Плавающий
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_FLOATING")] Floating = 2,
    /// <summary>
    ///Дисконт
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_DISCOUNT")] Discount = 3,
    /// <summary>
    ///Ипотечный
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_MORTGAGE")] Mortgage = 4,
    /// <summary>
    ///Фиксированный
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_FIX")] Fix = 5,
    /// <summary>
    ///Переменный
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_VARIABLE")] Variable = 6,
    /// <summary>
    ///Прочее
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_OTHER")] Other = 7,
  }

  /// <summary>
  ///Тип опциона по направлению сделки.
  /// </summary>
  public enum OptionDirection {
    /// <summary>
    ///Тип не определен.
    /// </summary>
    [pbr::OriginalName("OPTION_DIRECTION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Опцион на продажу.
    /// </summary>
    [pbr::OriginalName("OPTION_DIRECTION_PUT")] Put = 1,
    /// <summary>
    ///Опцион на покупку.
    /// </summary>
    [pbr::OriginalName("OPTION_DIRECTION_CALL")] Call = 2,
  }

  /// <summary>
  ///Тип расчетов по опциону.
  /// </summary>
  public enum OptionPaymentType {
    /// <summary>
    ///Тип не определен.
    /// </summary>
    [pbr::OriginalName("OPTION_PAYMENT_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Опционы с использованием премии в расчетах.
    /// </summary>
    [pbr::OriginalName("OPTION_PAYMENT_TYPE_PREMIUM")] Premium = 1,
    /// <summary>
    ///Маржируемые опционы.
    /// </summary>
    [pbr::OriginalName("OPTION_PAYMENT_TYPE_MARGINAL")] Marginal = 2,
  }

  /// <summary>
  ///Тип опциона по стилю.
  /// </summary>
  public enum OptionStyle {
    /// <summary>
    ///Тип не определен.
    /// </summary>
    [pbr::OriginalName("OPTION_STYLE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Американский опцион.
    /// </summary>
    [pbr::OriginalName("OPTION_STYLE_AMERICAN")] American = 1,
    /// <summary>
    ///Европейский опцион.
    /// </summary>
    [pbr::OriginalName("OPTION_STYLE_EUROPEAN")] European = 2,
  }

  /// <summary>
  ///Тип опциона по способу исполнения.
  /// </summary>
  public enum OptionSettlementType {
    /// <summary>
    ///Тип не определен.
    /// </summary>
    [pbr::OriginalName("OPTION_EXECUTION_TYPE_UNSPECIFIED")] OptionExecutionTypeUnspecified = 0,
    /// <summary>
    /// Поставочный тип опциона.
    /// </summary>
    [pbr::OriginalName("OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY")] OptionExecutionTypePhysicalDelivery = 1,
    /// <summary>
    ///Расчетный тип опциона.
    /// </summary>
    [pbr::OriginalName("OPTION_EXECUTION_TYPE_CASH_SETTLEMENT")] OptionExecutionTypeCashSettlement = 2,
  }

  /// <summary>
  ///Тип идентификатора инструмента. Подробнее об идентификации инструментов: [Идентификация инструментов](https://russianinvestments.github.io/investAPI/faq_identification/)
  /// </summary>
  public enum InstrumentIdType {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_UNSPECIFIED")] InstrumentIdUnspecified = 0,
    /// <summary>
    ///Figi.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_FIGI")] Figi = 1,
    /// <summary>
    ///Ticker.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_TICKER")] Ticker = 2,
    /// <summary>
    ///Уникальный идентификатор.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_UID")] Uid = 3,
    /// <summary>
    ///Идентификатор позиции.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_POSITION_UID")] PositionUid = 4,
  }

  /// <summary>
  ///Статус запрашиваемых инструментов.
  /// </summary>
  public enum InstrumentStatus {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Базовый список инструментов (по умолчанию). Инструменты доступные для торговли через TINKOFF INVEST API. Cейчас списки бумаг, доступных из api и других интерфейсах совпадают (за исключением внебиржевых бумаг), но в будущем возможны ситуации, когда списки инструментов будут отличаться
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_BASE")] Base = 1,
    /// <summary>
    ///Список всех инструментов.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_ALL")] All = 2,
  }

  /// <summary>
  ///Тип акций.
  /// </summary>
  public enum ShareType {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Обыкновенная
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_COMMON")] Common = 1,
    /// <summary>
    ///Привилегированная
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_PREFERRED")] Preferred = 2,
    /// <summary>
    ///Американские депозитарные расписки
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_ADR")] Adr = 3,
    /// <summary>
    ///Глобальные депозитарные расписки
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_GDR")] Gdr = 4,
    /// <summary>
    ///Товарищество с ограниченной ответственностью
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_MLP")] Mlp = 5,
    /// <summary>
    ///Акции из реестра Нью-Йорка
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_NY_REG_SHRS")] NyRegShrs = 6,
    /// <summary>
    ///Закрытый инвестиционный фонд
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_CLOSED_END_FUND")] ClosedEndFund = 7,
    /// <summary>
    ///Траст недвижимости
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_REIT")] Reit = 8,
  }

  /// <summary>
  ///Тип актива.
  /// </summary>
  public enum AssetType {
    /// <summary>
    ///Тип не определён.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Валюта.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_CURRENCY")] Currency = 1,
    /// <summary>
    ///Товар.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_COMMODITY")] Commodity = 2,
    /// <summary>
    ///Индекс.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_INDEX")] Index = 3,
    /// <summary>
    ///Ценная бумага.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_SECURITY")] Security = 4,
  }

  /// <summary>
  ///Тип структурной ноты.
  /// </summary>
  public enum StructuredProductType {
    /// <summary>
    ///Тип не определён.
    /// </summary>
    [pbr::OriginalName("SP_TYPE_UNSPECIFIED")] SpTypeUnspecified = 0,
    /// <summary>
    ///Поставочный.
    /// </summary>
    [pbr::OriginalName("SP_TYPE_DELIVERABLE")] SpTypeDeliverable = 1,
    /// <summary>
    ///Беспоставочный.
    /// </summary>
    [pbr::OriginalName("SP_TYPE_NON_DELIVERABLE")] SpTypeNonDeliverable = 2,
  }

  /// <summary>
  ///Тип действия со списком избранных инструментов.
  /// </summary>
  public enum EditFavoritesActionType {
    /// <summary>
    ///Тип не определён.
    /// </summary>
    [pbr::OriginalName("EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Добавить в список.
    /// </summary>
    [pbr::OriginalName("EDIT_FAVORITES_ACTION_TYPE_ADD")] Add = 1,
    /// <summary>
    ///Удалить из списка.
    /// </summary>
    [pbr::OriginalName("EDIT_FAVORITES_ACTION_TYPE_DEL")] Del = 2,
  }

  /// <summary>
  ///Реальная площадка исполнения расчётов.
  /// </summary>
  public enum RealExchange {
    /// <summary>
    ///Тип не определён.
    /// </summary>
    [pbr::OriginalName("REAL_EXCHANGE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Московская биржа.
    /// </summary>
    [pbr::OriginalName("REAL_EXCHANGE_MOEX")] Moex = 1,
    /// <summary>
    ///Санкт-Петербургская биржа.
    /// </summary>
    [pbr::OriginalName("REAL_EXCHANGE_RTS")] Rts = 2,
    /// <summary>
    ///Внебиржевой инструмент.
    /// </summary>
    [pbr::OriginalName("REAL_EXCHANGE_OTC")] Otc = 3,
  }

  public enum Recommendation {
    /// <summary>
    /// Не определено
    /// </summary>
    [pbr::OriginalName("RECOMMENDATION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Покупать
    /// </summary>
    [pbr::OriginalName("RECOMMENDATION_BUY")] Buy = 1,
    /// <summary>
    /// Держать
    /// </summary>
    [pbr::OriginalName("RECOMMENDATION_HOLD")] Hold = 2,
    /// <summary>
    /// Продавать
    /// </summary>
    [pbr::OriginalName("RECOMMENDATION_SELL")] Sell = 3,
  }

  /// <summary>
  ///Уровень риска облигации.
  /// </summary>
  public enum RiskLevel {
    /// <summary>
    ///не указан
    /// </summary>
    [pbr::OriginalName("RISK_LEVEL_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Низкий уровень риска
    /// </summary>
    [pbr::OriginalName("RISK_LEVEL_LOW")] Low = 1,
    /// <summary>
    ///Средний уровень риска
    /// </summary>
    [pbr::OriginalName("RISK_LEVEL_MODERATE")] Moderate = 2,
    /// <summary>
    ///Высокий уровень риска
    /// </summary>
    [pbr::OriginalName("RISK_LEVEL_HIGH")] High = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///Запрос расписания торгов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingSchedulesRequest : pb::IMessage<TradingSchedulesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedulesRequest> _parser = new pb::MessageParser<TradingSchedulesRequest>(() => new TradingSchedulesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedulesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest(TradingSchedulesRequest other) : this() {
      exchange_ = other.exchange_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest Clone() {
      return new TradingSchedulesRequest(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private readonly static string ExchangeDefaultValue = "";

    private string exchange_;
    /// <summary>
    ///Наименование биржи или расчетного календаря. &lt;/br>Если не передаётся, возвращается информация по всем доступным торговым площадкам.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_ ?? ExchangeDefaultValue; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "exchange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchange {
      get { return exchange_ != null; }
    }
    /// <summary>Clears the value of the "exchange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExchange() {
      exchange_ = null;
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало периода по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание периода по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedulesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedulesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExchange) hash ^= Exchange.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExchange) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExchange) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasExchange) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedulesRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasExchange) {
        Exchange = other.Exchange;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список торговых площадок.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingSchedulesResponse : pb::IMessage<TradingSchedulesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedulesResponse> _parser = new pb::MessageParser<TradingSchedulesResponse>(() => new TradingSchedulesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedulesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse(TradingSchedulesResponse other) : this() {
      exchanges_ = other.exchanges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse Clone() {
      return new TradingSchedulesResponse(this);
    }

    /// <summary>Field number for the "exchanges" field.</summary>
    public const int ExchangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.TradingSchedule> _repeated_exchanges_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.TradingSchedule.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingSchedule> exchanges_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingSchedule>();
    /// <summary>
    /// Список торговых площадок и режимов торгов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingSchedule> Exchanges {
      get { return exchanges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedulesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedulesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exchanges_.Equals(other.exchanges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= exchanges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      exchanges_.WriteTo(output, _repeated_exchanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      exchanges_.WriteTo(ref output, _repeated_exchanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += exchanges_.CalculateSize(_repeated_exchanges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedulesResponse other) {
      if (other == null) {
        return;
      }
      exchanges_.Add(other.exchanges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            exchanges_.AddEntriesFrom(input, _repeated_exchanges_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            exchanges_.AddEntriesFrom(ref input, _repeated_exchanges_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по торговой площадке.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingSchedule : pb::IMessage<TradingSchedule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedule> _parser = new pb::MessageParser<TradingSchedule>(() => new TradingSchedule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule(TradingSchedule other) : this() {
      exchange_ = other.exchange_;
      days_ = other.days_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule Clone() {
      return new TradingSchedule(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private string exchange_ = "";
    /// <summary>
    /// Наименование торговой площадки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.TradingDay> _repeated_days_codec
        = pb::FieldCodec.ForMessage(18, global::Tinkoff.InvestApi.V1.TradingDay.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingDay> days_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingDay>();
    /// <summary>
    /// Массив с торговыми и неторговыми днями.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingDay> Days {
      get { return days_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if(!days_.Equals(other.days_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      hash ^= days_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      days_.WriteTo(output, _repeated_days_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      days_.WriteTo(ref output, _repeated_days_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      size += days_.CalculateSize(_repeated_days_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedule other) {
      if (other == null) {
        return;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      days_.Add(other.days_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            days_.AddEntriesFrom(input, _repeated_days_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            days_.AddEntriesFrom(ref input, _repeated_days_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация о времени торгов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingDay : pb::IMessage<TradingDay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingDay> _parser = new pb::MessageParser<TradingDay>(() => new TradingDay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingDay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay(TradingDay other) : this() {
      date_ = other.date_ != null ? other.date_.Clone() : null;
      isTradingDay_ = other.isTradingDay_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      openingAuctionStartTime_ = other.openingAuctionStartTime_ != null ? other.openingAuctionStartTime_.Clone() : null;
      closingAuctionEndTime_ = other.closingAuctionEndTime_ != null ? other.closingAuctionEndTime_.Clone() : null;
      eveningOpeningAuctionStartTime_ = other.eveningOpeningAuctionStartTime_ != null ? other.eveningOpeningAuctionStartTime_.Clone() : null;
      eveningStartTime_ = other.eveningStartTime_ != null ? other.eveningStartTime_.Clone() : null;
      eveningEndTime_ = other.eveningEndTime_ != null ? other.eveningEndTime_.Clone() : null;
      clearingStartTime_ = other.clearingStartTime_ != null ? other.clearingStartTime_.Clone() : null;
      clearingEndTime_ = other.clearingEndTime_ != null ? other.clearingEndTime_.Clone() : null;
      premarketStartTime_ = other.premarketStartTime_ != null ? other.premarketStartTime_.Clone() : null;
      premarketEndTime_ = other.premarketEndTime_ != null ? other.premarketEndTime_.Clone() : null;
      closingAuctionStartTime_ = other.closingAuctionStartTime_ != null ? other.closingAuctionStartTime_.Clone() : null;
      openingAuctionEndTime_ = other.openingAuctionEndTime_ != null ? other.openingAuctionEndTime_.Clone() : null;
      intervals_ = other.intervals_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay Clone() {
      return new TradingDay(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    /// <summary>
    /// Дата.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "is_trading_day" field.</summary>
    public const int IsTradingDayFieldNumber = 2;
    private bool isTradingDay_;
    /// <summary>
    /// Признак торгового дня на бирже.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTradingDay {
      get { return isTradingDay_; }
      set {
        isTradingDay_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Время начала торгов по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// Время окончания торгов по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "opening_auction_start_time" field.</summary>
    public const int OpeningAuctionStartTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp openingAuctionStartTime_;
    /// <summary>
    /// Время начала аукциона открытия в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OpeningAuctionStartTime {
      get { return openingAuctionStartTime_; }
      set {
        openingAuctionStartTime_ = value;
      }
    }

    /// <summary>Field number for the "closing_auction_end_time" field.</summary>
    public const int ClosingAuctionEndTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp closingAuctionEndTime_;
    /// <summary>
    /// Время окончания аукциона закрытия в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClosingAuctionEndTime {
      get { return closingAuctionEndTime_; }
      set {
        closingAuctionEndTime_ = value;
      }
    }

    /// <summary>Field number for the "evening_opening_auction_start_time" field.</summary>
    public const int EveningOpeningAuctionStartTimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eveningOpeningAuctionStartTime_;
    /// <summary>
    /// Время начала аукциона открытия вечерней сессии в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EveningOpeningAuctionStartTime {
      get { return eveningOpeningAuctionStartTime_; }
      set {
        eveningOpeningAuctionStartTime_ = value;
      }
    }

    /// <summary>Field number for the "evening_start_time" field.</summary>
    public const int EveningStartTimeFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eveningStartTime_;
    /// <summary>
    /// Время начала вечерней сессии в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EveningStartTime {
      get { return eveningStartTime_; }
      set {
        eveningStartTime_ = value;
      }
    }

    /// <summary>Field number for the "evening_end_time" field.</summary>
    public const int EveningEndTimeFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eveningEndTime_;
    /// <summary>
    /// Время окончания вечерней сессии в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EveningEndTime {
      get { return eveningEndTime_; }
      set {
        eveningEndTime_ = value;
      }
    }

    /// <summary>Field number for the "clearing_start_time" field.</summary>
    public const int ClearingStartTimeFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp clearingStartTime_;
    /// <summary>
    /// Время начала основного клиринга в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClearingStartTime {
      get { return clearingStartTime_; }
      set {
        clearingStartTime_ = value;
      }
    }

    /// <summary>Field number for the "clearing_end_time" field.</summary>
    public const int ClearingEndTimeFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp clearingEndTime_;
    /// <summary>
    /// Время окончания основного клиринга в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClearingEndTime {
      get { return clearingEndTime_; }
      set {
        clearingEndTime_ = value;
      }
    }

    /// <summary>Field number for the "premarket_start_time" field.</summary>
    public const int PremarketStartTimeFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp premarketStartTime_;
    /// <summary>
    /// Время начала премаркета в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PremarketStartTime {
      get { return premarketStartTime_; }
      set {
        premarketStartTime_ = value;
      }
    }

    /// <summary>Field number for the "premarket_end_time" field.</summary>
    public const int PremarketEndTimeFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp premarketEndTime_;
    /// <summary>
    /// Время окончания премаркета в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PremarketEndTime {
      get { return premarketEndTime_; }
      set {
        premarketEndTime_ = value;
      }
    }

    /// <summary>Field number for the "closing_auction_start_time" field.</summary>
    public const int ClosingAuctionStartTimeFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp closingAuctionStartTime_;
    /// <summary>
    /// Время начала аукциона закрытия в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClosingAuctionStartTime {
      get { return closingAuctionStartTime_; }
      set {
        closingAuctionStartTime_ = value;
      }
    }

    /// <summary>Field number for the "opening_auction_end_time" field.</summary>
    public const int OpeningAuctionEndTimeFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Timestamp openingAuctionEndTime_;
    /// <summary>
    /// Время окончания аукциона открытия в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OpeningAuctionEndTime {
      get { return openingAuctionEndTime_; }
      set {
        openingAuctionEndTime_ = value;
      }
    }

    /// <summary>Field number for the "intervals" field.</summary>
    public const int IntervalsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.TradingInterval> _repeated_intervals_codec
        = pb::FieldCodec.ForMessage(146, global::Tinkoff.InvestApi.V1.TradingInterval.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingInterval> intervals_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingInterval>();
    /// <summary>
    /// Торговые интервалы
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingInterval> Intervals {
      get { return intervals_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingDay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingDay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Date, other.Date)) return false;
      if (IsTradingDay != other.IsTradingDay) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!object.Equals(OpeningAuctionStartTime, other.OpeningAuctionStartTime)) return false;
      if (!object.Equals(ClosingAuctionEndTime, other.ClosingAuctionEndTime)) return false;
      if (!object.Equals(EveningOpeningAuctionStartTime, other.EveningOpeningAuctionStartTime)) return false;
      if (!object.Equals(EveningStartTime, other.EveningStartTime)) return false;
      if (!object.Equals(EveningEndTime, other.EveningEndTime)) return false;
      if (!object.Equals(ClearingStartTime, other.ClearingStartTime)) return false;
      if (!object.Equals(ClearingEndTime, other.ClearingEndTime)) return false;
      if (!object.Equals(PremarketStartTime, other.PremarketStartTime)) return false;
      if (!object.Equals(PremarketEndTime, other.PremarketEndTime)) return false;
      if (!object.Equals(ClosingAuctionStartTime, other.ClosingAuctionStartTime)) return false;
      if (!object.Equals(OpeningAuctionEndTime, other.OpeningAuctionEndTime)) return false;
      if(!intervals_.Equals(other.intervals_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (date_ != null) hash ^= Date.GetHashCode();
      if (IsTradingDay != false) hash ^= IsTradingDay.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (openingAuctionStartTime_ != null) hash ^= OpeningAuctionStartTime.GetHashCode();
      if (closingAuctionEndTime_ != null) hash ^= ClosingAuctionEndTime.GetHashCode();
      if (eveningOpeningAuctionStartTime_ != null) hash ^= EveningOpeningAuctionStartTime.GetHashCode();
      if (eveningStartTime_ != null) hash ^= EveningStartTime.GetHashCode();
      if (eveningEndTime_ != null) hash ^= EveningEndTime.GetHashCode();
      if (clearingStartTime_ != null) hash ^= ClearingStartTime.GetHashCode();
      if (clearingEndTime_ != null) hash ^= ClearingEndTime.GetHashCode();
      if (premarketStartTime_ != null) hash ^= PremarketStartTime.GetHashCode();
      if (premarketEndTime_ != null) hash ^= PremarketEndTime.GetHashCode();
      if (closingAuctionStartTime_ != null) hash ^= ClosingAuctionStartTime.GetHashCode();
      if (openingAuctionEndTime_ != null) hash ^= OpeningAuctionEndTime.GetHashCode();
      hash ^= intervals_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (IsTradingDay != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTradingDay);
      }
      if (startTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndTime);
      }
      if (openingAuctionStartTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OpeningAuctionStartTime);
      }
      if (closingAuctionEndTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosingAuctionEndTime);
      }
      if (eveningOpeningAuctionStartTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EveningOpeningAuctionStartTime);
      }
      if (eveningStartTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EveningStartTime);
      }
      if (eveningEndTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EveningEndTime);
      }
      if (clearingStartTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ClearingStartTime);
      }
      if (clearingEndTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ClearingEndTime);
      }
      if (premarketStartTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PremarketStartTime);
      }
      if (premarketEndTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PremarketEndTime);
      }
      if (closingAuctionStartTime_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ClosingAuctionStartTime);
      }
      if (openingAuctionEndTime_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(OpeningAuctionEndTime);
      }
      intervals_.WriteTo(output, _repeated_intervals_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (IsTradingDay != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTradingDay);
      }
      if (startTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndTime);
      }
      if (openingAuctionStartTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OpeningAuctionStartTime);
      }
      if (closingAuctionEndTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosingAuctionEndTime);
      }
      if (eveningOpeningAuctionStartTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EveningOpeningAuctionStartTime);
      }
      if (eveningStartTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EveningStartTime);
      }
      if (eveningEndTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EveningEndTime);
      }
      if (clearingStartTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ClearingStartTime);
      }
      if (clearingEndTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ClearingEndTime);
      }
      if (premarketStartTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PremarketStartTime);
      }
      if (premarketEndTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PremarketEndTime);
      }
      if (closingAuctionStartTime_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ClosingAuctionStartTime);
      }
      if (openingAuctionEndTime_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(OpeningAuctionEndTime);
      }
      intervals_.WriteTo(ref output, _repeated_intervals_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (IsTradingDay != false) {
        size += 1 + 1;
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (openingAuctionStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpeningAuctionStartTime);
      }
      if (closingAuctionEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosingAuctionEndTime);
      }
      if (eveningOpeningAuctionStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EveningOpeningAuctionStartTime);
      }
      if (eveningStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EveningStartTime);
      }
      if (eveningEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EveningEndTime);
      }
      if (clearingStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClearingStartTime);
      }
      if (clearingEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClearingEndTime);
      }
      if (premarketStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PremarketStartTime);
      }
      if (premarketEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PremarketEndTime);
      }
      if (closingAuctionStartTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClosingAuctionStartTime);
      }
      if (openingAuctionEndTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpeningAuctionEndTime);
      }
      size += intervals_.CalculateSize(_repeated_intervals_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingDay other) {
      if (other == null) {
        return;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.IsTradingDay != false) {
        IsTradingDay = other.IsTradingDay;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.openingAuctionStartTime_ != null) {
        if (openingAuctionStartTime_ == null) {
          OpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OpeningAuctionStartTime.MergeFrom(other.OpeningAuctionStartTime);
      }
      if (other.closingAuctionEndTime_ != null) {
        if (closingAuctionEndTime_ == null) {
          ClosingAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClosingAuctionEndTime.MergeFrom(other.ClosingAuctionEndTime);
      }
      if (other.eveningOpeningAuctionStartTime_ != null) {
        if (eveningOpeningAuctionStartTime_ == null) {
          EveningOpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EveningOpeningAuctionStartTime.MergeFrom(other.EveningOpeningAuctionStartTime);
      }
      if (other.eveningStartTime_ != null) {
        if (eveningStartTime_ == null) {
          EveningStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EveningStartTime.MergeFrom(other.EveningStartTime);
      }
      if (other.eveningEndTime_ != null) {
        if (eveningEndTime_ == null) {
          EveningEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EveningEndTime.MergeFrom(other.EveningEndTime);
      }
      if (other.clearingStartTime_ != null) {
        if (clearingStartTime_ == null) {
          ClearingStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClearingStartTime.MergeFrom(other.ClearingStartTime);
      }
      if (other.clearingEndTime_ != null) {
        if (clearingEndTime_ == null) {
          ClearingEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClearingEndTime.MergeFrom(other.ClearingEndTime);
      }
      if (other.premarketStartTime_ != null) {
        if (premarketStartTime_ == null) {
          PremarketStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PremarketStartTime.MergeFrom(other.PremarketStartTime);
      }
      if (other.premarketEndTime_ != null) {
        if (premarketEndTime_ == null) {
          PremarketEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PremarketEndTime.MergeFrom(other.PremarketEndTime);
      }
      if (other.closingAuctionStartTime_ != null) {
        if (closingAuctionStartTime_ == null) {
          ClosingAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClosingAuctionStartTime.MergeFrom(other.ClosingAuctionStartTime);
      }
      if (other.openingAuctionEndTime_ != null) {
        if (openingAuctionEndTime_ == null) {
          OpeningAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OpeningAuctionEndTime.MergeFrom(other.OpeningAuctionEndTime);
      }
      intervals_.Add(other.intervals_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 16: {
            IsTradingDay = input.ReadBool();
            break;
          }
          case 26: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 34: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 58: {
            if (openingAuctionStartTime_ == null) {
              OpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OpeningAuctionStartTime);
            break;
          }
          case 66: {
            if (closingAuctionEndTime_ == null) {
              ClosingAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClosingAuctionEndTime);
            break;
          }
          case 74: {
            if (eveningOpeningAuctionStartTime_ == null) {
              EveningOpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningOpeningAuctionStartTime);
            break;
          }
          case 82: {
            if (eveningStartTime_ == null) {
              EveningStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningStartTime);
            break;
          }
          case 90: {
            if (eveningEndTime_ == null) {
              EveningEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningEndTime);
            break;
          }
          case 98: {
            if (clearingStartTime_ == null) {
              ClearingStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClearingStartTime);
            break;
          }
          case 106: {
            if (clearingEndTime_ == null) {
              ClearingEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClearingEndTime);
            break;
          }
          case 114: {
            if (premarketStartTime_ == null) {
              PremarketStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PremarketStartTime);
            break;
          }
          case 122: {
            if (premarketEndTime_ == null) {
              PremarketEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PremarketEndTime);
            break;
          }
          case 130: {
            if (closingAuctionStartTime_ == null) {
              ClosingAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClosingAuctionStartTime);
            break;
          }
          case 138: {
            if (openingAuctionEndTime_ == null) {
              OpeningAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OpeningAuctionEndTime);
            break;
          }
          case 146: {
            intervals_.AddEntriesFrom(input, _repeated_intervals_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 16: {
            IsTradingDay = input.ReadBool();
            break;
          }
          case 26: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 34: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 58: {
            if (openingAuctionStartTime_ == null) {
              OpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OpeningAuctionStartTime);
            break;
          }
          case 66: {
            if (closingAuctionEndTime_ == null) {
              ClosingAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClosingAuctionEndTime);
            break;
          }
          case 74: {
            if (eveningOpeningAuctionStartTime_ == null) {
              EveningOpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningOpeningAuctionStartTime);
            break;
          }
          case 82: {
            if (eveningStartTime_ == null) {
              EveningStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningStartTime);
            break;
          }
          case 90: {
            if (eveningEndTime_ == null) {
              EveningEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningEndTime);
            break;
          }
          case 98: {
            if (clearingStartTime_ == null) {
              ClearingStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClearingStartTime);
            break;
          }
          case 106: {
            if (clearingEndTime_ == null) {
              ClearingEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClearingEndTime);
            break;
          }
          case 114: {
            if (premarketStartTime_ == null) {
              PremarketStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PremarketStartTime);
            break;
          }
          case 122: {
            if (premarketEndTime_ == null) {
              PremarketEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PremarketEndTime);
            break;
          }
          case 130: {
            if (closingAuctionStartTime_ == null) {
              ClosingAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClosingAuctionStartTime);
            break;
          }
          case 138: {
            if (openingAuctionEndTime_ == null) {
              OpeningAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OpeningAuctionEndTime);
            break;
          }
          case 146: {
            intervals_.AddEntriesFrom(ref input, _repeated_intervals_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос получения инструмента по идентификатору.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentRequest : pb::IMessage<InstrumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentRequest> _parser = new pb::MessageParser<InstrumentRequest>(() => new InstrumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest(InstrumentRequest other) : this() {
      idType_ = other.idType_;
      classCode_ = other.classCode_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest Clone() {
      return new InstrumentRequest(this);
    }

    /// <summary>Field number for the "id_type" field.</summary>
    public const int IdTypeFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.InstrumentIdType idType_ = global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified;
    /// <summary>
    /// Тип идентификатора инструмента. Возможные значения: figi, ticker. Подробнее об идентификации инструментов: [Идентификация инструментов](https://russianinvestments.github.io/investAPI/faq_identification/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentIdType IdType {
      get { return idType_; }
      set {
        idType_ = value;
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 2;
    private readonly static string ClassCodeDefaultValue = "";

    private string classCode_;
    /// <summary>
    /// Идентификатор class_code. Обязателен при id_type = ticker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_ ?? ClassCodeDefaultValue; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "class_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClassCode {
      get { return classCode_ != null; }
    }
    /// <summary>Clears the value of the "class_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClassCode() {
      classCode_ = null;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// Идентификатор запрашиваемого инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdType != other.IdType) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) hash ^= IdType.GetHashCode();
      if (HasClassCode) hash ^= ClassCode.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IdType);
      }
      if (HasClassCode) {
        output.WriteRawTag(18);
        output.WriteString(ClassCode);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IdType);
      }
      if (HasClassCode) {
        output.WriteRawTag(18);
        output.WriteString(ClassCode);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdType);
      }
      if (HasClassCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        IdType = other.IdType;
      }
      if (other.HasClassCode) {
        ClassCode = other.ClassCode;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdType = (global::Tinkoff.InvestApi.V1.InstrumentIdType) input.ReadEnum();
            break;
          }
          case 18: {
            ClassCode = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IdType = (global::Tinkoff.InvestApi.V1.InstrumentIdType) input.ReadEnum();
            break;
          }
          case 18: {
            ClassCode = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос получения инструментов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentsRequest : pb::IMessage<InstrumentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentsRequest> _parser = new pb::MessageParser<InstrumentsRequest>(() => new InstrumentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest(InstrumentsRequest other) : this() {
      _hasBits0 = other._hasBits0;
      instrumentStatus_ = other.instrumentStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest Clone() {
      return new InstrumentsRequest(this);
    }

    /// <summary>Field number for the "instrument_status" field.</summary>
    public const int InstrumentStatusFieldNumber = 1;
    private readonly static global::Tinkoff.InvestApi.V1.InstrumentStatus InstrumentStatusDefaultValue = global::Tinkoff.InvestApi.V1.InstrumentStatus.Unspecified;

    private global::Tinkoff.InvestApi.V1.InstrumentStatus instrumentStatus_;
    /// <summary>
    ///Статус запрашиваемых инструментов. Возможные значения: [InstrumentStatus](#instrumentstatus)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentStatus InstrumentStatus {
      get { if ((_hasBits0 & 1) != 0) { return instrumentStatus_; } else { return InstrumentStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        instrumentStatus_ = value;
      }
    }
    /// <summary>Gets whether the "instrument_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "instrument_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentStatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentStatus != other.InstrumentStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInstrumentStatus) hash ^= InstrumentStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInstrumentStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInstrumentStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasInstrumentStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasInstrumentStatus) {
        InstrumentStatus = other.InstrumentStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstrumentStatus = (global::Tinkoff.InvestApi.V1.InstrumentStatus) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InstrumentStatus = (global::Tinkoff.InvestApi.V1.InstrumentStatus) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Параметры фильтрации опционов
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FilterOptionsRequest : pb::IMessage<FilterOptionsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FilterOptionsRequest> _parser = new pb::MessageParser<FilterOptionsRequest>(() => new FilterOptionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FilterOptionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterOptionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterOptionsRequest(FilterOptionsRequest other) : this() {
      basicAssetUid_ = other.basicAssetUid_;
      basicAssetPositionUid_ = other.basicAssetPositionUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterOptionsRequest Clone() {
      return new FilterOptionsRequest(this);
    }

    /// <summary>Field number for the "basic_asset_uid" field.</summary>
    public const int BasicAssetUidFieldNumber = 1;
    private readonly static string BasicAssetUidDefaultValue = "";

    private string basicAssetUid_;
    /// <summary>
    ///Идентификатор базового актива опциона.  Обязательный параметр.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAssetUid {
      get { return basicAssetUid_ ?? BasicAssetUidDefaultValue; }
      set {
        basicAssetUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "basic_asset_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBasicAssetUid {
      get { return basicAssetUid_ != null; }
    }
    /// <summary>Clears the value of the "basic_asset_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBasicAssetUid() {
      basicAssetUid_ = null;
    }

    /// <summary>Field number for the "basic_asset_position_uid" field.</summary>
    public const int BasicAssetPositionUidFieldNumber = 2;
    private readonly static string BasicAssetPositionUidDefaultValue = "";

    private string basicAssetPositionUid_;
    /// <summary>
    ///Идентификатор позиции базового актива опциона
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAssetPositionUid {
      get { return basicAssetPositionUid_ ?? BasicAssetPositionUidDefaultValue; }
      set {
        basicAssetPositionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "basic_asset_position_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBasicAssetPositionUid {
      get { return basicAssetPositionUid_ != null; }
    }
    /// <summary>Clears the value of the "basic_asset_position_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBasicAssetPositionUid() {
      basicAssetPositionUid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FilterOptionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FilterOptionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BasicAssetUid != other.BasicAssetUid) return false;
      if (BasicAssetPositionUid != other.BasicAssetPositionUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBasicAssetUid) hash ^= BasicAssetUid.GetHashCode();
      if (HasBasicAssetPositionUid) hash ^= BasicAssetPositionUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBasicAssetUid) {
        output.WriteRawTag(10);
        output.WriteString(BasicAssetUid);
      }
      if (HasBasicAssetPositionUid) {
        output.WriteRawTag(18);
        output.WriteString(BasicAssetPositionUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBasicAssetUid) {
        output.WriteRawTag(10);
        output.WriteString(BasicAssetUid);
      }
      if (HasBasicAssetPositionUid) {
        output.WriteRawTag(18);
        output.WriteString(BasicAssetPositionUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBasicAssetUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicAssetUid);
      }
      if (HasBasicAssetPositionUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicAssetPositionUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FilterOptionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasBasicAssetUid) {
        BasicAssetUid = other.BasicAssetUid;
      }
      if (other.HasBasicAssetPositionUid) {
        BasicAssetPositionUid = other.BasicAssetPositionUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BasicAssetUid = input.ReadString();
            break;
          }
          case 18: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BasicAssetUid = input.ReadString();
            break;
          }
          case 18: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация об облигации.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BondResponse : pb::IMessage<BondResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BondResponse> _parser = new pb::MessageParser<BondResponse>(() => new BondResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BondResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse(BondResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse Clone() {
      return new BondResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Bond instrument_;
    /// <summary>
    /// Информация об облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Bond Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BondResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BondResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BondResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Bond();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Bond();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Bond();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список облигаций.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BondsResponse : pb::IMessage<BondsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BondsResponse> _parser = new pb::MessageParser<BondsResponse>(() => new BondsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BondsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse(BondsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse Clone() {
      return new BondsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Bond> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Bond.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Bond> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Bond>();
    /// <summary>
    ///Массив облигаций.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Bond> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BondsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BondsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BondsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос купонов по облигации.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetBondCouponsRequest : pb::IMessage<GetBondCouponsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBondCouponsRequest> _parser = new pb::MessageParser<GetBondCouponsRequest>(() => new GetBondCouponsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBondCouponsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsRequest(GetBondCouponsRequest other) : this() {
      figi_ = other.figi_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      instrumentId_ = other.instrumentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsRequest Clone() {
      return new GetBondCouponsRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC. Фильтрация по coupon_date (дата выплаты купона)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC. Фильтрация по coupon_date (дата выплаты купона)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 4;
    private string instrumentId_ = "";
    /// <summary>
    ///Идентификатор инструмента Figi или instrument_uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBondCouponsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBondCouponsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (InstrumentId != other.InstrumentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBondCouponsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Купоны по облигации.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetBondCouponsResponse : pb::IMessage<GetBondCouponsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBondCouponsResponse> _parser = new pb::MessageParser<GetBondCouponsResponse>(() => new GetBondCouponsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBondCouponsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsResponse(GetBondCouponsResponse other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsResponse Clone() {
      return new GetBondCouponsResponse(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Coupon> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Coupon.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Coupon> events_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Coupon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Coupon> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBondCouponsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBondCouponsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      events_.WriteTo(ref output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBondCouponsResponse other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            events_.AddEntriesFrom(ref input, _repeated_events_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///События по облигации.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetBondEventsRequest : pb::IMessage<GetBondEventsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBondEventsRequest> _parser = new pb::MessageParser<GetBondEventsRequest>(() => new GetBondEventsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBondEventsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondEventsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondEventsRequest(GetBondEventsRequest other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      instrumentId_ = other.instrumentId_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondEventsRequest Clone() {
      return new GetBondEventsRequest(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 4;
    private string instrumentId_ = "";
    /// <summary>
    ///Идентификатор инструмента Figi или instrument_uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType type_ = global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified;
    /// <summary>
    ///Тип события
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBondEventsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBondEventsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (InstrumentId != other.InstrumentId) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (Type != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (Type != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (Type != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (Type != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBondEventsRequest other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.Type != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
          case 40: {
            Type = (global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
          case 40: {
            Type = (global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GetBondEventsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum EventType {
        /// <summary>
        ///Неопределенное значение
        /// </summary>
        [pbr::OriginalName("EVENT_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Купон
        /// </summary>
        [pbr::OriginalName("EVENT_TYPE_CPN")] Cpn = 1,
        /// <summary>
        /// Опцион (оферта)
        /// </summary>
        [pbr::OriginalName("EVENT_TYPE_CALL")] Call = 2,
        /// <summary>
        /// Погашение
        /// </summary>
        [pbr::OriginalName("EVENT_TYPE_MTY")] Mty = 3,
        /// <summary>
        /// Конвертация
        /// </summary>
        [pbr::OriginalName("EVENT_TYPE_CONV")] Conv = 4,
      }

    }
    #endregion

  }

  /// <summary>
  ///Объект передачи информации о событии облигации.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetBondEventsResponse : pb::IMessage<GetBondEventsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBondEventsResponse> _parser = new pb::MessageParser<GetBondEventsResponse>(() => new GetBondEventsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBondEventsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondEventsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondEventsResponse(GetBondEventsResponse other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondEventsResponse Clone() {
      return new GetBondEventsResponse(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Types.BondEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Types.BondEvent.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Types.BondEvent> events_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Types.BondEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Types.BondEvent> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBondEventsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBondEventsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      events_.WriteTo(ref output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBondEventsResponse other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            events_.AddEntriesFrom(ref input, _repeated_events_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GetBondEventsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class BondEvent : pb::IMessage<BondEvent>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BondEvent> _parser = new pb::MessageParser<BondEvent>(() => new BondEvent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<BondEvent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BondEvent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BondEvent(BondEvent other) : this() {
          instrumentId_ = other.instrumentId_;
          eventNumber_ = other.eventNumber_;
          eventDate_ = other.eventDate_ != null ? other.eventDate_.Clone() : null;
          eventType_ = other.eventType_;
          eventTotalVol_ = other.eventTotalVol_ != null ? other.eventTotalVol_.Clone() : null;
          fixDate_ = other.fixDate_ != null ? other.fixDate_.Clone() : null;
          rateDate_ = other.rateDate_ != null ? other.rateDate_.Clone() : null;
          defaultDate_ = other.defaultDate_ != null ? other.defaultDate_.Clone() : null;
          realPayDate_ = other.realPayDate_ != null ? other.realPayDate_.Clone() : null;
          payDate_ = other.payDate_ != null ? other.payDate_.Clone() : null;
          payOneBond_ = other.payOneBond_ != null ? other.payOneBond_.Clone() : null;
          moneyFlowVal_ = other.moneyFlowVal_ != null ? other.moneyFlowVal_.Clone() : null;
          execution_ = other.execution_;
          operationType_ = other.operationType_;
          value_ = other.value_ != null ? other.value_.Clone() : null;
          note_ = other.note_;
          convertToFinToolId_ = other.convertToFinToolId_;
          couponStartDate_ = other.couponStartDate_ != null ? other.couponStartDate_.Clone() : null;
          couponEndDate_ = other.couponEndDate_ != null ? other.couponEndDate_.Clone() : null;
          couponPeriod_ = other.couponPeriod_;
          couponInterestRate_ = other.couponInterestRate_ != null ? other.couponInterestRate_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BondEvent Clone() {
          return new BondEvent(this);
        }

        /// <summary>Field number for the "instrument_id" field.</summary>
        public const int InstrumentIdFieldNumber = 2;
        private string instrumentId_ = "";
        /// <summary>
        /// Идентификатор инструмента
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string InstrumentId {
          get { return instrumentId_; }
          set {
            instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "event_number" field.</summary>
        public const int EventNumberFieldNumber = 3;
        private int eventNumber_;
        /// <summary>
        /// Номер события для данного типа события
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int EventNumber {
          get { return eventNumber_; }
          set {
            eventNumber_ = value;
          }
        }

        /// <summary>Field number for the "event_date" field.</summary>
        public const int EventDateFieldNumber = 4;
        private global::Google.Protobuf.WellKnownTypes.Timestamp eventDate_;
        /// <summary>
        /// Дата события
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp EventDate {
          get { return eventDate_; }
          set {
            eventDate_ = value;
          }
        }

        /// <summary>Field number for the "event_type" field.</summary>
        public const int EventTypeFieldNumber = 5;
        private global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType eventType_ = global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified;
        /// <summary>
        /// Тип события
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType EventType {
          get { return eventType_; }
          set {
            eventType_ = value;
          }
        }

        /// <summary>Field number for the "event_total_vol" field.</summary>
        public const int EventTotalVolFieldNumber = 6;
        private global::Tinkoff.InvestApi.V1.Quotation eventTotalVol_;
        /// <summary>
        /// Полное количество бумаг, задействованных в событии
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation EventTotalVol {
          get { return eventTotalVol_; }
          set {
            eventTotalVol_ = value;
          }
        }

        /// <summary>Field number for the "fix_date" field.</summary>
        public const int FixDateFieldNumber = 7;
        private global::Google.Protobuf.WellKnownTypes.Timestamp fixDate_;
        /// <summary>
        /// Дата фиксации владельцев для участия в событии
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp FixDate {
          get { return fixDate_; }
          set {
            fixDate_ = value;
          }
        }

        /// <summary>Field number for the "rate_date" field.</summary>
        public const int RateDateFieldNumber = 8;
        private global::Google.Protobuf.WellKnownTypes.Timestamp rateDate_;
        /// <summary>
        /// Дата определения даты либо факта события
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp RateDate {
          get { return rateDate_; }
          set {
            rateDate_ = value;
          }
        }

        /// <summary>Field number for the "default_date" field.</summary>
        public const int DefaultDateFieldNumber = 9;
        private global::Google.Protobuf.WellKnownTypes.Timestamp defaultDate_;
        /// <summary>
        /// Дата дефолта (если применимо)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp DefaultDate {
          get { return defaultDate_; }
          set {
            defaultDate_ = value;
          }
        }

        /// <summary>Field number for the "real_pay_date" field.</summary>
        public const int RealPayDateFieldNumber = 10;
        private global::Google.Protobuf.WellKnownTypes.Timestamp realPayDate_;
        /// <summary>
        /// Дата реального исполнения обязательства
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp RealPayDate {
          get { return realPayDate_; }
          set {
            realPayDate_ = value;
          }
        }

        /// <summary>Field number for the "pay_date" field.</summary>
        public const int PayDateFieldNumber = 11;
        private global::Google.Protobuf.WellKnownTypes.Timestamp payDate_;
        /// <summary>
        /// Дата выплаты
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp PayDate {
          get { return payDate_; }
          set {
            payDate_ = value;
          }
        }

        /// <summary>Field number for the "pay_one_bond" field.</summary>
        public const int PayOneBondFieldNumber = 12;
        private global::Tinkoff.InvestApi.V1.MoneyValue payOneBond_;
        /// <summary>
        /// Выплата на одну облигацию
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.MoneyValue PayOneBond {
          get { return payOneBond_; }
          set {
            payOneBond_ = value;
          }
        }

        /// <summary>Field number for the "money_flow_val" field.</summary>
        public const int MoneyFlowValFieldNumber = 13;
        private global::Tinkoff.InvestApi.V1.MoneyValue moneyFlowVal_;
        /// <summary>
        /// Выплаты на все бумаги, задействованные в событии
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.MoneyValue MoneyFlowVal {
          get { return moneyFlowVal_; }
          set {
            moneyFlowVal_ = value;
          }
        }

        /// <summary>Field number for the "execution" field.</summary>
        public const int ExecutionFieldNumber = 14;
        private string execution_ = "";
        /// <summary>
        /// Признак исполнения
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Execution {
          get { return execution_; }
          set {
            execution_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "operation_type" field.</summary>
        public const int OperationTypeFieldNumber = 15;
        private string operationType_ = "";
        /// <summary>
        /// Тип операции
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string OperationType {
          get { return operationType_; }
          set {
            operationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 16;
        private global::Tinkoff.InvestApi.V1.Quotation value_;
        /// <summary>
        /// Стоимость операции (ставка купона, доля номинала, цена выкупа или коэффициент конвертации)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "note" field.</summary>
        public const int NoteFieldNumber = 17;
        private string note_ = "";
        /// <summary>
        /// Примечание
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Note {
          get { return note_; }
          set {
            note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "convert_to_fin_tool_id" field.</summary>
        public const int ConvertToFinToolIdFieldNumber = 18;
        private string convertToFinToolId_ = "";
        /// <summary>
        /// ID выпуска бумаг, в который произведена конвертация (для конвертаций)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ConvertToFinToolId {
          get { return convertToFinToolId_; }
          set {
            convertToFinToolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "coupon_start_date" field.</summary>
        public const int CouponStartDateFieldNumber = 19;
        private global::Google.Protobuf.WellKnownTypes.Timestamp couponStartDate_;
        /// <summary>
        /// Начало купонного периода
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp CouponStartDate {
          get { return couponStartDate_; }
          set {
            couponStartDate_ = value;
          }
        }

        /// <summary>Field number for the "coupon_end_date" field.</summary>
        public const int CouponEndDateFieldNumber = 20;
        private global::Google.Protobuf.WellKnownTypes.Timestamp couponEndDate_;
        /// <summary>
        /// Окончание купонного периода
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp CouponEndDate {
          get { return couponEndDate_; }
          set {
            couponEndDate_ = value;
          }
        }

        /// <summary>Field number for the "coupon_period" field.</summary>
        public const int CouponPeriodFieldNumber = 21;
        private int couponPeriod_;
        /// <summary>
        /// Купонный период
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CouponPeriod {
          get { return couponPeriod_; }
          set {
            couponPeriod_ = value;
          }
        }

        /// <summary>Field number for the "coupon_interest_rate" field.</summary>
        public const int CouponInterestRateFieldNumber = 22;
        private global::Tinkoff.InvestApi.V1.Quotation couponInterestRate_;
        /// <summary>
        /// Ставка купона, процентов годовых
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation CouponInterestRate {
          get { return couponInterestRate_; }
          set {
            couponInterestRate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as BondEvent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(BondEvent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InstrumentId != other.InstrumentId) return false;
          if (EventNumber != other.EventNumber) return false;
          if (!object.Equals(EventDate, other.EventDate)) return false;
          if (EventType != other.EventType) return false;
          if (!object.Equals(EventTotalVol, other.EventTotalVol)) return false;
          if (!object.Equals(FixDate, other.FixDate)) return false;
          if (!object.Equals(RateDate, other.RateDate)) return false;
          if (!object.Equals(DefaultDate, other.DefaultDate)) return false;
          if (!object.Equals(RealPayDate, other.RealPayDate)) return false;
          if (!object.Equals(PayDate, other.PayDate)) return false;
          if (!object.Equals(PayOneBond, other.PayOneBond)) return false;
          if (!object.Equals(MoneyFlowVal, other.MoneyFlowVal)) return false;
          if (Execution != other.Execution) return false;
          if (OperationType != other.OperationType) return false;
          if (!object.Equals(Value, other.Value)) return false;
          if (Note != other.Note) return false;
          if (ConvertToFinToolId != other.ConvertToFinToolId) return false;
          if (!object.Equals(CouponStartDate, other.CouponStartDate)) return false;
          if (!object.Equals(CouponEndDate, other.CouponEndDate)) return false;
          if (CouponPeriod != other.CouponPeriod) return false;
          if (!object.Equals(CouponInterestRate, other.CouponInterestRate)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
          if (EventNumber != 0) hash ^= EventNumber.GetHashCode();
          if (eventDate_ != null) hash ^= EventDate.GetHashCode();
          if (EventType != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) hash ^= EventType.GetHashCode();
          if (eventTotalVol_ != null) hash ^= EventTotalVol.GetHashCode();
          if (fixDate_ != null) hash ^= FixDate.GetHashCode();
          if (rateDate_ != null) hash ^= RateDate.GetHashCode();
          if (defaultDate_ != null) hash ^= DefaultDate.GetHashCode();
          if (realPayDate_ != null) hash ^= RealPayDate.GetHashCode();
          if (payDate_ != null) hash ^= PayDate.GetHashCode();
          if (payOneBond_ != null) hash ^= PayOneBond.GetHashCode();
          if (moneyFlowVal_ != null) hash ^= MoneyFlowVal.GetHashCode();
          if (Execution.Length != 0) hash ^= Execution.GetHashCode();
          if (OperationType.Length != 0) hash ^= OperationType.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (Note.Length != 0) hash ^= Note.GetHashCode();
          if (ConvertToFinToolId.Length != 0) hash ^= ConvertToFinToolId.GetHashCode();
          if (couponStartDate_ != null) hash ^= CouponStartDate.GetHashCode();
          if (couponEndDate_ != null) hash ^= CouponEndDate.GetHashCode();
          if (CouponPeriod != 0) hash ^= CouponPeriod.GetHashCode();
          if (couponInterestRate_ != null) hash ^= CouponInterestRate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (InstrumentId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(InstrumentId);
          }
          if (EventNumber != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EventNumber);
          }
          if (eventDate_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(EventDate);
          }
          if (EventType != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) {
            output.WriteRawTag(40);
            output.WriteEnum((int) EventType);
          }
          if (eventTotalVol_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(EventTotalVol);
          }
          if (fixDate_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(FixDate);
          }
          if (rateDate_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(RateDate);
          }
          if (defaultDate_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(DefaultDate);
          }
          if (realPayDate_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(RealPayDate);
          }
          if (payDate_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(PayDate);
          }
          if (payOneBond_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(PayOneBond);
          }
          if (moneyFlowVal_ != null) {
            output.WriteRawTag(106);
            output.WriteMessage(MoneyFlowVal);
          }
          if (Execution.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(Execution);
          }
          if (OperationType.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(OperationType);
          }
          if (value_ != null) {
            output.WriteRawTag(130, 1);
            output.WriteMessage(Value);
          }
          if (Note.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(Note);
          }
          if (ConvertToFinToolId.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(ConvertToFinToolId);
          }
          if (couponStartDate_ != null) {
            output.WriteRawTag(154, 1);
            output.WriteMessage(CouponStartDate);
          }
          if (couponEndDate_ != null) {
            output.WriteRawTag(162, 1);
            output.WriteMessage(CouponEndDate);
          }
          if (CouponPeriod != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(CouponPeriod);
          }
          if (couponInterestRate_ != null) {
            output.WriteRawTag(178, 1);
            output.WriteMessage(CouponInterestRate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (InstrumentId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(InstrumentId);
          }
          if (EventNumber != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EventNumber);
          }
          if (eventDate_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(EventDate);
          }
          if (EventType != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) {
            output.WriteRawTag(40);
            output.WriteEnum((int) EventType);
          }
          if (eventTotalVol_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(EventTotalVol);
          }
          if (fixDate_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(FixDate);
          }
          if (rateDate_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(RateDate);
          }
          if (defaultDate_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(DefaultDate);
          }
          if (realPayDate_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(RealPayDate);
          }
          if (payDate_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(PayDate);
          }
          if (payOneBond_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(PayOneBond);
          }
          if (moneyFlowVal_ != null) {
            output.WriteRawTag(106);
            output.WriteMessage(MoneyFlowVal);
          }
          if (Execution.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(Execution);
          }
          if (OperationType.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(OperationType);
          }
          if (value_ != null) {
            output.WriteRawTag(130, 1);
            output.WriteMessage(Value);
          }
          if (Note.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(Note);
          }
          if (ConvertToFinToolId.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(ConvertToFinToolId);
          }
          if (couponStartDate_ != null) {
            output.WriteRawTag(154, 1);
            output.WriteMessage(CouponStartDate);
          }
          if (couponEndDate_ != null) {
            output.WriteRawTag(162, 1);
            output.WriteMessage(CouponEndDate);
          }
          if (CouponPeriod != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(CouponPeriod);
          }
          if (couponInterestRate_ != null) {
            output.WriteRawTag(178, 1);
            output.WriteMessage(CouponInterestRate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (InstrumentId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
          }
          if (EventNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventNumber);
          }
          if (eventDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventDate);
          }
          if (EventType != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
          }
          if (eventTotalVol_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventTotalVol);
          }
          if (fixDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixDate);
          }
          if (rateDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateDate);
          }
          if (defaultDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultDate);
          }
          if (realPayDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealPayDate);
          }
          if (payDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayDate);
          }
          if (payOneBond_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayOneBond);
          }
          if (moneyFlowVal_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoneyFlowVal);
          }
          if (Execution.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Execution);
          }
          if (OperationType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationType);
          }
          if (value_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (Note.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Note);
          }
          if (ConvertToFinToolId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ConvertToFinToolId);
          }
          if (couponStartDate_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CouponStartDate);
          }
          if (couponEndDate_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CouponEndDate);
          }
          if (CouponPeriod != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(CouponPeriod);
          }
          if (couponInterestRate_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CouponInterestRate);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(BondEvent other) {
          if (other == null) {
            return;
          }
          if (other.InstrumentId.Length != 0) {
            InstrumentId = other.InstrumentId;
          }
          if (other.EventNumber != 0) {
            EventNumber = other.EventNumber;
          }
          if (other.eventDate_ != null) {
            if (eventDate_ == null) {
              EventDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            EventDate.MergeFrom(other.EventDate);
          }
          if (other.EventType != global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType.Unspecified) {
            EventType = other.EventType;
          }
          if (other.eventTotalVol_ != null) {
            if (eventTotalVol_ == null) {
              EventTotalVol = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            EventTotalVol.MergeFrom(other.EventTotalVol);
          }
          if (other.fixDate_ != null) {
            if (fixDate_ == null) {
              FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            FixDate.MergeFrom(other.FixDate);
          }
          if (other.rateDate_ != null) {
            if (rateDate_ == null) {
              RateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            RateDate.MergeFrom(other.RateDate);
          }
          if (other.defaultDate_ != null) {
            if (defaultDate_ == null) {
              DefaultDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            DefaultDate.MergeFrom(other.DefaultDate);
          }
          if (other.realPayDate_ != null) {
            if (realPayDate_ == null) {
              RealPayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            RealPayDate.MergeFrom(other.RealPayDate);
          }
          if (other.payDate_ != null) {
            if (payDate_ == null) {
              PayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            PayDate.MergeFrom(other.PayDate);
          }
          if (other.payOneBond_ != null) {
            if (payOneBond_ == null) {
              PayOneBond = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            PayOneBond.MergeFrom(other.PayOneBond);
          }
          if (other.moneyFlowVal_ != null) {
            if (moneyFlowVal_ == null) {
              MoneyFlowVal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            MoneyFlowVal.MergeFrom(other.MoneyFlowVal);
          }
          if (other.Execution.Length != 0) {
            Execution = other.Execution;
          }
          if (other.OperationType.Length != 0) {
            OperationType = other.OperationType;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              Value = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            Value.MergeFrom(other.Value);
          }
          if (other.Note.Length != 0) {
            Note = other.Note;
          }
          if (other.ConvertToFinToolId.Length != 0) {
            ConvertToFinToolId = other.ConvertToFinToolId;
          }
          if (other.couponStartDate_ != null) {
            if (couponStartDate_ == null) {
              CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            CouponStartDate.MergeFrom(other.CouponStartDate);
          }
          if (other.couponEndDate_ != null) {
            if (couponEndDate_ == null) {
              CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            CouponEndDate.MergeFrom(other.CouponEndDate);
          }
          if (other.CouponPeriod != 0) {
            CouponPeriod = other.CouponPeriod;
          }
          if (other.couponInterestRate_ != null) {
            if (couponInterestRate_ == null) {
              CouponInterestRate = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            CouponInterestRate.MergeFrom(other.CouponInterestRate);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                InstrumentId = input.ReadString();
                break;
              }
              case 24: {
                EventNumber = input.ReadInt32();
                break;
              }
              case 34: {
                if (eventDate_ == null) {
                  EventDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(EventDate);
                break;
              }
              case 40: {
                EventType = (global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType) input.ReadEnum();
                break;
              }
              case 50: {
                if (eventTotalVol_ == null) {
                  EventTotalVol = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(EventTotalVol);
                break;
              }
              case 58: {
                if (fixDate_ == null) {
                  FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(FixDate);
                break;
              }
              case 66: {
                if (rateDate_ == null) {
                  RateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(RateDate);
                break;
              }
              case 74: {
                if (defaultDate_ == null) {
                  DefaultDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(DefaultDate);
                break;
              }
              case 82: {
                if (realPayDate_ == null) {
                  RealPayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(RealPayDate);
                break;
              }
              case 90: {
                if (payDate_ == null) {
                  PayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(PayDate);
                break;
              }
              case 98: {
                if (payOneBond_ == null) {
                  PayOneBond = new global::Tinkoff.InvestApi.V1.MoneyValue();
                }
                input.ReadMessage(PayOneBond);
                break;
              }
              case 106: {
                if (moneyFlowVal_ == null) {
                  MoneyFlowVal = new global::Tinkoff.InvestApi.V1.MoneyValue();
                }
                input.ReadMessage(MoneyFlowVal);
                break;
              }
              case 114: {
                Execution = input.ReadString();
                break;
              }
              case 122: {
                OperationType = input.ReadString();
                break;
              }
              case 130: {
                if (value_ == null) {
                  Value = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(Value);
                break;
              }
              case 138: {
                Note = input.ReadString();
                break;
              }
              case 146: {
                ConvertToFinToolId = input.ReadString();
                break;
              }
              case 154: {
                if (couponStartDate_ == null) {
                  CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CouponStartDate);
                break;
              }
              case 162: {
                if (couponEndDate_ == null) {
                  CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CouponEndDate);
                break;
              }
              case 168: {
                CouponPeriod = input.ReadInt32();
                break;
              }
              case 178: {
                if (couponInterestRate_ == null) {
                  CouponInterestRate = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(CouponInterestRate);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 18: {
                InstrumentId = input.ReadString();
                break;
              }
              case 24: {
                EventNumber = input.ReadInt32();
                break;
              }
              case 34: {
                if (eventDate_ == null) {
                  EventDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(EventDate);
                break;
              }
              case 40: {
                EventType = (global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Types.EventType) input.ReadEnum();
                break;
              }
              case 50: {
                if (eventTotalVol_ == null) {
                  EventTotalVol = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(EventTotalVol);
                break;
              }
              case 58: {
                if (fixDate_ == null) {
                  FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(FixDate);
                break;
              }
              case 66: {
                if (rateDate_ == null) {
                  RateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(RateDate);
                break;
              }
              case 74: {
                if (defaultDate_ == null) {
                  DefaultDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(DefaultDate);
                break;
              }
              case 82: {
                if (realPayDate_ == null) {
                  RealPayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(RealPayDate);
                break;
              }
              case 90: {
                if (payDate_ == null) {
                  PayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(PayDate);
                break;
              }
              case 98: {
                if (payOneBond_ == null) {
                  PayOneBond = new global::Tinkoff.InvestApi.V1.MoneyValue();
                }
                input.ReadMessage(PayOneBond);
                break;
              }
              case 106: {
                if (moneyFlowVal_ == null) {
                  MoneyFlowVal = new global::Tinkoff.InvestApi.V1.MoneyValue();
                }
                input.ReadMessage(MoneyFlowVal);
                break;
              }
              case 114: {
                Execution = input.ReadString();
                break;
              }
              case 122: {
                OperationType = input.ReadString();
                break;
              }
              case 130: {
                if (value_ == null) {
                  Value = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(Value);
                break;
              }
              case 138: {
                Note = input.ReadString();
                break;
              }
              case 146: {
                ConvertToFinToolId = input.ReadString();
                break;
              }
              case 154: {
                if (couponStartDate_ == null) {
                  CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CouponStartDate);
                break;
              }
              case 162: {
                if (couponEndDate_ == null) {
                  CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CouponEndDate);
                break;
              }
              case 168: {
                CouponPeriod = input.ReadInt32();
                break;
              }
              case 178: {
                if (couponInterestRate_ == null) {
                  CouponInterestRate = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(CouponInterestRate);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  ///Объект передачи информации о купоне облигации.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Coupon : pb::IMessage<Coupon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Coupon> _parser = new pb::MessageParser<Coupon>(() => new Coupon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Coupon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Coupon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Coupon(Coupon other) : this() {
      figi_ = other.figi_;
      couponDate_ = other.couponDate_ != null ? other.couponDate_.Clone() : null;
      couponNumber_ = other.couponNumber_;
      fixDate_ = other.fixDate_ != null ? other.fixDate_.Clone() : null;
      payOneBond_ = other.payOneBond_ != null ? other.payOneBond_.Clone() : null;
      couponType_ = other.couponType_;
      couponStartDate_ = other.couponStartDate_ != null ? other.couponStartDate_.Clone() : null;
      couponEndDate_ = other.couponEndDate_ != null ? other.couponEndDate_.Clone() : null;
      couponPeriod_ = other.couponPeriod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Coupon Clone() {
      return new Coupon(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupon_date" field.</summary>
    public const int CouponDateFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp couponDate_;
    /// <summary>
    ///Дата выплаты купона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CouponDate {
      get { return couponDate_; }
      set {
        couponDate_ = value;
      }
    }

    /// <summary>Field number for the "coupon_number" field.</summary>
    public const int CouponNumberFieldNumber = 3;
    private long couponNumber_;
    /// <summary>
    ///Номер купона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CouponNumber {
      get { return couponNumber_; }
      set {
        couponNumber_ = value;
      }
    }

    /// <summary>Field number for the "fix_date" field.</summary>
    public const int FixDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fixDate_;
    /// <summary>
    ///(Опционально) Дата фиксации реестра для выплаты купона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FixDate {
      get { return fixDate_; }
      set {
        fixDate_ = value;
      }
    }

    /// <summary>Field number for the "pay_one_bond" field.</summary>
    public const int PayOneBondFieldNumber = 5;
    private global::Tinkoff.InvestApi.V1.MoneyValue payOneBond_;
    /// <summary>
    ///Выплата на одну облигацию.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue PayOneBond {
      get { return payOneBond_; }
      set {
        payOneBond_ = value;
      }
    }

    /// <summary>Field number for the "coupon_type" field.</summary>
    public const int CouponTypeFieldNumber = 6;
    private global::Tinkoff.InvestApi.V1.CouponType couponType_ = global::Tinkoff.InvestApi.V1.CouponType.Unspecified;
    /// <summary>
    ///Тип купона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.CouponType CouponType {
      get { return couponType_; }
      set {
        couponType_ = value;
      }
    }

    /// <summary>Field number for the "coupon_start_date" field.</summary>
    public const int CouponStartDateFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp couponStartDate_;
    /// <summary>
    ///Начало купонного периода.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CouponStartDate {
      get { return couponStartDate_; }
      set {
        couponStartDate_ = value;
      }
    }

    /// <summary>Field number for the "coupon_end_date" field.</summary>
    public const int CouponEndDateFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp couponEndDate_;
    /// <summary>
    ///Окончание купонного периода.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CouponEndDate {
      get { return couponEndDate_; }
      set {
        couponEndDate_ = value;
      }
    }

    /// <summary>Field number for the "coupon_period" field.</summary>
    public const int CouponPeriodFieldNumber = 9;
    private int couponPeriod_;
    /// <summary>
    ///Купонный период в днях.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CouponPeriod {
      get { return couponPeriod_; }
      set {
        couponPeriod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Coupon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Coupon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(CouponDate, other.CouponDate)) return false;
      if (CouponNumber != other.CouponNumber) return false;
      if (!object.Equals(FixDate, other.FixDate)) return false;
      if (!object.Equals(PayOneBond, other.PayOneBond)) return false;
      if (CouponType != other.CouponType) return false;
      if (!object.Equals(CouponStartDate, other.CouponStartDate)) return false;
      if (!object.Equals(CouponEndDate, other.CouponEndDate)) return false;
      if (CouponPeriod != other.CouponPeriod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (couponDate_ != null) hash ^= CouponDate.GetHashCode();
      if (CouponNumber != 0L) hash ^= CouponNumber.GetHashCode();
      if (fixDate_ != null) hash ^= FixDate.GetHashCode();
      if (payOneBond_ != null) hash ^= PayOneBond.GetHashCode();
      if (CouponType != global::Tinkoff.InvestApi.V1.CouponType.Unspecified) hash ^= CouponType.GetHashCode();
      if (couponStartDate_ != null) hash ^= CouponStartDate.GetHashCode();
      if (couponEndDate_ != null) hash ^= CouponEndDate.GetHashCode();
      if (CouponPeriod != 0) hash ^= CouponPeriod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (couponDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CouponDate);
      }
      if (CouponNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CouponNumber);
      }
      if (fixDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FixDate);
      }
      if (payOneBond_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PayOneBond);
      }
      if (CouponType != global::Tinkoff.InvestApi.V1.CouponType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CouponType);
      }
      if (couponStartDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CouponStartDate);
      }
      if (couponEndDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CouponEndDate);
      }
      if (CouponPeriod != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CouponPeriod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (couponDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CouponDate);
      }
      if (CouponNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CouponNumber);
      }
      if (fixDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FixDate);
      }
      if (payOneBond_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PayOneBond);
      }
      if (CouponType != global::Tinkoff.InvestApi.V1.CouponType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CouponType);
      }
      if (couponStartDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CouponStartDate);
      }
      if (couponEndDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CouponEndDate);
      }
      if (CouponPeriod != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CouponPeriod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (couponDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CouponDate);
      }
      if (CouponNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CouponNumber);
      }
      if (fixDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixDate);
      }
      if (payOneBond_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayOneBond);
      }
      if (CouponType != global::Tinkoff.InvestApi.V1.CouponType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CouponType);
      }
      if (couponStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CouponStartDate);
      }
      if (couponEndDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CouponEndDate);
      }
      if (CouponPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CouponPeriod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Coupon other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.couponDate_ != null) {
        if (couponDate_ == null) {
          CouponDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CouponDate.MergeFrom(other.CouponDate);
      }
      if (other.CouponNumber != 0L) {
        CouponNumber = other.CouponNumber;
      }
      if (other.fixDate_ != null) {
        if (fixDate_ == null) {
          FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FixDate.MergeFrom(other.FixDate);
      }
      if (other.payOneBond_ != null) {
        if (payOneBond_ == null) {
          PayOneBond = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        PayOneBond.MergeFrom(other.PayOneBond);
      }
      if (other.CouponType != global::Tinkoff.InvestApi.V1.CouponType.Unspecified) {
        CouponType = other.CouponType;
      }
      if (other.couponStartDate_ != null) {
        if (couponStartDate_ == null) {
          CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CouponStartDate.MergeFrom(other.CouponStartDate);
      }
      if (other.couponEndDate_ != null) {
        if (couponEndDate_ == null) {
          CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CouponEndDate.MergeFrom(other.CouponEndDate);
      }
      if (other.CouponPeriod != 0) {
        CouponPeriod = other.CouponPeriod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (couponDate_ == null) {
              CouponDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponDate);
            break;
          }
          case 24: {
            CouponNumber = input.ReadInt64();
            break;
          }
          case 34: {
            if (fixDate_ == null) {
              FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FixDate);
            break;
          }
          case 42: {
            if (payOneBond_ == null) {
              PayOneBond = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PayOneBond);
            break;
          }
          case 48: {
            CouponType = (global::Tinkoff.InvestApi.V1.CouponType) input.ReadEnum();
            break;
          }
          case 58: {
            if (couponStartDate_ == null) {
              CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponStartDate);
            break;
          }
          case 66: {
            if (couponEndDate_ == null) {
              CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponEndDate);
            break;
          }
          case 72: {
            CouponPeriod = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (couponDate_ == null) {
              CouponDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponDate);
            break;
          }
          case 24: {
            CouponNumber = input.ReadInt64();
            break;
          }
          case 34: {
            if (fixDate_ == null) {
              FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FixDate);
            break;
          }
          case 42: {
            if (payOneBond_ == null) {
              PayOneBond = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PayOneBond);
            break;
          }
          case 48: {
            CouponType = (global::Tinkoff.InvestApi.V1.CouponType) input.ReadEnum();
            break;
          }
          case 58: {
            if (couponStartDate_ == null) {
              CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponStartDate);
            break;
          }
          case 66: {
            if (couponEndDate_ == null) {
              CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponEndDate);
            break;
          }
          case 72: {
            CouponPeriod = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по валюте.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CurrencyResponse : pb::IMessage<CurrencyResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrencyResponse> _parser = new pb::MessageParser<CurrencyResponse>(() => new CurrencyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CurrencyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse(CurrencyResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse Clone() {
      return new CurrencyResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Currency instrument_;
    /// <summary>
    /// Информация о валюте.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Currency Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CurrencyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CurrencyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CurrencyResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Currency();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Currency();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Currency();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по валютам.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CurrenciesResponse : pb::IMessage<CurrenciesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrenciesResponse> _parser = new pb::MessageParser<CurrenciesResponse>(() => new CurrenciesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CurrenciesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse(CurrenciesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse Clone() {
      return new CurrenciesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Currency> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Currency.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Currency> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Currency>();
    /// <summary>
    ///Массив валют.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Currency> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CurrenciesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CurrenciesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CurrenciesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фонду.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EtfResponse : pb::IMessage<EtfResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EtfResponse> _parser = new pb::MessageParser<EtfResponse>(() => new EtfResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EtfResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse(EtfResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse Clone() {
      return new EtfResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Etf instrument_;
    /// <summary>
    /// Информация о фонде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Etf Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EtfResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EtfResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EtfResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Etf();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Etf();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Etf();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фондам.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EtfsResponse : pb::IMessage<EtfsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EtfsResponse> _parser = new pb::MessageParser<EtfsResponse>(() => new EtfsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EtfsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse(EtfsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse Clone() {
      return new EtfsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Etf> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Etf.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Etf> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Etf>();
    /// <summary>
    ///Массив фондов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Etf> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EtfsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EtfsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EtfsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсу.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FutureResponse : pb::IMessage<FutureResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FutureResponse> _parser = new pb::MessageParser<FutureResponse>(() => new FutureResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FutureResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse(FutureResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse Clone() {
      return new FutureResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Future instrument_;
    /// <summary>
    /// Информация о фьючерсу.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Future Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FutureResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FutureResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FutureResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Future();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Future();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Future();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсам.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FuturesResponse : pb::IMessage<FuturesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FuturesResponse> _parser = new pb::MessageParser<FuturesResponse>(() => new FuturesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FuturesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse(FuturesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse Clone() {
      return new FuturesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Future> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Future.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Future> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Future>();
    /// <summary>
    ///Массив фьючерсов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Future> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FuturesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FuturesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FuturesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по опциону.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OptionResponse : pb::IMessage<OptionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionResponse> _parser = new pb::MessageParser<OptionResponse>(() => new OptionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionResponse(OptionResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionResponse Clone() {
      return new OptionResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Option instrument_;
    /// <summary>
    /// Информация по опциону.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Option Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Option();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Option();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Option();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по опционам.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OptionsResponse : pb::IMessage<OptionsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionsResponse> _parser = new pb::MessageParser<OptionsResponse>(() => new OptionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionsResponse(OptionsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionsResponse Clone() {
      return new OptionsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Option> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Option.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Option> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Option>();
    /// <summary>
    ///Массив данных по опциону.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Option> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Опцион.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Option : pb::IMessage<Option>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Option> _parser = new pb::MessageParser<Option>(() => new Option());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Option> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Option() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Option(Option other) : this() {
      uid_ = other.uid_;
      positionUid_ = other.positionUid_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      basicAssetPositionUid_ = other.basicAssetPositionUid_;
      tradingStatus_ = other.tradingStatus_;
      realExchange_ = other.realExchange_;
      direction_ = other.direction_;
      paymentType_ = other.paymentType_;
      style_ = other.style_;
      settlementType_ = other.settlementType_;
      name_ = other.name_;
      currency_ = other.currency_;
      settlementCurrency_ = other.settlementCurrency_;
      assetType_ = other.assetType_;
      basicAsset_ = other.basicAsset_;
      exchange_ = other.exchange_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      lot_ = other.lot_;
      basicAssetSize_ = other.basicAssetSize_ != null ? other.basicAssetSize_.Clone() : null;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      strikePrice_ = other.strikePrice_ != null ? other.strikePrice_.Clone() : null;
      expirationDate_ = other.expirationDate_ != null ? other.expirationDate_.Clone() : null;
      firstTradeDate_ = other.firstTradeDate_ != null ? other.firstTradeDate_.Clone() : null;
      lastTradeDate_ = other.lastTradeDate_ != null ? other.lastTradeDate_.Clone() : null;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      forIisFlag_ = other.forIisFlag_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Option Clone() {
      return new Option(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 2;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 3;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 4;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset_position_uid" field.</summary>
    public const int BasicAssetPositionUidFieldNumber = 5;
    private string basicAssetPositionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции основного инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAssetPositionUid {
      get { return basicAssetPositionUid_; }
      set {
        basicAssetPositionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 21;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 31;
    private global::Tinkoff.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов (биржа). Допустимые значения: [REAL_EXCHANGE_MOEX, REAL_EXCHANGE_RTS]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 41;
    private global::Tinkoff.InvestApi.V1.OptionDirection direction_ = global::Tinkoff.InvestApi.V1.OptionDirection.Unspecified;
    /// <summary>
    ///Направление опциона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.OptionDirection Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "payment_type" field.</summary>
    public const int PaymentTypeFieldNumber = 42;
    private global::Tinkoff.InvestApi.V1.OptionPaymentType paymentType_ = global::Tinkoff.InvestApi.V1.OptionPaymentType.Unspecified;
    /// <summary>
    ///Тип расчетов по опциону.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.OptionPaymentType PaymentType {
      get { return paymentType_; }
      set {
        paymentType_ = value;
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 43;
    private global::Tinkoff.InvestApi.V1.OptionStyle style_ = global::Tinkoff.InvestApi.V1.OptionStyle.Unspecified;
    /// <summary>
    ///Стиль опциона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.OptionStyle Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "settlement_type" field.</summary>
    public const int SettlementTypeFieldNumber = 44;
    private global::Tinkoff.InvestApi.V1.OptionSettlementType settlementType_ = global::Tinkoff.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified;
    /// <summary>
    ///Способ исполнения опциона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.OptionSettlementType SettlementType {
      get { return settlementType_; }
      set {
        settlementType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 111;
    private string currency_ = "";
    /// <summary>
    ///Валюта.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlement_currency" field.</summary>
    public const int SettlementCurrencyFieldNumber = 112;
    private string settlementCurrency_ = "";
    /// <summary>
    ///Валюта, в которой оценивается контракт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettlementCurrency {
      get { return settlementCurrency_; }
      set {
        settlementCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 131;
    private string assetType_ = "";
    /// <summary>
    ///Тип актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetType {
      get { return assetType_; }
      set {
        assetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset" field.</summary>
    public const int BasicAssetFieldNumber = 132;
    private string basicAsset_ = "";
    /// <summary>
    ///Основной актив.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAsset {
      get { return basicAsset_; }
      set {
        basicAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 141;
    private string exchange_ = "";
    /// <summary>
    /// Tорговая площадка (секция биржи).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 151;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны рисков.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 152;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны рисков.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 161;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 162;
    private global::Tinkoff.InvestApi.V1.BrandData brand_;
    /// <summary>
    /// Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.BrandData Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 201;
    private int lot_;
    /// <summary>
    ///Количество бумаг в лоте.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "basic_asset_size" field.</summary>
    public const int BasicAssetSizeFieldNumber = 211;
    private global::Tinkoff.InvestApi.V1.Quotation basicAssetSize_;
    /// <summary>
    ///Размер основного актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation BasicAssetSize {
      get { return basicAssetSize_; }
      set {
        basicAssetSize_ = value;
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 221;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 222;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 223;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 224;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР шорт.  Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 225;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 226;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР шорт.  Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 231;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Минимальный шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "strike_price" field.</summary>
    public const int StrikePriceFieldNumber = 241;
    private global::Tinkoff.InvestApi.V1.MoneyValue strikePrice_;
    /// <summary>
    ///Цена страйка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "expiration_date" field.</summary>
    public const int ExpirationDateFieldNumber = 301;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationDate_;
    /// <summary>
    ///Дата истечения срока в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationDate {
      get { return expirationDate_; }
      set {
        expirationDate_ = value;
      }
    }

    /// <summary>Field number for the "first_trade_date" field.</summary>
    public const int FirstTradeDateFieldNumber = 311;
    private global::Google.Protobuf.WellKnownTypes.Timestamp firstTradeDate_;
    /// <summary>
    ///Дата начала обращения контракта в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FirstTradeDate {
      get { return firstTradeDate_; }
      set {
        firstTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_date" field.</summary>
    public const int LastTradeDateFieldNumber = 312;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastTradeDate_;
    /// <summary>
    ///Дата исполнения в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastTradeDate {
      get { return lastTradeDate_; }
      set {
        lastTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 321;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 322;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 401;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 402;
    private bool forIisFlag_;
    /// <summary>
    ///Возможность покупки/продажи на ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 403;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 404;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 405;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 406;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 407;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 408;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 409;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Option);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Option other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (PositionUid != other.PositionUid) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (BasicAssetPositionUid != other.BasicAssetPositionUid) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (RealExchange != other.RealExchange) return false;
      if (Direction != other.Direction) return false;
      if (PaymentType != other.PaymentType) return false;
      if (Style != other.Style) return false;
      if (SettlementType != other.SettlementType) return false;
      if (Name != other.Name) return false;
      if (Currency != other.Currency) return false;
      if (SettlementCurrency != other.SettlementCurrency) return false;
      if (AssetType != other.AssetType) return false;
      if (BasicAsset != other.BasicAsset) return false;
      if (Exchange != other.Exchange) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      if (Lot != other.Lot) return false;
      if (!object.Equals(BasicAssetSize, other.BasicAssetSize)) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (!object.Equals(StrikePrice, other.StrikePrice)) return false;
      if (!object.Equals(ExpirationDate, other.ExpirationDate)) return false;
      if (!object.Equals(FirstTradeDate, other.FirstTradeDate)) return false;
      if (!object.Equals(LastTradeDate, other.LastTradeDate)) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (BasicAssetPositionUid.Length != 0) hash ^= BasicAssetPositionUid.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (Direction != global::Tinkoff.InvestApi.V1.OptionDirection.Unspecified) hash ^= Direction.GetHashCode();
      if (PaymentType != global::Tinkoff.InvestApi.V1.OptionPaymentType.Unspecified) hash ^= PaymentType.GetHashCode();
      if (Style != global::Tinkoff.InvestApi.V1.OptionStyle.Unspecified) hash ^= Style.GetHashCode();
      if (SettlementType != global::Tinkoff.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) hash ^= SettlementType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (SettlementCurrency.Length != 0) hash ^= SettlementCurrency.GetHashCode();
      if (AssetType.Length != 0) hash ^= AssetType.GetHashCode();
      if (BasicAsset.Length != 0) hash ^= BasicAsset.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (basicAssetSize_ != null) hash ^= BasicAssetSize.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (strikePrice_ != null) hash ^= StrikePrice.GetHashCode();
      if (expirationDate_ != null) hash ^= ExpirationDate.GetHashCode();
      if (firstTradeDate_ != null) hash ^= FirstTradeDate.GetHashCode();
      if (lastTradeDate_ != null) hash ^= LastTradeDate.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PositionUid);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (BasicAssetPositionUid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BasicAssetPositionUid);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (Direction != global::Tinkoff.InvestApi.V1.OptionDirection.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) Direction);
      }
      if (PaymentType != global::Tinkoff.InvestApi.V1.OptionPaymentType.Unspecified) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) PaymentType);
      }
      if (Style != global::Tinkoff.InvestApi.V1.OptionStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) Style);
      }
      if (SettlementType != global::Tinkoff.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) SettlementType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(Currency);
      }
      if (SettlementCurrency.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(SettlementCurrency);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(154, 8);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(162, 8);
        output.WriteString(BasicAsset);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(234, 8);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(194, 9);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(138, 10);
        output.WriteString(Sector);
      }
      if (brand_ != null) {
        output.WriteRawTag(146, 10);
        output.WriteMessage(Brand);
      }
      if (Lot != 0) {
        output.WriteRawTag(200, 12);
        output.WriteInt32(Lot);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(BasicAssetSize);
      }
      if (klong_ != null) {
        output.WriteRawTag(234, 13);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(242, 13);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(250, 13);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(130, 14);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(138, 14);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(146, 14);
        output.WriteMessage(DshortMin);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 14);
        output.WriteMessage(MinPriceIncrement);
      }
      if (strikePrice_ != null) {
        output.WriteRawTag(138, 15);
        output.WriteMessage(StrikePrice);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(ExpirationDate);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(186, 19);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(194, 19);
        output.WriteMessage(LastTradeDate);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(138, 20);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(146, 20);
        output.WriteMessage(First1DayCandleDate);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(136, 25);
        output.WriteBool(ShortEnabledFlag);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(144, 25);
        output.WriteBool(ForIisFlag);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(152, 25);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(160, 25);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(168, 25);
        output.WriteBool(SellAvailableFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(176, 25);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(184, 25);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(192, 25);
        output.WriteBool(BlockedTcaFlag);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(200, 25);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PositionUid);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (BasicAssetPositionUid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BasicAssetPositionUid);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (Direction != global::Tinkoff.InvestApi.V1.OptionDirection.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) Direction);
      }
      if (PaymentType != global::Tinkoff.InvestApi.V1.OptionPaymentType.Unspecified) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) PaymentType);
      }
      if (Style != global::Tinkoff.InvestApi.V1.OptionStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) Style);
      }
      if (SettlementType != global::Tinkoff.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) SettlementType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(Currency);
      }
      if (SettlementCurrency.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(SettlementCurrency);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(154, 8);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(162, 8);
        output.WriteString(BasicAsset);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(234, 8);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(194, 9);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(138, 10);
        output.WriteString(Sector);
      }
      if (brand_ != null) {
        output.WriteRawTag(146, 10);
        output.WriteMessage(Brand);
      }
      if (Lot != 0) {
        output.WriteRawTag(200, 12);
        output.WriteInt32(Lot);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(BasicAssetSize);
      }
      if (klong_ != null) {
        output.WriteRawTag(234, 13);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(242, 13);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(250, 13);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(130, 14);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(138, 14);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(146, 14);
        output.WriteMessage(DshortMin);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 14);
        output.WriteMessage(MinPriceIncrement);
      }
      if (strikePrice_ != null) {
        output.WriteRawTag(138, 15);
        output.WriteMessage(StrikePrice);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(ExpirationDate);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(186, 19);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(194, 19);
        output.WriteMessage(LastTradeDate);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(138, 20);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(146, 20);
        output.WriteMessage(First1DayCandleDate);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(136, 25);
        output.WriteBool(ShortEnabledFlag);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(144, 25);
        output.WriteBool(ForIisFlag);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(152, 25);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(160, 25);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(168, 25);
        output.WriteBool(SellAvailableFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(176, 25);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(184, 25);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(192, 25);
        output.WriteBool(BlockedTcaFlag);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(200, 25);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (PositionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (BasicAssetPositionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicAssetPositionUid);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (Direction != global::Tinkoff.InvestApi.V1.OptionDirection.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (PaymentType != global::Tinkoff.InvestApi.V1.OptionPaymentType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PaymentType);
      }
      if (Style != global::Tinkoff.InvestApi.V1.OptionStyle.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Style);
      }
      if (SettlementType != global::Tinkoff.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SettlementType);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Currency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (SettlementCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettlementCurrency);
      }
      if (AssetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetType);
      }
      if (BasicAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BasicAsset);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (brand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (Lot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (basicAssetSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicAssetSize);
      }
      if (klong_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (strikePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StrikePrice);
      }
      if (expirationDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpirationDate);
      }
      if (firstTradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeDate);
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (ShortEnabledFlag != false) {
        size += 2 + 1;
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Option other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.BasicAssetPositionUid.Length != 0) {
        BasicAssetPositionUid = other.BasicAssetPositionUid;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.Direction != global::Tinkoff.InvestApi.V1.OptionDirection.Unspecified) {
        Direction = other.Direction;
      }
      if (other.PaymentType != global::Tinkoff.InvestApi.V1.OptionPaymentType.Unspecified) {
        PaymentType = other.PaymentType;
      }
      if (other.Style != global::Tinkoff.InvestApi.V1.OptionStyle.Unspecified) {
        Style = other.Style;
      }
      if (other.SettlementType != global::Tinkoff.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) {
        SettlementType = other.SettlementType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.SettlementCurrency.Length != 0) {
        SettlementCurrency = other.SettlementCurrency;
      }
      if (other.AssetType.Length != 0) {
        AssetType = other.AssetType;
      }
      if (other.BasicAsset.Length != 0) {
        BasicAsset = other.BasicAsset;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.InvestApi.V1.BrandData();
        }
        Brand.MergeFrom(other.Brand);
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.basicAssetSize_ != null) {
        if (basicAssetSize_ == null) {
          BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        BasicAssetSize.MergeFrom(other.BasicAssetSize);
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.strikePrice_ != null) {
        if (strikePrice_ == null) {
          StrikePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        StrikePrice.MergeFrom(other.StrikePrice);
      }
      if (other.expirationDate_ != null) {
        if (expirationDate_ == null) {
          ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationDate.MergeFrom(other.ExpirationDate);
      }
      if (other.firstTradeDate_ != null) {
        if (firstTradeDate_ == null) {
          FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FirstTradeDate.MergeFrom(other.FirstTradeDate);
      }
      if (other.lastTradeDate_ != null) {
        if (lastTradeDate_ == null) {
          LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastTradeDate.MergeFrom(other.LastTradeDate);
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            PositionUid = input.ReadString();
            break;
          }
          case 26: {
            Ticker = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
          case 168: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 248: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 328: {
            Direction = (global::Tinkoff.InvestApi.V1.OptionDirection) input.ReadEnum();
            break;
          }
          case 336: {
            PaymentType = (global::Tinkoff.InvestApi.V1.OptionPaymentType) input.ReadEnum();
            break;
          }
          case 344: {
            Style = (global::Tinkoff.InvestApi.V1.OptionStyle) input.ReadEnum();
            break;
          }
          case 352: {
            SettlementType = (global::Tinkoff.InvestApi.V1.OptionSettlementType) input.ReadEnum();
            break;
          }
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 890: {
            Currency = input.ReadString();
            break;
          }
          case 898: {
            SettlementCurrency = input.ReadString();
            break;
          }
          case 1050: {
            AssetType = input.ReadString();
            break;
          }
          case 1058: {
            BasicAsset = input.ReadString();
            break;
          }
          case 1130: {
            Exchange = input.ReadString();
            break;
          }
          case 1210: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 1218: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 1290: {
            Sector = input.ReadString();
            break;
          }
          case 1298: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
          case 1608: {
            Lot = input.ReadInt32();
            break;
          }
          case 1690: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 1770: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 1778: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 1786: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 1794: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 1802: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 1810: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 1850: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 1930: {
            if (strikePrice_ == null) {
              StrikePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(StrikePrice);
            break;
          }
          case 2410: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 2490: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 2498: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 2570: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 2578: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 3208: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 3216: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 3224: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 3232: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 3240: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 3248: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 3256: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 3264: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 3272: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            PositionUid = input.ReadString();
            break;
          }
          case 26: {
            Ticker = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
          case 168: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 248: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 328: {
            Direction = (global::Tinkoff.InvestApi.V1.OptionDirection) input.ReadEnum();
            break;
          }
          case 336: {
            PaymentType = (global::Tinkoff.InvestApi.V1.OptionPaymentType) input.ReadEnum();
            break;
          }
          case 344: {
            Style = (global::Tinkoff.InvestApi.V1.OptionStyle) input.ReadEnum();
            break;
          }
          case 352: {
            SettlementType = (global::Tinkoff.InvestApi.V1.OptionSettlementType) input.ReadEnum();
            break;
          }
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 890: {
            Currency = input.ReadString();
            break;
          }
          case 898: {
            SettlementCurrency = input.ReadString();
            break;
          }
          case 1050: {
            AssetType = input.ReadString();
            break;
          }
          case 1058: {
            BasicAsset = input.ReadString();
            break;
          }
          case 1130: {
            Exchange = input.ReadString();
            break;
          }
          case 1210: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 1218: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 1290: {
            Sector = input.ReadString();
            break;
          }
          case 1298: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
          case 1608: {
            Lot = input.ReadInt32();
            break;
          }
          case 1690: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 1770: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 1778: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 1786: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 1794: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 1802: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 1810: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 1850: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 1930: {
            if (strikePrice_ == null) {
              StrikePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(StrikePrice);
            break;
          }
          case 2410: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 2490: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 2498: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 2570: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 2578: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 3208: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 3216: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 3224: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 3232: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 3240: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 3248: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 3256: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 3264: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 3272: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по акции.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ShareResponse : pb::IMessage<ShareResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShareResponse> _parser = new pb::MessageParser<ShareResponse>(() => new ShareResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ShareResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse(ShareResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse Clone() {
      return new ShareResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Share instrument_;
    /// <summary>
    /// Информация об акции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Share Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ShareResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ShareResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ShareResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Share();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Share();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Share();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по акциям.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SharesResponse : pb::IMessage<SharesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SharesResponse> _parser = new pb::MessageParser<SharesResponse>(() => new SharesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SharesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse(SharesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse Clone() {
      return new SharesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Share> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Share.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Share> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Share>();
    /// <summary>
    ///Массив акций.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Share> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SharesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SharesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SharesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об облигации.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Bond : pb::IMessage<Bond>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bond> _parser = new pb::MessageParser<Bond>(() => new Bond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Bond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond(Bond other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      couponQuantityPerYear_ = other.couponQuantityPerYear_;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      initialNominal_ = other.initialNominal_ != null ? other.initialNominal_.Clone() : null;
      stateRegDate_ = other.stateRegDate_ != null ? other.stateRegDate_.Clone() : null;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      placementPrice_ = other.placementPrice_ != null ? other.placementPrice_.Clone() : null;
      aciValue_ = other.aciValue_ != null ? other.aciValue_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      issueKind_ = other.issueKind_;
      issueSize_ = other.issueSize_;
      issueSizePlan_ = other.issueSizePlan_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      floatingCouponFlag_ = other.floatingCouponFlag_;
      perpetualFlag_ = other.perpetualFlag_;
      amortizationFlag_ = other.amortizationFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      assetUid_ = other.assetUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      subordinatedFlag_ = other.subordinatedFlag_;
      liquidityFlag_ = other.liquidityFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      riskLevel_ = other.riskLevel_;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond Clone() {
      return new Bond(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://russianinvestments.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    /// Ставка риска начальной маржи для КПУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Tорговая площадка (секция биржи).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupon_quantity_per_year" field.</summary>
    public const int CouponQuantityPerYearFieldNumber = 17;
    private int couponQuantityPerYear_;
    /// <summary>
    ///Количество выплат по купонам в год.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CouponQuantityPerYear {
      get { return couponQuantityPerYear_; }
      set {
        couponQuantityPerYear_ = value;
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 18;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maturityDate_;
    /// <summary>
    ///Дата погашения облигации в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 19;
    private global::Tinkoff.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "initial_nominal" field.</summary>
    public const int InitialNominalFieldNumber = 20;
    private global::Tinkoff.InvestApi.V1.MoneyValue initialNominal_;
    /// <summary>
    ///Первоначальный номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue InitialNominal {
      get { return initialNominal_; }
      set {
        initialNominal_ = value;
      }
    }

    /// <summary>Field number for the "state_reg_date" field.</summary>
    public const int StateRegDateFieldNumber = 21;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stateRegDate_;
    /// <summary>
    ///Дата выпуска облигации в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StateRegDate {
      get { return stateRegDate_; }
      set {
        stateRegDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 22;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_price" field.</summary>
    public const int PlacementPriceFieldNumber = 23;
    private global::Tinkoff.InvestApi.V1.MoneyValue placementPrice_;
    /// <summary>
    ///Цена размещения.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue PlacementPrice {
      get { return placementPrice_; }
      set {
        placementPrice_ = value;
      }
    }

    /// <summary>Field number for the "aci_value" field.</summary>
    public const int AciValueFieldNumber = 24;
    private global::Tinkoff.InvestApi.V1.MoneyValue aciValue_;
    /// <summary>
    ///Значение НКД (накопленного купонного дохода) на дату.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue AciValue {
      get { return aciValue_; }
      set {
        aciValue_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 25;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 26;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 27;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 28;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска. Возможные значения: &lt;/br>**documentary** — документарная; &lt;/br>**non_documentary** — бездокументарная.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 29;
    private long issueSize_;
    /// <summary>
    ///Размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 30;
    private long issueSizePlan_;
    /// <summary>
    ///Плановый размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 31;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 32;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 33;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 34;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "floating_coupon_flag" field.</summary>
    public const int FloatingCouponFlagFieldNumber = 35;
    private bool floatingCouponFlag_;
    /// <summary>
    ///Признак облигации с плавающим купоном.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FloatingCouponFlag {
      get { return floatingCouponFlag_; }
      set {
        floatingCouponFlag_ = value;
      }
    }

    /// <summary>Field number for the "perpetual_flag" field.</summary>
    public const int PerpetualFlagFieldNumber = 36;
    private bool perpetualFlag_;
    /// <summary>
    ///Признак бессрочной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PerpetualFlag {
      get { return perpetualFlag_; }
      set {
        perpetualFlag_ = value;
      }
    }

    /// <summary>Field number for the "amortization_flag" field.</summary>
    public const int AmortizationFlagFieldNumber = 37;
    private bool amortizationFlag_;
    /// <summary>
    ///Признак облигации с амортизацией долга.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AmortizationFlag {
      get { return amortizationFlag_; }
      set {
        amortizationFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 38;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 39;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 40;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 41;
    private global::Tinkoff.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов. (биржа)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 42;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_uid" field.</summary>
    public const int AssetUidFieldNumber = 43;
    private string assetUid_ = "";
    /// <summary>
    ///Уникальный идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetUid {
      get { return assetUid_; }
      set {
        assetUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 51;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 52;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 53;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 54;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "subordinated_flag" field.</summary>
    public const int SubordinatedFlagFieldNumber = 55;
    private bool subordinatedFlag_;
    /// <summary>
    ///Признак субординированной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SubordinatedFlag {
      get { return subordinatedFlag_; }
      set {
        subordinatedFlag_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_flag" field.</summary>
    public const int LiquidityFlagFieldNumber = 56;
    private bool liquidityFlag_;
    /// <summary>
    ///Флаг достаточной ликвидности
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LiquidityFlag {
      get { return liquidityFlag_; }
      set {
        liquidityFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 61;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 62;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "risk_level" field.</summary>
    public const int RiskLevelFieldNumber = 63;
    private global::Tinkoff.InvestApi.V1.RiskLevel riskLevel_ = global::Tinkoff.InvestApi.V1.RiskLevel.Unspecified;
    /// <summary>
    ///Уровень риска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.RiskLevel RiskLevel {
      get { return riskLevel_; }
      set {
        riskLevel_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 64;
    private global::Tinkoff.InvestApi.V1.BrandData brand_;
    /// <summary>
    /// Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.BrandData Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Bond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Bond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (CouponQuantityPerYear != other.CouponQuantityPerYear) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (!object.Equals(InitialNominal, other.InitialNominal)) return false;
      if (!object.Equals(StateRegDate, other.StateRegDate)) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (!object.Equals(PlacementPrice, other.PlacementPrice)) return false;
      if (!object.Equals(AciValue, other.AciValue)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (IssueKind != other.IssueKind) return false;
      if (IssueSize != other.IssueSize) return false;
      if (IssueSizePlan != other.IssueSizePlan) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (FloatingCouponFlag != other.FloatingCouponFlag) return false;
      if (PerpetualFlag != other.PerpetualFlag) return false;
      if (AmortizationFlag != other.AmortizationFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (AssetUid != other.AssetUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (SubordinatedFlag != other.SubordinatedFlag) return false;
      if (LiquidityFlag != other.LiquidityFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (RiskLevel != other.RiskLevel) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (CouponQuantityPerYear != 0) hash ^= CouponQuantityPerYear.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (initialNominal_ != null) hash ^= InitialNominal.GetHashCode();
      if (stateRegDate_ != null) hash ^= StateRegDate.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (placementPrice_ != null) hash ^= PlacementPrice.GetHashCode();
      if (aciValue_ != null) hash ^= AciValue.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (IssueSize != 0L) hash ^= IssueSize.GetHashCode();
      if (IssueSizePlan != 0L) hash ^= IssueSizePlan.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (FloatingCouponFlag != false) hash ^= FloatingCouponFlag.GetHashCode();
      if (PerpetualFlag != false) hash ^= PerpetualFlag.GetHashCode();
      if (AmortizationFlag != false) hash ^= AmortizationFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (AssetUid.Length != 0) hash ^= AssetUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (SubordinatedFlag != false) hash ^= SubordinatedFlag.GetHashCode();
      if (LiquidityFlag != false) hash ^= LiquidityFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (RiskLevel != global::Tinkoff.InvestApi.V1.RiskLevel.Unspecified) hash ^= RiskLevel.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MaturityDate);
      }
      if (nominal_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Nominal);
      }
      if (initialNominal_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InitialNominal);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (aciValue_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Sector);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(IssueKind);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(SellAvailableFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(PerpetualFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(AmortizationFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(PositionUid);
      }
      if (AssetUid.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(AssetUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (SubordinatedFlag != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(SubordinatedFlag);
      }
      if (LiquidityFlag != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(LiquidityFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (RiskLevel != global::Tinkoff.InvestApi.V1.RiskLevel.Unspecified) {
        output.WriteRawTag(248, 3);
        output.WriteEnum((int) RiskLevel);
      }
      if (brand_ != null) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MaturityDate);
      }
      if (nominal_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Nominal);
      }
      if (initialNominal_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InitialNominal);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (aciValue_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Sector);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(IssueKind);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(SellAvailableFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(PerpetualFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(AmortizationFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(PositionUid);
      }
      if (AssetUid.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(AssetUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (SubordinatedFlag != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(SubordinatedFlag);
      }
      if (LiquidityFlag != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(LiquidityFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (RiskLevel != global::Tinkoff.InvestApi.V1.RiskLevel.Unspecified) {
        output.WriteRawTag(248, 3);
        output.WriteEnum((int) RiskLevel);
      }
      if (brand_ != null) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (initialNominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InitialNominal);
      }
      if (stateRegDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateRegDate);
      }
      if (placementDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (placementPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementPrice);
      }
      if (aciValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (IssueKind.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (IssueSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (FloatingCouponFlag != false) {
        size += 2 + 1;
      }
      if (PerpetualFlag != false) {
        size += 2 + 1;
      }
      if (AmortizationFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (AssetUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (SubordinatedFlag != false) {
        size += 2 + 1;
      }
      if (LiquidityFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (RiskLevel != global::Tinkoff.InvestApi.V1.RiskLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLevel);
      }
      if (brand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Bond other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.CouponQuantityPerYear != 0) {
        CouponQuantityPerYear = other.CouponQuantityPerYear;
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.initialNominal_ != null) {
        if (initialNominal_ == null) {
          InitialNominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        InitialNominal.MergeFrom(other.InitialNominal);
      }
      if (other.stateRegDate_ != null) {
        if (stateRegDate_ == null) {
          StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StateRegDate.MergeFrom(other.StateRegDate);
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.placementPrice_ != null) {
        if (placementPrice_ == null) {
          PlacementPrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        PlacementPrice.MergeFrom(other.PlacementPrice);
      }
      if (other.aciValue_ != null) {
        if (aciValue_ == null) {
          AciValue = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        AciValue.MergeFrom(other.AciValue);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.IssueSize != 0L) {
        IssueSize = other.IssueSize;
      }
      if (other.IssueSizePlan != 0L) {
        IssueSizePlan = other.IssueSizePlan;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.FloatingCouponFlag != false) {
        FloatingCouponFlag = other.FloatingCouponFlag;
      }
      if (other.PerpetualFlag != false) {
        PerpetualFlag = other.PerpetualFlag;
      }
      if (other.AmortizationFlag != false) {
        AmortizationFlag = other.AmortizationFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.AssetUid.Length != 0) {
        AssetUid = other.AssetUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.SubordinatedFlag != false) {
        SubordinatedFlag = other.SubordinatedFlag;
      }
      if (other.LiquidityFlag != false) {
        LiquidityFlag = other.LiquidityFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.RiskLevel != global::Tinkoff.InvestApi.V1.RiskLevel.Unspecified) {
        RiskLevel = other.RiskLevel;
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.InvestApi.V1.BrandData();
        }
        Brand.MergeFrom(other.Brand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 136: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 146: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 154: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 162: {
            if (initialNominal_ == null) {
              InitialNominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialNominal);
            break;
          }
          case 170: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 178: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 186: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 194: {
            if (aciValue_ == null) {
              AciValue = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(AciValue);
            break;
          }
          case 202: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 210: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 218: {
            Sector = input.ReadString();
            break;
          }
          case 226: {
            IssueKind = input.ReadString();
            break;
          }
          case 232: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 240: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 248: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 256: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 264: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 272: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 280: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 288: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 296: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 306: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 312: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 322: {
            Uid = input.ReadString();
            break;
          }
          case 328: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 338: {
            PositionUid = input.ReadString();
            break;
          }
          case 346: {
            AssetUid = input.ReadString();
            break;
          }
          case 408: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 416: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 424: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 432: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 440: {
            SubordinatedFlag = input.ReadBool();
            break;
          }
          case 448: {
            LiquidityFlag = input.ReadBool();
            break;
          }
          case 490: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 498: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 504: {
            RiskLevel = (global::Tinkoff.InvestApi.V1.RiskLevel) input.ReadEnum();
            break;
          }
          case 514: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 136: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 146: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 154: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 162: {
            if (initialNominal_ == null) {
              InitialNominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialNominal);
            break;
          }
          case 170: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 178: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 186: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 194: {
            if (aciValue_ == null) {
              AciValue = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(AciValue);
            break;
          }
          case 202: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 210: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 218: {
            Sector = input.ReadString();
            break;
          }
          case 226: {
            IssueKind = input.ReadString();
            break;
          }
          case 232: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 240: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 248: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 256: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 264: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 272: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 280: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 288: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 296: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 306: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 312: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 322: {
            Uid = input.ReadString();
            break;
          }
          case 328: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 338: {
            PositionUid = input.ReadString();
            break;
          }
          case 346: {
            AssetUid = input.ReadString();
            break;
          }
          case 408: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 416: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 424: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 432: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 440: {
            SubordinatedFlag = input.ReadBool();
            break;
          }
          case 448: {
            LiquidityFlag = input.ReadBool();
            break;
          }
          case 490: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 498: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 504: {
            RiskLevel = (global::Tinkoff.InvestApi.V1.RiskLevel) input.ReadEnum();
            break;
          }
          case 514: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации о валюте.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Currency : pb::IMessage<Currency>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Currency> _parser = new pb::MessageParser<Currency>(() => new Currency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Currency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency(Currency other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      isoCurrencyName_ = other.isoCurrencyName_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency Clone() {
      return new Currency(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://russianinvestments.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int Currency_FieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency_ {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР лонг.Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Tорговая площадка (секция биржи)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 17;
    private global::Tinkoff.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 18;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 19;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 20;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 21;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 22;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 23;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "iso_currency_name" field.</summary>
    public const int IsoCurrencyNameFieldNumber = 24;
    private string isoCurrencyName_ = "";
    /// <summary>
    ///Строковый ISO-код валюты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IsoCurrencyName {
      get { return isoCurrencyName_; }
      set {
        isoCurrencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 26;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 27;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 28;
    private global::Tinkoff.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов (биржа).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 29;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 41;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 52;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 53;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 54;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 60;
    private global::Tinkoff.InvestApi.V1.BrandData brand_;
    /// <summary>
    /// Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.BrandData Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Currency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Currency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency_ != other.Currency_) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (IsoCurrencyName != other.IsoCurrencyName) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency_.Length != 0) hash ^= Currency_.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (IsoCurrencyName.Length != 0) hash ^= IsoCurrencyName.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency_.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency_);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (nominal_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (IsoCurrencyName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (brand_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency_.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency_);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (nominal_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (IsoCurrencyName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (brand_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency_);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (IsoCurrencyName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (brand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Currency other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency_.Length != 0) {
        Currency_ = other.Currency_;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.IsoCurrencyName.Length != 0) {
        IsoCurrencyName = other.IsoCurrencyName;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.InvestApi.V1.BrandData();
        }
        Brand.MergeFrom(other.Brand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency_ = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 146: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 154: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 160: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 168: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 176: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 184: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 194: {
            IsoCurrencyName = input.ReadString();
            break;
          }
          case 202: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 208: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 218: {
            Uid = input.ReadString();
            break;
          }
          case 224: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 234: {
            PositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 416: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 424: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 432: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 482: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency_ = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 146: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 154: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 160: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 168: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 176: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 184: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 194: {
            IsoCurrencyName = input.ReadString();
            break;
          }
          case 202: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 208: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 218: {
            Uid = input.ReadString();
            break;
          }
          case 224: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 234: {
            PositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 416: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 424: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 432: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 482: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об инвестиционном фонде.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Etf : pb::IMessage<Etf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Etf> _parser = new pb::MessageParser<Etf>(() => new Etf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Etf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf(Etf other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      fixedCommission_ = other.fixedCommission_ != null ? other.fixedCommission_.Clone() : null;
      focusType_ = other.focusType_;
      releasedDate_ = other.releasedDate_ != null ? other.releasedDate_.Clone() : null;
      numShares_ = other.numShares_ != null ? other.numShares_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      rebalancingFreq_ = other.rebalancingFreq_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      assetUid_ = other.assetUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      liquidityFlag_ = other.liquidityFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf Clone() {
      return new Etf(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://russianinvestments.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР лонг.Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Tорговая площадка (секция биржи).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fixed_commission" field.</summary>
    public const int FixedCommissionFieldNumber = 17;
    private global::Tinkoff.InvestApi.V1.Quotation fixedCommission_;
    /// <summary>
    ///Размер фиксированной комиссии фонда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation FixedCommission {
      get { return fixedCommission_; }
      set {
        fixedCommission_ = value;
      }
    }

    /// <summary>Field number for the "focus_type" field.</summary>
    public const int FocusTypeFieldNumber = 18;
    private string focusType_ = "";
    /// <summary>
    ///Возможные значения: &lt;/br>**equity** — акции;&lt;/br>**fixed_income** — облигации;&lt;/br>**mixed_allocation** — смешанный;&lt;/br>**money_market** — денежный рынок;&lt;/br>**real_estate** — недвижимость;&lt;/br>**commodity** — товары;&lt;/br>**specialty** — специальный;&lt;/br>**private_equity** — private equity;&lt;/br>**alternative_investment** — альтернативные инвестиции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FocusType {
      get { return focusType_; }
      set {
        focusType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "released_date" field.</summary>
    public const int ReleasedDateFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp releasedDate_;
    /// <summary>
    ///Дата выпуска в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReleasedDate {
      get { return releasedDate_; }
      set {
        releasedDate_ = value;
      }
    }

    /// <summary>Field number for the "num_shares" field.</summary>
    public const int NumSharesFieldNumber = 20;
    private global::Tinkoff.InvestApi.V1.Quotation numShares_;
    /// <summary>
    ///Количество паев фонда в обращении.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation NumShares {
      get { return numShares_; }
      set {
        numShares_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 21;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 22;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 23;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rebalancing_freq" field.</summary>
    public const int RebalancingFreqFieldNumber = 24;
    private string rebalancingFreq_ = "";
    /// <summary>
    ///Частота ребалансировки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RebalancingFreq {
      get { return rebalancingFreq_; }
      set {
        rebalancingFreq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 29;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 30;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 31;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 32;
    private global::Tinkoff.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов (биржа).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 33;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_uid" field.</summary>
    public const int AssetUidFieldNumber = 34;
    private string assetUid_ = "";
    /// <summary>
    ///Уникальный идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetUid {
      get { return assetUid_; }
      set {
        assetUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 41;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 42;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 43;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 44;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_flag" field.</summary>
    public const int LiquidityFlagFieldNumber = 45;
    private bool liquidityFlag_;
    /// <summary>
    ///Флаг достаточной ликвидности
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LiquidityFlag {
      get { return liquidityFlag_; }
      set {
        liquidityFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 60;
    private global::Tinkoff.InvestApi.V1.BrandData brand_;
    /// <summary>
    /// Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.BrandData Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Etf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Etf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(FixedCommission, other.FixedCommission)) return false;
      if (FocusType != other.FocusType) return false;
      if (!object.Equals(ReleasedDate, other.ReleasedDate)) return false;
      if (!object.Equals(NumShares, other.NumShares)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (RebalancingFreq != other.RebalancingFreq) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (AssetUid != other.AssetUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (LiquidityFlag != other.LiquidityFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (fixedCommission_ != null) hash ^= FixedCommission.GetHashCode();
      if (FocusType.Length != 0) hash ^= FocusType.GetHashCode();
      if (releasedDate_ != null) hash ^= ReleasedDate.GetHashCode();
      if (numShares_ != null) hash ^= NumShares.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (RebalancingFreq.Length != 0) hash ^= RebalancingFreq.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (AssetUid.Length != 0) hash ^= AssetUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (LiquidityFlag != false) hash ^= LiquidityFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FixedCommission);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FocusType);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (numShares_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PositionUid);
      }
      if (AssetUid.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(AssetUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (LiquidityFlag != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(LiquidityFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (brand_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FixedCommission);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FocusType);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (numShares_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PositionUid);
      }
      if (AssetUid.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(AssetUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (LiquidityFlag != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(LiquidityFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (brand_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (fixedCommission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FixedCommission);
      }
      if (FocusType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FocusType);
      }
      if (releasedDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReleasedDate);
      }
      if (numShares_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (AssetUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (LiquidityFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (brand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Etf other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.fixedCommission_ != null) {
        if (fixedCommission_ == null) {
          FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        FixedCommission.MergeFrom(other.FixedCommission);
      }
      if (other.FocusType.Length != 0) {
        FocusType = other.FocusType;
      }
      if (other.releasedDate_ != null) {
        if (releasedDate_ == null) {
          ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReleasedDate.MergeFrom(other.ReleasedDate);
      }
      if (other.numShares_ != null) {
        if (numShares_ == null) {
          NumShares = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        NumShares.MergeFrom(other.NumShares);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.RebalancingFreq.Length != 0) {
        RebalancingFreq = other.RebalancingFreq;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.AssetUid.Length != 0) {
        AssetUid = other.AssetUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.LiquidityFlag != false) {
        LiquidityFlag = other.LiquidityFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.InvestApi.V1.BrandData();
        }
        Brand.MergeFrom(other.Brand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 146: {
            FocusType = input.ReadString();
            break;
          }
          case 154: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 162: {
            if (numShares_ == null) {
              NumShares = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShares);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 250: {
            Uid = input.ReadString();
            break;
          }
          case 256: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 266: {
            PositionUid = input.ReadString();
            break;
          }
          case 274: {
            AssetUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 336: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 344: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 352: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 360: {
            LiquidityFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 482: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 146: {
            FocusType = input.ReadString();
            break;
          }
          case 154: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 162: {
            if (numShares_ == null) {
              NumShares = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShares);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 250: {
            Uid = input.ReadString();
            break;
          }
          case 256: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 266: {
            PositionUid = input.ReadString();
            break;
          }
          case 274: {
            AssetUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 336: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 344: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 352: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 360: {
            LiquidityFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 482: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации о фьючерсе.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Future : pb::IMessage<Future>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Future> _parser = new pb::MessageParser<Future>(() => new Future());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Future> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future(Future other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      firstTradeDate_ = other.firstTradeDate_ != null ? other.firstTradeDate_.Clone() : null;
      lastTradeDate_ = other.lastTradeDate_ != null ? other.lastTradeDate_.Clone() : null;
      futuresType_ = other.futuresType_;
      assetType_ = other.assetType_;
      basicAsset_ = other.basicAsset_;
      basicAssetSize_ = other.basicAssetSize_ != null ? other.basicAssetSize_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      expirationDate_ = other.expirationDate_ != null ? other.expirationDate_.Clone() : null;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      basicAssetPositionUid_ = other.basicAssetPositionUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      initialMarginOnBuy_ = other.initialMarginOnBuy_ != null ? other.initialMarginOnBuy_.Clone() : null;
      initialMarginOnSell_ = other.initialMarginOnSell_ != null ? other.initialMarginOnSell_.Clone() : null;
      minPriceIncrementAmount_ = other.minPriceIncrementAmount_ != null ? other.minPriceIncrementAmount_.Clone() : null;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future Clone() {
      return new Future(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 4;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://russianinvestments.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 5;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 6;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР лонг.Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 12;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 13;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 14;
    private string exchange_ = "";
    /// <summary>
    ///Tорговая площадка (секция биржи).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_trade_date" field.</summary>
    public const int FirstTradeDateFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp firstTradeDate_;
    /// <summary>
    ///Дата начала обращения контракта в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FirstTradeDate {
      get { return firstTradeDate_; }
      set {
        firstTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_date" field.</summary>
    public const int LastTradeDateFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastTradeDate_;
    /// <summary>
    ///Дата в часовом поясе UTC, до которой возможно проведение операций с фьючерсом.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastTradeDate {
      get { return lastTradeDate_; }
      set {
        lastTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "futures_type" field.</summary>
    public const int FuturesTypeFieldNumber = 17;
    private string futuresType_ = "";
    /// <summary>
    ///Тип фьючерса. Возможные значения: &lt;/br>**physical_delivery** — физические поставки; &lt;/br>**cash_settlement** — денежный эквивалент.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FuturesType {
      get { return futuresType_; }
      set {
        futuresType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 18;
    private string assetType_ = "";
    /// <summary>
    ///Тип актива. Возможные значения: &lt;/br>**commodity** — товар; &lt;/br>**currency** — валюта; &lt;/br>**security** — ценная бумага; &lt;/br>**index** — индекс.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetType {
      get { return assetType_; }
      set {
        assetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset" field.</summary>
    public const int BasicAssetFieldNumber = 19;
    private string basicAsset_ = "";
    /// <summary>
    ///Основной актив.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAsset {
      get { return basicAsset_; }
      set {
        basicAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset_size" field.</summary>
    public const int BasicAssetSizeFieldNumber = 20;
    private global::Tinkoff.InvestApi.V1.Quotation basicAssetSize_;
    /// <summary>
    ///Размер основного актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation BasicAssetSize {
      get { return basicAssetSize_; }
      set {
        basicAssetSize_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 21;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 22;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 23;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration_date" field.</summary>
    public const int ExpirationDateFieldNumber = 24;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationDate_;
    /// <summary>
    ///Дата истечения срока в часов поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationDate {
      get { return expirationDate_; }
      set {
        expirationDate_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 29;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 30;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 31;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 32;
    private global::Tinkoff.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов (биржа).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 33;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset_position_uid" field.</summary>
    public const int BasicAssetPositionUidFieldNumber = 34;
    private string basicAssetPositionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции основного инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAssetPositionUid {
      get { return basicAssetPositionUid_; }
      set {
        basicAssetPositionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 41;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 42;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 43;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 44;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "initial_margin_on_buy" field.</summary>
    public const int InitialMarginOnBuyFieldNumber = 61;
    private global::Tinkoff.InvestApi.V1.MoneyValue initialMarginOnBuy_;
    /// <summary>
    ///Гарантийное обеспечение при покупке.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue InitialMarginOnBuy {
      get { return initialMarginOnBuy_; }
      set {
        initialMarginOnBuy_ = value;
      }
    }

    /// <summary>Field number for the "initial_margin_on_sell" field.</summary>
    public const int InitialMarginOnSellFieldNumber = 62;
    private global::Tinkoff.InvestApi.V1.MoneyValue initialMarginOnSell_;
    /// <summary>
    ///Гарантийное обеспечение при продаже.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue InitialMarginOnSell {
      get { return initialMarginOnSell_; }
      set {
        initialMarginOnSell_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment_amount" field.</summary>
    public const int MinPriceIncrementAmountFieldNumber = 63;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrementAmount_;
    /// <summary>
    ///Стоимость шага цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrementAmount {
      get { return minPriceIncrementAmount_; }
      set {
        minPriceIncrementAmount_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 64;
    private global::Tinkoff.InvestApi.V1.BrandData brand_;
    /// <summary>
    /// Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.BrandData Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Future);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Future other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(FirstTradeDate, other.FirstTradeDate)) return false;
      if (!object.Equals(LastTradeDate, other.LastTradeDate)) return false;
      if (FuturesType != other.FuturesType) return false;
      if (AssetType != other.AssetType) return false;
      if (BasicAsset != other.BasicAsset) return false;
      if (!object.Equals(BasicAssetSize, other.BasicAssetSize)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (!object.Equals(ExpirationDate, other.ExpirationDate)) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (BasicAssetPositionUid != other.BasicAssetPositionUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (!object.Equals(InitialMarginOnBuy, other.InitialMarginOnBuy)) return false;
      if (!object.Equals(InitialMarginOnSell, other.InitialMarginOnSell)) return false;
      if (!object.Equals(MinPriceIncrementAmount, other.MinPriceIncrementAmount)) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (firstTradeDate_ != null) hash ^= FirstTradeDate.GetHashCode();
      if (lastTradeDate_ != null) hash ^= LastTradeDate.GetHashCode();
      if (FuturesType.Length != 0) hash ^= FuturesType.GetHashCode();
      if (AssetType.Length != 0) hash ^= AssetType.GetHashCode();
      if (BasicAsset.Length != 0) hash ^= BasicAsset.GetHashCode();
      if (basicAssetSize_ != null) hash ^= BasicAssetSize.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (expirationDate_ != null) hash ^= ExpirationDate.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (BasicAssetPositionUid.Length != 0) hash ^= BasicAssetPositionUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (initialMarginOnBuy_ != null) hash ^= InitialMarginOnBuy.GetHashCode();
      if (initialMarginOnSell_ != null) hash ^= InitialMarginOnSell.GetHashCode();
      if (minPriceIncrementAmount_ != null) hash ^= MinPriceIncrementAmount.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Lot != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Exchange);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FuturesType);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PositionUid);
      }
      if (BasicAssetPositionUid.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(BasicAssetPositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (initialMarginOnBuy_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(InitialMarginOnSell);
      }
      if (minPriceIncrementAmount_ != null) {
        output.WriteRawTag(250, 3);
        output.WriteMessage(MinPriceIncrementAmount);
      }
      if (brand_ != null) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Lot != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Exchange);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FuturesType);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PositionUid);
      }
      if (BasicAssetPositionUid.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(BasicAssetPositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (initialMarginOnBuy_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(InitialMarginOnSell);
      }
      if (minPriceIncrementAmount_ != null) {
        output.WriteRawTag(250, 3);
        output.WriteMessage(MinPriceIncrementAmount);
      }
      if (brand_ != null) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (firstTradeDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FuturesType);
      }
      if (AssetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetType);
      }
      if (BasicAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (expirationDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (BasicAssetPositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BasicAssetPositionUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (initialMarginOnBuy_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InitialMarginOnSell);
      }
      if (minPriceIncrementAmount_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrementAmount);
      }
      if (brand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Future other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.firstTradeDate_ != null) {
        if (firstTradeDate_ == null) {
          FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FirstTradeDate.MergeFrom(other.FirstTradeDate);
      }
      if (other.lastTradeDate_ != null) {
        if (lastTradeDate_ == null) {
          LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastTradeDate.MergeFrom(other.LastTradeDate);
      }
      if (other.FuturesType.Length != 0) {
        FuturesType = other.FuturesType;
      }
      if (other.AssetType.Length != 0) {
        AssetType = other.AssetType;
      }
      if (other.BasicAsset.Length != 0) {
        BasicAsset = other.BasicAsset;
      }
      if (other.basicAssetSize_ != null) {
        if (basicAssetSize_ == null) {
          BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        BasicAssetSize.MergeFrom(other.BasicAssetSize);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.expirationDate_ != null) {
        if (expirationDate_ == null) {
          ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationDate.MergeFrom(other.ExpirationDate);
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.BasicAssetPositionUid.Length != 0) {
        BasicAssetPositionUid = other.BasicAssetPositionUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.initialMarginOnBuy_ != null) {
        if (initialMarginOnBuy_ == null) {
          InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        InitialMarginOnBuy.MergeFrom(other.InitialMarginOnBuy);
      }
      if (other.initialMarginOnSell_ != null) {
        if (initialMarginOnSell_ == null) {
          InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        InitialMarginOnSell.MergeFrom(other.InitialMarginOnSell);
      }
      if (other.minPriceIncrementAmount_ != null) {
        if (minPriceIncrementAmount_ == null) {
          MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrementAmount.MergeFrom(other.MinPriceIncrementAmount);
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.InvestApi.V1.BrandData();
        }
        Brand.MergeFrom(other.Brand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 32: {
            Lot = input.ReadInt32();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 50: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 58: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 66: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 74: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 82: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 90: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 96: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            Exchange = input.ReadString();
            break;
          }
          case 122: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 130: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 138: {
            FuturesType = input.ReadString();
            break;
          }
          case 146: {
            AssetType = input.ReadString();
            break;
          }
          case 154: {
            BasicAsset = input.ReadString();
            break;
          }
          case 162: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 250: {
            Uid = input.ReadString();
            break;
          }
          case 256: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 266: {
            PositionUid = input.ReadString();
            break;
          }
          case 274: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 336: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 344: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 352: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 490: {
            if (initialMarginOnBuy_ == null) {
              InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnBuy);
            break;
          }
          case 498: {
            if (initialMarginOnSell_ == null) {
              InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnSell);
            break;
          }
          case 506: {
            if (minPriceIncrementAmount_ == null) {
              MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrementAmount);
            break;
          }
          case 514: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 32: {
            Lot = input.ReadInt32();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 50: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 58: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 66: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 74: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 82: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 90: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 96: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            Exchange = input.ReadString();
            break;
          }
          case 122: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 130: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 138: {
            FuturesType = input.ReadString();
            break;
          }
          case 146: {
            AssetType = input.ReadString();
            break;
          }
          case 154: {
            BasicAsset = input.ReadString();
            break;
          }
          case 162: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 250: {
            Uid = input.ReadString();
            break;
          }
          case 256: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 266: {
            PositionUid = input.ReadString();
            break;
          }
          case 274: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 336: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 344: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 352: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 490: {
            if (initialMarginOnBuy_ == null) {
              InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnBuy);
            break;
          }
          case 498: {
            if (initialMarginOnSell_ == null) {
              InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnSell);
            break;
          }
          case 506: {
            if (minPriceIncrementAmount_ == null) {
              MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrementAmount);
            break;
          }
          case 514: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об акции.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Share : pb::IMessage<Share>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Share> _parser = new pb::MessageParser<Share>(() => new Share());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Share> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share(Share other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      ipoDate_ = other.ipoDate_ != null ? other.ipoDate_.Clone() : null;
      issueSize_ = other.issueSize_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      issueSizePlan_ = other.issueSizePlan_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      divYieldFlag_ = other.divYieldFlag_;
      shareType_ = other.shareType_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      assetUid_ = other.assetUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      liquidityFlag_ = other.liquidityFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share Clone() {
      return new Share(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://russianinvestments.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР лонг.Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Tорговая площадка (секция биржи).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipo_date" field.</summary>
    public const int IpoDateFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ipoDate_;
    /// <summary>
    ///Дата IPO акции в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IpoDate {
      get { return ipoDate_; }
      set {
        ipoDate_ = value;
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 18;
    private long issueSize_;
    /// <summary>
    ///Размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 19;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 20;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 21;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 22;
    private long issueSizePlan_;
    /// <summary>
    ///Плановый размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 23;
    private global::Tinkoff.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "div_yield_flag" field.</summary>
    public const int DivYieldFlagFieldNumber = 29;
    private bool divYieldFlag_;
    /// <summary>
    ///Признак наличия дивидендной доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivYieldFlag {
      get { return divYieldFlag_; }
      set {
        divYieldFlag_ = value;
      }
    }

    /// <summary>Field number for the "share_type" field.</summary>
    public const int ShareTypeFieldNumber = 30;
    private global::Tinkoff.InvestApi.V1.ShareType shareType_ = global::Tinkoff.InvestApi.V1.ShareType.Unspecified;
    /// <summary>
    ///Тип акции. Возможные значения: [ShareType](https://russianinvestments.github.io/investAPI/instruments#sharetype)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.ShareType ShareType {
      get { return shareType_; }
      set {
        shareType_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 31;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 32;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 33;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 34;
    private global::Tinkoff.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов (биржа).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 35;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_uid" field.</summary>
    public const int AssetUidFieldNumber = 36;
    private string assetUid_ = "";
    /// <summary>
    ///Уникальный идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetUid {
      get { return assetUid_; }
      set {
        assetUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 46;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 47;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 48;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 49;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_flag" field.</summary>
    public const int LiquidityFlagFieldNumber = 50;
    private bool liquidityFlag_;
    /// <summary>
    ///Флаг достаточной ликвидности
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LiquidityFlag {
      get { return liquidityFlag_; }
      set {
        liquidityFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 60;
    private global::Tinkoff.InvestApi.V1.BrandData brand_;
    /// <summary>
    /// Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.BrandData Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Share);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Share other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(IpoDate, other.IpoDate)) return false;
      if (IssueSize != other.IssueSize) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (IssueSizePlan != other.IssueSizePlan) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (DivYieldFlag != other.DivYieldFlag) return false;
      if (ShareType != other.ShareType) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (AssetUid != other.AssetUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (LiquidityFlag != other.LiquidityFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (ipoDate_ != null) hash ^= IpoDate.GetHashCode();
      if (IssueSize != 0L) hash ^= IssueSize.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (IssueSizePlan != 0L) hash ^= IssueSizePlan.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (DivYieldFlag != false) hash ^= DivYieldFlag.GetHashCode();
      if (ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) hash ^= ShareType.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (AssetUid.Length != 0) hash ^= AssetUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (LiquidityFlag != false) hash ^= LiquidityFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(IpoDate);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Sector);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (nominal_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Nominal);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(PositionUid);
      }
      if (AssetUid.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(AssetUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(136, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (LiquidityFlag != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(LiquidityFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (brand_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(IpoDate);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Sector);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (nominal_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Nominal);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(PositionUid);
      }
      if (AssetUid.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(AssetUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(136, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (LiquidityFlag != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(LiquidityFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (brand_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (ipoDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IpoDate);
      }
      if (IssueSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (IssueSizePlan != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSizePlan);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (DivYieldFlag != false) {
        size += 2 + 1;
      }
      if (ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (AssetUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (LiquidityFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (brand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Share other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.ipoDate_ != null) {
        if (ipoDate_ == null) {
          IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IpoDate.MergeFrom(other.IpoDate);
      }
      if (other.IssueSize != 0L) {
        IssueSize = other.IssueSize;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.IssueSizePlan != 0L) {
        IssueSizePlan = other.IssueSizePlan;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.DivYieldFlag != false) {
        DivYieldFlag = other.DivYieldFlag;
      }
      if (other.ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        ShareType = other.ShareType;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.AssetUid.Length != 0) {
        AssetUid = other.AssetUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.LiquidityFlag != false) {
        LiquidityFlag = other.LiquidityFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.InvestApi.V1.BrandData();
        }
        Brand.MergeFrom(other.Brand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 144: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 154: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 162: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 170: {
            Sector = input.ReadString();
            break;
          }
          case 176: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 186: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 232: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 240: {
            ShareType = (global::Tinkoff.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 250: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 256: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 266: {
            Uid = input.ReadString();
            break;
          }
          case 272: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 282: {
            PositionUid = input.ReadString();
            break;
          }
          case 290: {
            AssetUid = input.ReadString();
            break;
          }
          case 368: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 376: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 384: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 392: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 400: {
            LiquidityFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 482: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 144: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 154: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 162: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 170: {
            Sector = input.ReadString();
            break;
          }
          case 176: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 186: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 232: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 240: {
            ShareType = (global::Tinkoff.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 250: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 256: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 266: {
            Uid = input.ReadString();
            break;
          }
          case 272: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 282: {
            PositionUid = input.ReadString();
            break;
          }
          case 290: {
            AssetUid = input.ReadString();
            break;
          }
          case 368: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 376: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 384: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 392: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 400: {
            LiquidityFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 482: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос НКД по облигации
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetAccruedInterestsRequest : pb::IMessage<GetAccruedInterestsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccruedInterestsRequest> _parser = new pb::MessageParser<GetAccruedInterestsRequest>(() => new GetAccruedInterestsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAccruedInterestsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest(GetAccruedInterestsRequest other) : this() {
      figi_ = other.figi_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      instrumentId_ = other.instrumentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest Clone() {
      return new GetAccruedInterestsRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 4;
    private string instrumentId_ = "";
    /// <summary>
    ///Идентификатор инструмента Figi или instrument_uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAccruedInterestsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAccruedInterestsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (InstrumentId != other.InstrumentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAccruedInterestsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///НКД облигации
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetAccruedInterestsResponse : pb::IMessage<GetAccruedInterestsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccruedInterestsResponse> _parser = new pb::MessageParser<GetAccruedInterestsResponse>(() => new GetAccruedInterestsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAccruedInterestsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse(GetAccruedInterestsResponse other) : this() {
      accruedInterests_ = other.accruedInterests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse Clone() {
      return new GetAccruedInterestsResponse(this);
    }

    /// <summary>Field number for the "accrued_interests" field.</summary>
    public const int AccruedInterestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.AccruedInterest> _repeated_accruedInterests_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.AccruedInterest.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AccruedInterest> accruedInterests_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AccruedInterest>();
    /// <summary>
    ///Массив операций начисления купонов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AccruedInterest> AccruedInterests {
      get { return accruedInterests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAccruedInterestsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAccruedInterestsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accruedInterests_.Equals(other.accruedInterests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accruedInterests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accruedInterests_.WriteTo(output, _repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accruedInterests_.WriteTo(ref output, _repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += accruedInterests_.CalculateSize(_repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAccruedInterestsResponse other) {
      if (other == null) {
        return;
      }
      accruedInterests_.Add(other.accruedInterests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accruedInterests_.AddEntriesFrom(input, _repeated_accruedInterests_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            accruedInterests_.AddEntriesFrom(ref input, _repeated_accruedInterests_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Операция начисления купонов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AccruedInterest : pb::IMessage<AccruedInterest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccruedInterest> _parser = new pb::MessageParser<AccruedInterest>(() => new AccruedInterest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AccruedInterest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest(AccruedInterest other) : this() {
      date_ = other.date_ != null ? other.date_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      valuePercent_ = other.valuePercent_ != null ? other.valuePercent_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest Clone() {
      return new AccruedInterest(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    /// <summary>
    ///Дата и время выплаты в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.Quotation value_;
    /// <summary>
    ///Величина выплаты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "value_percent" field.</summary>
    public const int ValuePercentFieldNumber = 3;
    private global::Tinkoff.InvestApi.V1.Quotation valuePercent_;
    /// <summary>
    ///Величина выплаты в процентах от номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation ValuePercent {
      get { return valuePercent_; }
      set {
        valuePercent_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 4;
    private global::Tinkoff.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AccruedInterest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AccruedInterest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(ValuePercent, other.ValuePercent)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (date_ != null) hash ^= Date.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (valuePercent_ != null) hash ^= ValuePercent.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (valuePercent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValuePercent);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (valuePercent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValuePercent);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (valuePercent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValuePercent);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AccruedInterest other) {
      if (other == null) {
        return;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.valuePercent_ != null) {
        if (valuePercent_ == null) {
          ValuePercent = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        ValuePercent.MergeFrom(other.ValuePercent);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            if (valuePercent_ == null) {
              ValuePercent = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ValuePercent);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            if (valuePercent_ == null) {
              ValuePercent = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ValuePercent);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос информации о фьючерсе
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetFuturesMarginRequest : pb::IMessage<GetFuturesMarginRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFuturesMarginRequest> _parser = new pb::MessageParser<GetFuturesMarginRequest>(() => new GetFuturesMarginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFuturesMarginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest(GetFuturesMarginRequest other) : this() {
      figi_ = other.figi_;
      instrumentId_ = other.instrumentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest Clone() {
      return new GetFuturesMarginRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    /// Идентификатор инструмента.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 4;
    private string instrumentId_ = "";
    /// <summary>
    ///Идентификатор инструмента Figi или instrument_uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFuturesMarginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFuturesMarginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (InstrumentId != other.InstrumentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFuturesMarginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсу
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetFuturesMarginResponse : pb::IMessage<GetFuturesMarginResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFuturesMarginResponse> _parser = new pb::MessageParser<GetFuturesMarginResponse>(() => new GetFuturesMarginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFuturesMarginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse(GetFuturesMarginResponse other) : this() {
      initialMarginOnBuy_ = other.initialMarginOnBuy_ != null ? other.initialMarginOnBuy_.Clone() : null;
      initialMarginOnSell_ = other.initialMarginOnSell_ != null ? other.initialMarginOnSell_.Clone() : null;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      minPriceIncrementAmount_ = other.minPriceIncrementAmount_ != null ? other.minPriceIncrementAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse Clone() {
      return new GetFuturesMarginResponse(this);
    }

    /// <summary>Field number for the "initial_margin_on_buy" field.</summary>
    public const int InitialMarginOnBuyFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.MoneyValue initialMarginOnBuy_;
    /// <summary>
    ///Гарантийное обеспечение при покупке.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue InitialMarginOnBuy {
      get { return initialMarginOnBuy_; }
      set {
        initialMarginOnBuy_ = value;
      }
    }

    /// <summary>Field number for the "initial_margin_on_sell" field.</summary>
    public const int InitialMarginOnSellFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.MoneyValue initialMarginOnSell_;
    /// <summary>
    ///Гарантийное обеспечение при продаже.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue InitialMarginOnSell {
      get { return initialMarginOnSell_; }
      set {
        initialMarginOnSell_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 3;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment_amount" field.</summary>
    public const int MinPriceIncrementAmountFieldNumber = 4;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrementAmount_;
    /// <summary>
    ///Стоимость шага цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrementAmount {
      get { return minPriceIncrementAmount_; }
      set {
        minPriceIncrementAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFuturesMarginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFuturesMarginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitialMarginOnBuy, other.InitialMarginOnBuy)) return false;
      if (!object.Equals(InitialMarginOnSell, other.InitialMarginOnSell)) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (!object.Equals(MinPriceIncrementAmount, other.MinPriceIncrementAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (initialMarginOnBuy_ != null) hash ^= InitialMarginOnBuy.GetHashCode();
      if (initialMarginOnSell_ != null) hash ^= InitialMarginOnSell.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (minPriceIncrementAmount_ != null) hash ^= MinPriceIncrementAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (initialMarginOnBuy_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (initialMarginOnBuy_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (initialMarginOnBuy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFuturesMarginResponse other) {
      if (other == null) {
        return;
      }
      if (other.initialMarginOnBuy_ != null) {
        if (initialMarginOnBuy_ == null) {
          InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        InitialMarginOnBuy.MergeFrom(other.InitialMarginOnBuy);
      }
      if (other.initialMarginOnSell_ != null) {
        if (initialMarginOnSell_ == null) {
          InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        InitialMarginOnSell.MergeFrom(other.InitialMarginOnSell);
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.minPriceIncrementAmount_ != null) {
        if (minPriceIncrementAmount_ == null) {
          MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrementAmount.MergeFrom(other.MinPriceIncrementAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (initialMarginOnBuy_ == null) {
              InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnBuy);
            break;
          }
          case 18: {
            if (initialMarginOnSell_ == null) {
              InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnSell);
            break;
          }
          case 26: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 34: {
            if (minPriceIncrementAmount_ == null) {
              MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrementAmount);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (initialMarginOnBuy_ == null) {
              InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnBuy);
            break;
          }
          case 18: {
            if (initialMarginOnSell_ == null) {
              InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnSell);
            break;
          }
          case 26: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 34: {
            if (minPriceIncrementAmount_ == null) {
              MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrementAmount);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по инструменту.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentResponse : pb::IMessage<InstrumentResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentResponse> _parser = new pb::MessageParser<InstrumentResponse>(() => new InstrumentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse(InstrumentResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse Clone() {
      return new InstrumentResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Instrument instrument_;
    /// <summary>
    /// Основная информация об инструменте.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Instrument Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Instrument();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Instrument();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Instrument();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи основной информации об инструменте.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Instrument : pb::IMessage<Instrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Instrument> _parser = new pb::MessageParser<Instrument>(() => new Instrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Instrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument(Instrument other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      instrumentType_ = other.instrumentType_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      assetUid_ = other.assetUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      instrumentKind_ = other.instrumentKind_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument Clone() {
      return new Instrument(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://russianinvestments.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР). 1 – клиент с повышенным уровнем риска (КПУР)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР лонг.Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска начальной маржи для КСУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи для КПУР шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 15;
    private string exchange_ = "";
    /// <summary>
    ///Tорговая площадка (секция биржи).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 16;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 17;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 18;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 19;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 20;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 21;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 22;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 23;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 24;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 25;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 26;
    private global::Tinkoff.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов (биржа).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 27;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_uid" field.</summary>
    public const int AssetUidFieldNumber = 28;
    private string assetUid_ = "";
    /// <summary>
    ///Уникальный идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetUid {
      get { return assetUid_; }
      set {
        assetUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 36;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 37;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 38;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 39;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 40;
    private global::Tinkoff.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 60;
    private global::Tinkoff.InvestApi.V1.BrandData brand_;
    /// <summary>
    /// Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.BrandData Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Instrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Instrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (AssetUid != other.AssetUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (AssetUid.Length != 0) hash ^= AssetUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(PositionUid);
      }
      if (AssetUid.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AssetUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) InstrumentKind);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (brand_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(PositionUid);
      }
      if (AssetUid.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AssetUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) InstrumentKind);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (brand_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Brand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (AssetUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (brand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Instrument other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.AssetUid.Length != 0) {
        AssetUid = other.AssetUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.InvestApi.V1.BrandData();
        }
        Brand.MergeFrom(other.Brand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Exchange = input.ReadString();
            break;
          }
          case 130: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 138: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 146: {
            InstrumentType = input.ReadString();
            break;
          }
          case 152: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 160: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 168: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 176: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 186: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 192: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 202: {
            Uid = input.ReadString();
            break;
          }
          case 208: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 218: {
            PositionUid = input.ReadString();
            break;
          }
          case 226: {
            AssetUid = input.ReadString();
            break;
          }
          case 288: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 296: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 304: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 312: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 320: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 482: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Exchange = input.ReadString();
            break;
          }
          case 130: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 138: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 146: {
            InstrumentType = input.ReadString();
            break;
          }
          case 152: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 160: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 168: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 176: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 186: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 192: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 202: {
            Uid = input.ReadString();
            break;
          }
          case 208: {
            RealExchange = (global::Tinkoff.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 218: {
            PositionUid = input.ReadString();
            break;
          }
          case 226: {
            AssetUid = input.ReadString();
            break;
          }
          case 288: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 296: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 304: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 312: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 320: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 482: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.BrandData();
            }
            input.ReadMessage(Brand);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос дивидендов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetDividendsRequest : pb::IMessage<GetDividendsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDividendsRequest> _parser = new pb::MessageParser<GetDividendsRequest>(() => new GetDividendsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDividendsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest(GetDividendsRequest other) : this() {
      figi_ = other.figi_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      instrumentId_ = other.instrumentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest Clone() {
      return new GetDividendsRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC. Фильтрация происходит по параметру *record_date* (дата фиксации реестра).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC. Фильтрация происходит по параметру *record_date* (дата фиксации реестра).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 4;
    private string instrumentId_ = "";
    /// <summary>
    ///Идентификатор инструмента Figi или instrument_uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDividendsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDividendsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (InstrumentId != other.InstrumentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDividendsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Дивиденды.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetDividendsResponse : pb::IMessage<GetDividendsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDividendsResponse> _parser = new pb::MessageParser<GetDividendsResponse>(() => new GetDividendsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDividendsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse(GetDividendsResponse other) : this() {
      dividends_ = other.dividends_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse Clone() {
      return new GetDividendsResponse(this);
    }

    /// <summary>Field number for the "dividends" field.</summary>
    public const int DividendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Dividend> _repeated_dividends_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Dividend.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Dividend> dividends_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Dividend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Dividend> Dividends {
      get { return dividends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDividendsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDividendsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dividends_.Equals(other.dividends_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dividends_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dividends_.WriteTo(output, _repeated_dividends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dividends_.WriteTo(ref output, _repeated_dividends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += dividends_.CalculateSize(_repeated_dividends_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDividendsResponse other) {
      if (other == null) {
        return;
      }
      dividends_.Add(other.dividends_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dividends_.AddEntriesFrom(input, _repeated_dividends_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dividends_.AddEntriesFrom(ref input, _repeated_dividends_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация о выплате.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Dividend : pb::IMessage<Dividend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Dividend> _parser = new pb::MessageParser<Dividend>(() => new Dividend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Dividend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend(Dividend other) : this() {
      dividendNet_ = other.dividendNet_ != null ? other.dividendNet_.Clone() : null;
      paymentDate_ = other.paymentDate_ != null ? other.paymentDate_.Clone() : null;
      declaredDate_ = other.declaredDate_ != null ? other.declaredDate_.Clone() : null;
      lastBuyDate_ = other.lastBuyDate_ != null ? other.lastBuyDate_.Clone() : null;
      dividendType_ = other.dividendType_;
      recordDate_ = other.recordDate_ != null ? other.recordDate_.Clone() : null;
      regularity_ = other.regularity_;
      closePrice_ = other.closePrice_ != null ? other.closePrice_.Clone() : null;
      yieldValue_ = other.yieldValue_ != null ? other.yieldValue_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend Clone() {
      return new Dividend(this);
    }

    /// <summary>Field number for the "dividend_net" field.</summary>
    public const int DividendNetFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.MoneyValue dividendNet_;
    /// <summary>
    ///Величина дивиденда на 1 ценную бумагу (включая валюту).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue DividendNet {
      get { return dividendNet_; }
      set {
        dividendNet_ = value;
      }
    }

    /// <summary>Field number for the "payment_date" field.</summary>
    public const int PaymentDateFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp paymentDate_;
    /// <summary>
    ///Дата фактических выплат в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PaymentDate {
      get { return paymentDate_; }
      set {
        paymentDate_ = value;
      }
    }

    /// <summary>Field number for the "declared_date" field.</summary>
    public const int DeclaredDateFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp declaredDate_;
    /// <summary>
    ///Дата объявления дивидендов в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeclaredDate {
      get { return declaredDate_; }
      set {
        declaredDate_ = value;
      }
    }

    /// <summary>Field number for the "last_buy_date" field.</summary>
    public const int LastBuyDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastBuyDate_;
    /// <summary>
    ///Последний день (включительно) покупки для получения выплаты в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastBuyDate {
      get { return lastBuyDate_; }
      set {
        lastBuyDate_ = value;
      }
    }

    /// <summary>Field number for the "dividend_type" field.</summary>
    public const int DividendTypeFieldNumber = 5;
    private string dividendType_ = "";
    /// <summary>
    ///Тип выплаты. Возможные значения: Regular Cash – регулярные выплаты, Cancelled – выплата отменена, Daily Accrual – ежедневное начисление, Return of Capital – возврат капитала, прочие типы выплат.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DividendType {
      get { return dividendType_; }
      set {
        dividendType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "record_date" field.</summary>
    public const int RecordDateFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp recordDate_;
    /// <summary>
    ///Дата фиксации реестра в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RecordDate {
      get { return recordDate_; }
      set {
        recordDate_ = value;
      }
    }

    /// <summary>Field number for the "regularity" field.</summary>
    public const int RegularityFieldNumber = 7;
    private string regularity_ = "";
    /// <summary>
    ///Регулярность выплаты. Возможные значения: Annual – ежегодная, Semi-Anl – каждые полгода, прочие типы выплат.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Regularity {
      get { return regularity_; }
      set {
        regularity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close_price" field.</summary>
    public const int ClosePriceFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.MoneyValue closePrice_;
    /// <summary>
    ///Цена закрытия инструмента на момент ex_dividend_date.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue ClosePrice {
      get { return closePrice_; }
      set {
        closePrice_ = value;
      }
    }

    /// <summary>Field number for the "yield_value" field.</summary>
    public const int YieldValueFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation yieldValue_;
    /// <summary>
    ///Величина доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation YieldValue {
      get { return yieldValue_; }
      set {
        yieldValue_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    ///Дата и время создания записи в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Dividend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Dividend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DividendNet, other.DividendNet)) return false;
      if (!object.Equals(PaymentDate, other.PaymentDate)) return false;
      if (!object.Equals(DeclaredDate, other.DeclaredDate)) return false;
      if (!object.Equals(LastBuyDate, other.LastBuyDate)) return false;
      if (DividendType != other.DividendType) return false;
      if (!object.Equals(RecordDate, other.RecordDate)) return false;
      if (Regularity != other.Regularity) return false;
      if (!object.Equals(ClosePrice, other.ClosePrice)) return false;
      if (!object.Equals(YieldValue, other.YieldValue)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (dividendNet_ != null) hash ^= DividendNet.GetHashCode();
      if (paymentDate_ != null) hash ^= PaymentDate.GetHashCode();
      if (declaredDate_ != null) hash ^= DeclaredDate.GetHashCode();
      if (lastBuyDate_ != null) hash ^= LastBuyDate.GetHashCode();
      if (DividendType.Length != 0) hash ^= DividendType.GetHashCode();
      if (recordDate_ != null) hash ^= RecordDate.GetHashCode();
      if (Regularity.Length != 0) hash ^= Regularity.GetHashCode();
      if (closePrice_ != null) hash ^= ClosePrice.GetHashCode();
      if (yieldValue_ != null) hash ^= YieldValue.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dividendNet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DividendNet);
      }
      if (paymentDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PaymentDate);
      }
      if (declaredDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DividendType);
      }
      if (recordDate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecordDate);
      }
      if (Regularity.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Regularity);
      }
      if (closePrice_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosePrice);
      }
      if (yieldValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(YieldValue);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dividendNet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DividendNet);
      }
      if (paymentDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PaymentDate);
      }
      if (declaredDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DividendType);
      }
      if (recordDate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecordDate);
      }
      if (Regularity.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Regularity);
      }
      if (closePrice_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosePrice);
      }
      if (yieldValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(YieldValue);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (dividendNet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DividendNet);
      }
      if (paymentDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentDate);
      }
      if (declaredDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DividendType);
      }
      if (recordDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordDate);
      }
      if (Regularity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Regularity);
      }
      if (closePrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosePrice);
      }
      if (yieldValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YieldValue);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Dividend other) {
      if (other == null) {
        return;
      }
      if (other.dividendNet_ != null) {
        if (dividendNet_ == null) {
          DividendNet = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        DividendNet.MergeFrom(other.DividendNet);
      }
      if (other.paymentDate_ != null) {
        if (paymentDate_ == null) {
          PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PaymentDate.MergeFrom(other.PaymentDate);
      }
      if (other.declaredDate_ != null) {
        if (declaredDate_ == null) {
          DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeclaredDate.MergeFrom(other.DeclaredDate);
      }
      if (other.lastBuyDate_ != null) {
        if (lastBuyDate_ == null) {
          LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastBuyDate.MergeFrom(other.LastBuyDate);
      }
      if (other.DividendType.Length != 0) {
        DividendType = other.DividendType;
      }
      if (other.recordDate_ != null) {
        if (recordDate_ == null) {
          RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RecordDate.MergeFrom(other.RecordDate);
      }
      if (other.Regularity.Length != 0) {
        Regularity = other.Regularity;
      }
      if (other.closePrice_ != null) {
        if (closePrice_ == null) {
          ClosePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        ClosePrice.MergeFrom(other.ClosePrice);
      }
      if (other.yieldValue_ != null) {
        if (yieldValue_ == null) {
          YieldValue = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        YieldValue.MergeFrom(other.YieldValue);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dividendNet_ == null) {
              DividendNet = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(DividendNet);
            break;
          }
          case 18: {
            if (paymentDate_ == null) {
              PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PaymentDate);
            break;
          }
          case 26: {
            if (declaredDate_ == null) {
              DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeclaredDate);
            break;
          }
          case 34: {
            if (lastBuyDate_ == null) {
              LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastBuyDate);
            break;
          }
          case 42: {
            DividendType = input.ReadString();
            break;
          }
          case 50: {
            if (recordDate_ == null) {
              RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RecordDate);
            break;
          }
          case 58: {
            Regularity = input.ReadString();
            break;
          }
          case 66: {
            if (closePrice_ == null) {
              ClosePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(ClosePrice);
            break;
          }
          case 74: {
            if (yieldValue_ == null) {
              YieldValue = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(YieldValue);
            break;
          }
          case 82: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dividendNet_ == null) {
              DividendNet = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(DividendNet);
            break;
          }
          case 18: {
            if (paymentDate_ == null) {
              PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PaymentDate);
            break;
          }
          case 26: {
            if (declaredDate_ == null) {
              DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeclaredDate);
            break;
          }
          case 34: {
            if (lastBuyDate_ == null) {
              LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastBuyDate);
            break;
          }
          case 42: {
            DividendType = input.ReadString();
            break;
          }
          case 50: {
            if (recordDate_ == null) {
              RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RecordDate);
            break;
          }
          case 58: {
            Regularity = input.ReadString();
            break;
          }
          case 66: {
            if (closePrice_ == null) {
              ClosePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(ClosePrice);
            break;
          }
          case 74: {
            if (yieldValue_ == null) {
              YieldValue = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(YieldValue);
            break;
          }
          case 82: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос актива по идентификатору.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetRequest : pb::IMessage<AssetRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetRequest> _parser = new pb::MessageParser<AssetRequest>(() => new AssetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetRequest(AssetRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetRequest Clone() {
      return new AssetRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///uid-идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по активу.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetResponse : pb::IMessage<AssetResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetResponse> _parser = new pb::MessageParser<AssetResponse>(() => new AssetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetResponse(AssetResponse other) : this() {
      asset_ = other.asset_ != null ? other.asset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetResponse Clone() {
      return new AssetResponse(this);
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.AssetFull asset_;
    /// <summary>
    ///Актив.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetFull Asset {
      get { return asset_; }
      set {
        asset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Asset, other.Asset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (asset_ != null) hash ^= Asset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (asset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Asset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (asset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Asset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (asset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Asset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetResponse other) {
      if (other == null) {
        return;
      }
      if (other.asset_ != null) {
        if (asset_ == null) {
          Asset = new global::Tinkoff.InvestApi.V1.AssetFull();
        }
        Asset.MergeFrom(other.Asset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (asset_ == null) {
              Asset = new global::Tinkoff.InvestApi.V1.AssetFull();
            }
            input.ReadMessage(Asset);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (asset_ == null) {
              Asset = new global::Tinkoff.InvestApi.V1.AssetFull();
            }
            input.ReadMessage(Asset);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос списка активов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetsRequest : pb::IMessage<AssetsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetsRequest> _parser = new pb::MessageParser<AssetsRequest>(() => new AssetsRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsRequest(AssetsRequest other) : this() {
      _hasBits0 = other._hasBits0;
      instrumentType_ = other.instrumentType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsRequest Clone() {
      return new AssetsRequest(this);
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 1;
    private readonly static global::Tinkoff.InvestApi.V1.InstrumentType InstrumentTypeDefaultValue = global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified;

    private global::Tinkoff.InvestApi.V1.InstrumentType instrumentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentType InstrumentType {
      get { if ((_hasBits0 & 1) != 0) { return instrumentType_; } else { return InstrumentTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        instrumentType_ = value;
      }
    }
    /// <summary>Gets whether the "instrument_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "instrument_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentType != other.InstrumentType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInstrumentType) hash ^= InstrumentType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInstrumentType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInstrumentType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasInstrumentType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetsRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasInstrumentType) {
        InstrumentType = other.InstrumentType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstrumentType = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InstrumentType = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список активов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetsResponse : pb::IMessage<AssetsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetsResponse> _parser = new pb::MessageParser<AssetsResponse>(() => new AssetsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsResponse(AssetsResponse other) : this() {
      assets_ = other.assets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsResponse Clone() {
      return new AssetsResponse(this);
    }

    /// <summary>Field number for the "assets" field.</summary>
    public const int AssetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Asset> _repeated_assets_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Asset.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Asset> assets_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Asset>();
    /// <summary>
    ///Активы.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Asset> Assets {
      get { return assets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!assets_.Equals(other.assets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= assets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      assets_.WriteTo(output, _repeated_assets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      assets_.WriteTo(ref output, _repeated_assets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += assets_.CalculateSize(_repeated_assets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetsResponse other) {
      if (other == null) {
        return;
      }
      assets_.Add(other.assets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            assets_.AddEntriesFrom(input, _repeated_assets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            assets_.AddEntriesFrom(ref input, _repeated_assets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetFull : pb::IMessage<AssetFull>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetFull> _parser = new pb::MessageParser<AssetFull>(() => new AssetFull());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetFull> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetFull() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetFull(AssetFull other) : this() {
      uid_ = other.uid_;
      type_ = other.type_;
      name_ = other.name_;
      nameBrief_ = other.nameBrief_;
      description_ = other.description_;
      deletedAt_ = other.deletedAt_ != null ? other.deletedAt_.Clone() : null;
      requiredTests_ = other.requiredTests_.Clone();
      gosRegCode_ = other.gosRegCode_;
      cfi_ = other.cfi_;
      codeNsd_ = other.codeNsd_;
      status_ = other.status_;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      updatedAt_ = other.updatedAt_ != null ? other.updatedAt_.Clone() : null;
      brCode_ = other.brCode_;
      brCodeName_ = other.brCodeName_;
      instruments_ = other.instruments_.Clone();
      switch (other.ExtCase) {
        case ExtOneofCase.Currency:
          Currency = other.Currency.Clone();
          break;
        case ExtOneofCase.Security:
          Security = other.Security.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetFull Clone() {
      return new AssetFull(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.AssetType type_ = global::Tinkoff.InvestApi.V1.AssetType.Unspecified;
    /// <summary>
    ///Тип актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///Наименование актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_brief" field.</summary>
    public const int NameBriefFieldNumber = 4;
    private string nameBrief_ = "";
    /// <summary>
    ///Короткое наименование актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NameBrief {
      get { return nameBrief_; }
      set {
        nameBrief_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///Описание актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deleted_at" field.</summary>
    public const int DeletedAtFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deletedAt_;
    /// <summary>
    ///Дата и время удаления актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeletedAt {
      get { return deletedAt_; }
      set {
        deletedAt_ = value;
      }
    }

    /// <summary>Field number for the "required_tests" field.</summary>
    public const int RequiredTestsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_requiredTests_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> requiredTests_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///Тестирование клиентов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> RequiredTests {
      get { return requiredTests_; }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 8;
    /// <summary>
    ///Валюта. Обязательно и заполняется только для type = "ASSET_TYPE_CURRENCY".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetCurrency Currency {
      get { return extCase_ == ExtOneofCase.Currency ? (global::Tinkoff.InvestApi.V1.AssetCurrency) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Currency;
      }
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 9;
    /// <summary>
    ///Ценная бумага. Обязательно и заполняется только для type = "ASSET_TYPE_SECURITY".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetSecurity Security {
      get { return extCase_ == ExtOneofCase.Security ? (global::Tinkoff.InvestApi.V1.AssetSecurity) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Security;
      }
    }

    /// <summary>Field number for the "gos_reg_code" field.</summary>
    public const int GosRegCodeFieldNumber = 10;
    private string gosRegCode_ = "";
    /// <summary>
    ///Номер государственной регистрации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GosRegCode {
      get { return gosRegCode_; }
      set {
        gosRegCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cfi" field.</summary>
    public const int CfiFieldNumber = 11;
    private string cfi_ = "";
    /// <summary>
    ///Код CFI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cfi {
      get { return cfi_; }
      set {
        cfi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code_nsd" field.</summary>
    public const int CodeNsdFieldNumber = 12;
    private string codeNsd_ = "";
    /// <summary>
    ///Код НРД инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CodeNsd {
      get { return codeNsd_; }
      set {
        codeNsd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 13;
    private string status_ = "";
    /// <summary>
    ///Статус актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 14;
    private global::Tinkoff.InvestApi.V1.Brand brand_;
    /// <summary>
    ///Бренд.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Brand Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updatedAt_;
    /// <summary>
    ///Дата и время последнего обновления записи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "br_code" field.</summary>
    public const int BrCodeFieldNumber = 16;
    private string brCode_ = "";
    /// <summary>
    ///Код типа ц.б. по классификации Банка России.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BrCode {
      get { return brCode_; }
      set {
        brCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "br_code_name" field.</summary>
    public const int BrCodeNameFieldNumber = 17;
    private string brCodeName_ = "";
    /// <summary>
    ///Наименование кода типа ц.б. по классификации Банка России.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BrCodeName {
      get { return brCodeName_; }
      set {
        brCodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.AssetInstrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(146, global::Tinkoff.InvestApi.V1.AssetInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AssetInstrument> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AssetInstrument>();
    /// <summary>
    ///Массив идентификаторов инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AssetInstrument> Instruments {
      get { return instruments_; }
    }

    private object ext_;
    /// <summary>Enum of possible cases for the "ext" oneof.</summary>
    public enum ExtOneofCase {
      None = 0,
      Currency = 8,
      Security = 9,
    }
    private ExtOneofCase extCase_ = ExtOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExtOneofCase ExtCase {
      get { return extCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExt() {
      extCase_ = ExtOneofCase.None;
      ext_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetFull);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetFull other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (NameBrief != other.NameBrief) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(DeletedAt, other.DeletedAt)) return false;
      if(!requiredTests_.Equals(other.requiredTests_)) return false;
      if (!object.Equals(Currency, other.Currency)) return false;
      if (!object.Equals(Security, other.Security)) return false;
      if (GosRegCode != other.GosRegCode) return false;
      if (Cfi != other.Cfi) return false;
      if (CodeNsd != other.CodeNsd) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      if (!object.Equals(UpdatedAt, other.UpdatedAt)) return false;
      if (BrCode != other.BrCode) return false;
      if (BrCodeName != other.BrCodeName) return false;
      if(!instruments_.Equals(other.instruments_)) return false;
      if (ExtCase != other.ExtCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NameBrief.Length != 0) hash ^= NameBrief.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (deletedAt_ != null) hash ^= DeletedAt.GetHashCode();
      hash ^= requiredTests_.GetHashCode();
      if (extCase_ == ExtOneofCase.Currency) hash ^= Currency.GetHashCode();
      if (extCase_ == ExtOneofCase.Security) hash ^= Security.GetHashCode();
      if (GosRegCode.Length != 0) hash ^= GosRegCode.GetHashCode();
      if (Cfi.Length != 0) hash ^= Cfi.GetHashCode();
      if (CodeNsd.Length != 0) hash ^= CodeNsd.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (updatedAt_ != null) hash ^= UpdatedAt.GetHashCode();
      if (BrCode.Length != 0) hash ^= BrCode.GetHashCode();
      if (BrCodeName.Length != 0) hash ^= BrCodeName.GetHashCode();
      hash ^= instruments_.GetHashCode();
      hash ^= (int) extCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameBrief);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (deletedAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeletedAt);
      }
      requiredTests_.WriteTo(output, _repeated_requiredTests_codec);
      if (extCase_ == ExtOneofCase.Currency) {
        output.WriteRawTag(66);
        output.WriteMessage(Currency);
      }
      if (extCase_ == ExtOneofCase.Security) {
        output.WriteRawTag(74);
        output.WriteMessage(Security);
      }
      if (GosRegCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GosRegCode);
      }
      if (Cfi.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Cfi);
      }
      if (CodeNsd.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CodeNsd);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Status);
      }
      if (brand_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Brand);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UpdatedAt);
      }
      if (BrCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BrCode);
      }
      if (BrCodeName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BrCodeName);
      }
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameBrief);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (deletedAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeletedAt);
      }
      requiredTests_.WriteTo(ref output, _repeated_requiredTests_codec);
      if (extCase_ == ExtOneofCase.Currency) {
        output.WriteRawTag(66);
        output.WriteMessage(Currency);
      }
      if (extCase_ == ExtOneofCase.Security) {
        output.WriteRawTag(74);
        output.WriteMessage(Security);
      }
      if (GosRegCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GosRegCode);
      }
      if (Cfi.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Cfi);
      }
      if (CodeNsd.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CodeNsd);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Status);
      }
      if (brand_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Brand);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UpdatedAt);
      }
      if (BrCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BrCode);
      }
      if (BrCodeName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BrCodeName);
      }
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NameBrief.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameBrief);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (deletedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeletedAt);
      }
      size += requiredTests_.CalculateSize(_repeated_requiredTests_codec);
      if (extCase_ == ExtOneofCase.Currency) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Currency);
      }
      if (extCase_ == ExtOneofCase.Security) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Security);
      }
      if (GosRegCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GosRegCode);
      }
      if (Cfi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cfi);
      }
      if (CodeNsd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CodeNsd);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (brand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (updatedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedAt);
      }
      if (BrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BrCode);
      }
      if (BrCodeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BrCodeName);
      }
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetFull other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NameBrief.Length != 0) {
        NameBrief = other.NameBrief;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.deletedAt_ != null) {
        if (deletedAt_ == null) {
          DeletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeletedAt.MergeFrom(other.DeletedAt);
      }
      requiredTests_.Add(other.requiredTests_);
      if (other.GosRegCode.Length != 0) {
        GosRegCode = other.GosRegCode;
      }
      if (other.Cfi.Length != 0) {
        Cfi = other.Cfi;
      }
      if (other.CodeNsd.Length != 0) {
        CodeNsd = other.CodeNsd;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.InvestApi.V1.Brand();
        }
        Brand.MergeFrom(other.Brand);
      }
      if (other.updatedAt_ != null) {
        if (updatedAt_ == null) {
          UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdatedAt.MergeFrom(other.UpdatedAt);
      }
      if (other.BrCode.Length != 0) {
        BrCode = other.BrCode;
      }
      if (other.BrCodeName.Length != 0) {
        BrCodeName = other.BrCodeName;
      }
      instruments_.Add(other.instruments_);
      switch (other.ExtCase) {
        case ExtOneofCase.Currency:
          if (Currency == null) {
            Currency = new global::Tinkoff.InvestApi.V1.AssetCurrency();
          }
          Currency.MergeFrom(other.Currency);
          break;
        case ExtOneofCase.Security:
          if (Security == null) {
            Security = new global::Tinkoff.InvestApi.V1.AssetSecurity();
          }
          Security.MergeFrom(other.Security);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Tinkoff.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameBrief = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            if (deletedAt_ == null) {
              DeletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeletedAt);
            break;
          }
          case 58: {
            requiredTests_.AddEntriesFrom(input, _repeated_requiredTests_codec);
            break;
          }
          case 66: {
            global::Tinkoff.InvestApi.V1.AssetCurrency subBuilder = new global::Tinkoff.InvestApi.V1.AssetCurrency();
            if (extCase_ == ExtOneofCase.Currency) {
              subBuilder.MergeFrom(Currency);
            }
            input.ReadMessage(subBuilder);
            Currency = subBuilder;
            break;
          }
          case 74: {
            global::Tinkoff.InvestApi.V1.AssetSecurity subBuilder = new global::Tinkoff.InvestApi.V1.AssetSecurity();
            if (extCase_ == ExtOneofCase.Security) {
              subBuilder.MergeFrom(Security);
            }
            input.ReadMessage(subBuilder);
            Security = subBuilder;
            break;
          }
          case 82: {
            GosRegCode = input.ReadString();
            break;
          }
          case 90: {
            Cfi = input.ReadString();
            break;
          }
          case 98: {
            CodeNsd = input.ReadString();
            break;
          }
          case 106: {
            Status = input.ReadString();
            break;
          }
          case 114: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.Brand();
            }
            input.ReadMessage(Brand);
            break;
          }
          case 122: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 130: {
            BrCode = input.ReadString();
            break;
          }
          case 138: {
            BrCodeName = input.ReadString();
            break;
          }
          case 146: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Tinkoff.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameBrief = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            if (deletedAt_ == null) {
              DeletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeletedAt);
            break;
          }
          case 58: {
            requiredTests_.AddEntriesFrom(ref input, _repeated_requiredTests_codec);
            break;
          }
          case 66: {
            global::Tinkoff.InvestApi.V1.AssetCurrency subBuilder = new global::Tinkoff.InvestApi.V1.AssetCurrency();
            if (extCase_ == ExtOneofCase.Currency) {
              subBuilder.MergeFrom(Currency);
            }
            input.ReadMessage(subBuilder);
            Currency = subBuilder;
            break;
          }
          case 74: {
            global::Tinkoff.InvestApi.V1.AssetSecurity subBuilder = new global::Tinkoff.InvestApi.V1.AssetSecurity();
            if (extCase_ == ExtOneofCase.Security) {
              subBuilder.MergeFrom(Security);
            }
            input.ReadMessage(subBuilder);
            Security = subBuilder;
            break;
          }
          case 82: {
            GosRegCode = input.ReadString();
            break;
          }
          case 90: {
            Cfi = input.ReadString();
            break;
          }
          case 98: {
            CodeNsd = input.ReadString();
            break;
          }
          case 106: {
            Status = input.ReadString();
            break;
          }
          case 114: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.InvestApi.V1.Brand();
            }
            input.ReadMessage(Brand);
            break;
          }
          case 122: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 130: {
            BrCode = input.ReadString();
            break;
          }
          case 138: {
            BrCodeName = input.ReadString();
            break;
          }
          case 146: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация об активе.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Asset : pb::IMessage<Asset>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Asset(Asset other) : this() {
      uid_ = other.uid_;
      type_ = other.type_;
      name_ = other.name_;
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.AssetType type_ = global::Tinkoff.InvestApi.V1.AssetType.Unspecified;
    /// <summary>
    ///Тип актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///Наименование актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.AssetInstrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(34, global::Tinkoff.InvestApi.V1.AssetInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AssetInstrument> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AssetInstrument>();
    /// <summary>
    ///Массив идентификаторов инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AssetInstrument> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Type != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Tinkoff.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Tinkoff.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Валюта.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetCurrency : pb::IMessage<AssetCurrency>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetCurrency> _parser = new pb::MessageParser<AssetCurrency>(() => new AssetCurrency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetCurrency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetCurrency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetCurrency(AssetCurrency other) : this() {
      baseCurrency_ = other.baseCurrency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetCurrency Clone() {
      return new AssetCurrency(this);
    }

    /// <summary>Field number for the "base_currency" field.</summary>
    public const int BaseCurrencyFieldNumber = 1;
    private string baseCurrency_ = "";
    /// <summary>
    ///ISO-код валюты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BaseCurrency {
      get { return baseCurrency_; }
      set {
        baseCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetCurrency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetCurrency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseCurrency != other.BaseCurrency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseCurrency.Length != 0) hash ^= BaseCurrency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BaseCurrency.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BaseCurrency.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BaseCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseCurrency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetCurrency other) {
      if (other == null) {
        return;
      }
      if (other.BaseCurrency.Length != 0) {
        BaseCurrency = other.BaseCurrency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaseCurrency = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BaseCurrency = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Ценная бумага.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetSecurity : pb::IMessage<AssetSecurity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetSecurity> _parser = new pb::MessageParser<AssetSecurity>(() => new AssetSecurity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetSecurity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSecurity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSecurity(AssetSecurity other) : this() {
      isin_ = other.isin_;
      type_ = other.type_;
      instrumentKind_ = other.instrumentKind_;
      switch (other.ExtCase) {
        case ExtOneofCase.Share:
          Share = other.Share.Clone();
          break;
        case ExtOneofCase.Bond:
          Bond = other.Bond.Clone();
          break;
        case ExtOneofCase.Sp:
          Sp = other.Sp.Clone();
          break;
        case ExtOneofCase.Etf:
          Etf = other.Etf.Clone();
          break;
        case ExtOneofCase.ClearingCertificate:
          ClearingCertificate = other.ClearingCertificate.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSecurity Clone() {
      return new AssetSecurity(this);
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 1;
    private string isin_ = "";
    /// <summary>
    ///ISIN-идентификатор ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    ///Тип ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    /// <summary>Field number for the "share" field.</summary>
    public const int ShareFieldNumber = 3;
    /// <summary>
    ///Акция. Заполняется только для акций (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = share).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetShare Share {
      get { return extCase_ == ExtOneofCase.Share ? (global::Tinkoff.InvestApi.V1.AssetShare) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Share;
      }
    }

    /// <summary>Field number for the "bond" field.</summary>
    public const int BondFieldNumber = 4;
    /// <summary>
    ///Облигация. Заполняется только для облигаций (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = bond).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetBond Bond {
      get { return extCase_ == ExtOneofCase.Bond ? (global::Tinkoff.InvestApi.V1.AssetBond) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Bond;
      }
    }

    /// <summary>Field number for the "sp" field.</summary>
    public const int SpFieldNumber = 5;
    /// <summary>
    ///Структурная нота. Заполняется только для структурных продуктов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = sp).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetStructuredProduct Sp {
      get { return extCase_ == ExtOneofCase.Sp ? (global::Tinkoff.InvestApi.V1.AssetStructuredProduct) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Sp;
      }
    }

    /// <summary>Field number for the "etf" field.</summary>
    public const int EtfFieldNumber = 6;
    /// <summary>
    /// Фонд. Заполняется только для фондов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = etf).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetEtf Etf {
      get { return extCase_ == ExtOneofCase.Etf ? (global::Tinkoff.InvestApi.V1.AssetEtf) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Etf;
      }
    }

    /// <summary>Field number for the "clearing_certificate" field.</summary>
    public const int ClearingCertificateFieldNumber = 7;
    /// <summary>
    /// Клиринговый сертификат участия. Заполняется только для клиринговых сертификатов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = clearing_certificate).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetClearingCertificate ClearingCertificate {
      get { return extCase_ == ExtOneofCase.ClearingCertificate ? (global::Tinkoff.InvestApi.V1.AssetClearingCertificate) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.ClearingCertificate;
      }
    }

    private object ext_;
    /// <summary>Enum of possible cases for the "ext" oneof.</summary>
    public enum ExtOneofCase {
      None = 0,
      Share = 3,
      Bond = 4,
      Sp = 5,
      Etf = 6,
      ClearingCertificate = 7,
    }
    private ExtOneofCase extCase_ = ExtOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExtOneofCase ExtCase {
      get { return extCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExt() {
      extCase_ = ExtOneofCase.None;
      ext_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetSecurity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetSecurity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Isin != other.Isin) return false;
      if (Type != other.Type) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (!object.Equals(Share, other.Share)) return false;
      if (!object.Equals(Bond, other.Bond)) return false;
      if (!object.Equals(Sp, other.Sp)) return false;
      if (!object.Equals(Etf, other.Etf)) return false;
      if (!object.Equals(ClearingCertificate, other.ClearingCertificate)) return false;
      if (ExtCase != other.ExtCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (extCase_ == ExtOneofCase.Share) hash ^= Share.GetHashCode();
      if (extCase_ == ExtOneofCase.Bond) hash ^= Bond.GetHashCode();
      if (extCase_ == ExtOneofCase.Sp) hash ^= Sp.GetHashCode();
      if (extCase_ == ExtOneofCase.Etf) hash ^= Etf.GetHashCode();
      if (extCase_ == ExtOneofCase.ClearingCertificate) hash ^= ClearingCertificate.GetHashCode();
      hash ^= (int) extCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Isin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Isin);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (extCase_ == ExtOneofCase.Share) {
        output.WriteRawTag(26);
        output.WriteMessage(Share);
      }
      if (extCase_ == ExtOneofCase.Bond) {
        output.WriteRawTag(34);
        output.WriteMessage(Bond);
      }
      if (extCase_ == ExtOneofCase.Sp) {
        output.WriteRawTag(42);
        output.WriteMessage(Sp);
      }
      if (extCase_ == ExtOneofCase.Etf) {
        output.WriteRawTag(50);
        output.WriteMessage(Etf);
      }
      if (extCase_ == ExtOneofCase.ClearingCertificate) {
        output.WriteRawTag(58);
        output.WriteMessage(ClearingCertificate);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Isin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Isin);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (extCase_ == ExtOneofCase.Share) {
        output.WriteRawTag(26);
        output.WriteMessage(Share);
      }
      if (extCase_ == ExtOneofCase.Bond) {
        output.WriteRawTag(34);
        output.WriteMessage(Bond);
      }
      if (extCase_ == ExtOneofCase.Sp) {
        output.WriteRawTag(42);
        output.WriteMessage(Sp);
      }
      if (extCase_ == ExtOneofCase.Etf) {
        output.WriteRawTag(50);
        output.WriteMessage(Etf);
      }
      if (extCase_ == ExtOneofCase.ClearingCertificate) {
        output.WriteRawTag(58);
        output.WriteMessage(ClearingCertificate);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (extCase_ == ExtOneofCase.Share) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Share);
      }
      if (extCase_ == ExtOneofCase.Bond) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bond);
      }
      if (extCase_ == ExtOneofCase.Sp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sp);
      }
      if (extCase_ == ExtOneofCase.Etf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Etf);
      }
      if (extCase_ == ExtOneofCase.ClearingCertificate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClearingCertificate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetSecurity other) {
      if (other == null) {
        return;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      switch (other.ExtCase) {
        case ExtOneofCase.Share:
          if (Share == null) {
            Share = new global::Tinkoff.InvestApi.V1.AssetShare();
          }
          Share.MergeFrom(other.Share);
          break;
        case ExtOneofCase.Bond:
          if (Bond == null) {
            Bond = new global::Tinkoff.InvestApi.V1.AssetBond();
          }
          Bond.MergeFrom(other.Bond);
          break;
        case ExtOneofCase.Sp:
          if (Sp == null) {
            Sp = new global::Tinkoff.InvestApi.V1.AssetStructuredProduct();
          }
          Sp.MergeFrom(other.Sp);
          break;
        case ExtOneofCase.Etf:
          if (Etf == null) {
            Etf = new global::Tinkoff.InvestApi.V1.AssetEtf();
          }
          Etf.MergeFrom(other.Etf);
          break;
        case ExtOneofCase.ClearingCertificate:
          if (ClearingCertificate == null) {
            ClearingCertificate = new global::Tinkoff.InvestApi.V1.AssetClearingCertificate();
          }
          ClearingCertificate.MergeFrom(other.ClearingCertificate);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Isin = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            global::Tinkoff.InvestApi.V1.AssetShare subBuilder = new global::Tinkoff.InvestApi.V1.AssetShare();
            if (extCase_ == ExtOneofCase.Share) {
              subBuilder.MergeFrom(Share);
            }
            input.ReadMessage(subBuilder);
            Share = subBuilder;
            break;
          }
          case 34: {
            global::Tinkoff.InvestApi.V1.AssetBond subBuilder = new global::Tinkoff.InvestApi.V1.AssetBond();
            if (extCase_ == ExtOneofCase.Bond) {
              subBuilder.MergeFrom(Bond);
            }
            input.ReadMessage(subBuilder);
            Bond = subBuilder;
            break;
          }
          case 42: {
            global::Tinkoff.InvestApi.V1.AssetStructuredProduct subBuilder = new global::Tinkoff.InvestApi.V1.AssetStructuredProduct();
            if (extCase_ == ExtOneofCase.Sp) {
              subBuilder.MergeFrom(Sp);
            }
            input.ReadMessage(subBuilder);
            Sp = subBuilder;
            break;
          }
          case 50: {
            global::Tinkoff.InvestApi.V1.AssetEtf subBuilder = new global::Tinkoff.InvestApi.V1.AssetEtf();
            if (extCase_ == ExtOneofCase.Etf) {
              subBuilder.MergeFrom(Etf);
            }
            input.ReadMessage(subBuilder);
            Etf = subBuilder;
            break;
          }
          case 58: {
            global::Tinkoff.InvestApi.V1.AssetClearingCertificate subBuilder = new global::Tinkoff.InvestApi.V1.AssetClearingCertificate();
            if (extCase_ == ExtOneofCase.ClearingCertificate) {
              subBuilder.MergeFrom(ClearingCertificate);
            }
            input.ReadMessage(subBuilder);
            ClearingCertificate = subBuilder;
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Isin = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            global::Tinkoff.InvestApi.V1.AssetShare subBuilder = new global::Tinkoff.InvestApi.V1.AssetShare();
            if (extCase_ == ExtOneofCase.Share) {
              subBuilder.MergeFrom(Share);
            }
            input.ReadMessage(subBuilder);
            Share = subBuilder;
            break;
          }
          case 34: {
            global::Tinkoff.InvestApi.V1.AssetBond subBuilder = new global::Tinkoff.InvestApi.V1.AssetBond();
            if (extCase_ == ExtOneofCase.Bond) {
              subBuilder.MergeFrom(Bond);
            }
            input.ReadMessage(subBuilder);
            Bond = subBuilder;
            break;
          }
          case 42: {
            global::Tinkoff.InvestApi.V1.AssetStructuredProduct subBuilder = new global::Tinkoff.InvestApi.V1.AssetStructuredProduct();
            if (extCase_ == ExtOneofCase.Sp) {
              subBuilder.MergeFrom(Sp);
            }
            input.ReadMessage(subBuilder);
            Sp = subBuilder;
            break;
          }
          case 50: {
            global::Tinkoff.InvestApi.V1.AssetEtf subBuilder = new global::Tinkoff.InvestApi.V1.AssetEtf();
            if (extCase_ == ExtOneofCase.Etf) {
              subBuilder.MergeFrom(Etf);
            }
            input.ReadMessage(subBuilder);
            Etf = subBuilder;
            break;
          }
          case 58: {
            global::Tinkoff.InvestApi.V1.AssetClearingCertificate subBuilder = new global::Tinkoff.InvestApi.V1.AssetClearingCertificate();
            if (extCase_ == ExtOneofCase.ClearingCertificate) {
              subBuilder.MergeFrom(ClearingCertificate);
            }
            input.ReadMessage(subBuilder);
            ClearingCertificate = subBuilder;
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Акция.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetShare : pb::IMessage<AssetShare>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetShare> _parser = new pb::MessageParser<AssetShare>(() => new AssetShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetShare(AssetShare other) : this() {
      type_ = other.type_;
      issueSize_ = other.issueSize_ != null ? other.issueSize_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      primaryIndex_ = other.primaryIndex_;
      dividendRate_ = other.dividendRate_ != null ? other.dividendRate_.Clone() : null;
      preferredShareType_ = other.preferredShareType_;
      ipoDate_ = other.ipoDate_ != null ? other.ipoDate_.Clone() : null;
      registryDate_ = other.registryDate_ != null ? other.registryDate_.Clone() : null;
      divYieldFlag_ = other.divYieldFlag_;
      issueKind_ = other.issueKind_;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      represIsin_ = other.represIsin_;
      issueSizePlan_ = other.issueSizePlan_ != null ? other.issueSizePlan_.Clone() : null;
      totalFloat_ = other.totalFloat_ != null ? other.totalFloat_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetShare Clone() {
      return new AssetShare(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.ShareType type_ = global::Tinkoff.InvestApi.V1.ShareType.Unspecified;
    /// <summary>
    ///Тип акции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.ShareType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.Quotation issueSize_;
    /// <summary>
    ///Объем выпуска (шт.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 3;
    private global::Tinkoff.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 4;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_index" field.</summary>
    public const int PrimaryIndexFieldNumber = 5;
    private string primaryIndex_ = "";
    /// <summary>
    ///Индекс (Bloomberg).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryIndex {
      get { return primaryIndex_; }
      set {
        primaryIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dividend_rate" field.</summary>
    public const int DividendRateFieldNumber = 6;
    private global::Tinkoff.InvestApi.V1.Quotation dividendRate_;
    /// <summary>
    ///Ставка дивиденда (для привилегированных акций).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DividendRate {
      get { return dividendRate_; }
      set {
        dividendRate_ = value;
      }
    }

    /// <summary>Field number for the "preferred_share_type" field.</summary>
    public const int PreferredShareTypeFieldNumber = 7;
    private string preferredShareType_ = "";
    /// <summary>
    ///Тип привилегированных акций.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PreferredShareType {
      get { return preferredShareType_; }
      set {
        preferredShareType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipo_date" field.</summary>
    public const int IpoDateFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ipoDate_;
    /// <summary>
    ///Дата IPO.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IpoDate {
      get { return ipoDate_; }
      set {
        ipoDate_ = value;
      }
    }

    /// <summary>Field number for the "registry_date" field.</summary>
    public const int RegistryDateFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp registryDate_;
    /// <summary>
    ///Дата регистрации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RegistryDate {
      get { return registryDate_; }
      set {
        registryDate_ = value;
      }
    }

    /// <summary>Field number for the "div_yield_flag" field.</summary>
    public const int DivYieldFlagFieldNumber = 10;
    private bool divYieldFlag_;
    /// <summary>
    ///Признак наличия дивидендной доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivYieldFlag {
      get { return divYieldFlag_; }
      set {
        divYieldFlag_ = value;
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 11;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска ФИ.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения акции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "repres_isin" field.</summary>
    public const int RepresIsinFieldNumber = 13;
    private string represIsin_ = "";
    /// <summary>
    ///ISIN базового актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RepresIsin {
      get { return represIsin_; }
      set {
        represIsin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 14;
    private global::Tinkoff.InvestApi.V1.Quotation issueSizePlan_;
    /// <summary>
    ///Объявленное количество шт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "total_float" field.</summary>
    public const int TotalFloatFieldNumber = 15;
    private global::Tinkoff.InvestApi.V1.Quotation totalFloat_;
    /// <summary>
    ///Количество акций в свободном обращении.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation TotalFloat {
      get { return totalFloat_; }
      set {
        totalFloat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(IssueSize, other.IssueSize)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      if (PrimaryIndex != other.PrimaryIndex) return false;
      if (!object.Equals(DividendRate, other.DividendRate)) return false;
      if (PreferredShareType != other.PreferredShareType) return false;
      if (!object.Equals(IpoDate, other.IpoDate)) return false;
      if (!object.Equals(RegistryDate, other.RegistryDate)) return false;
      if (DivYieldFlag != other.DivYieldFlag) return false;
      if (IssueKind != other.IssueKind) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (RepresIsin != other.RepresIsin) return false;
      if (!object.Equals(IssueSizePlan, other.IssueSizePlan)) return false;
      if (!object.Equals(TotalFloat, other.TotalFloat)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) hash ^= Type.GetHashCode();
      if (issueSize_ != null) hash ^= IssueSize.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (PrimaryIndex.Length != 0) hash ^= PrimaryIndex.GetHashCode();
      if (dividendRate_ != null) hash ^= DividendRate.GetHashCode();
      if (PreferredShareType.Length != 0) hash ^= PreferredShareType.GetHashCode();
      if (ipoDate_ != null) hash ^= IpoDate.GetHashCode();
      if (registryDate_ != null) hash ^= RegistryDate.GetHashCode();
      if (DivYieldFlag != false) hash ^= DivYieldFlag.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (RepresIsin.Length != 0) hash ^= RepresIsin.GetHashCode();
      if (issueSizePlan_ != null) hash ^= IssueSizePlan.GetHashCode();
      if (totalFloat_ != null) hash ^= TotalFloat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IssueSize);
      }
      if (nominal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NominalCurrency);
      }
      if (PrimaryIndex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PrimaryIndex);
      }
      if (dividendRate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DividendRate);
      }
      if (PreferredShareType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PreferredShareType);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(IpoDate);
      }
      if (registryDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RegistryDate);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(80);
        output.WriteBool(DivYieldFlag);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IssueKind);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlacementDate);
      }
      if (RepresIsin.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RepresIsin);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(IssueSizePlan);
      }
      if (totalFloat_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TotalFloat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IssueSize);
      }
      if (nominal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NominalCurrency);
      }
      if (PrimaryIndex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PrimaryIndex);
      }
      if (dividendRate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DividendRate);
      }
      if (PreferredShareType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PreferredShareType);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(IpoDate);
      }
      if (registryDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RegistryDate);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(80);
        output.WriteBool(DivYieldFlag);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IssueKind);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlacementDate);
      }
      if (RepresIsin.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RepresIsin);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(IssueSizePlan);
      }
      if (totalFloat_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TotalFloat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (issueSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSize);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (PrimaryIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryIndex);
      }
      if (dividendRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DividendRate);
      }
      if (PreferredShareType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreferredShareType);
      }
      if (ipoDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IpoDate);
      }
      if (registryDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegistryDate);
      }
      if (DivYieldFlag != false) {
        size += 1 + 1;
      }
      if (IssueKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (placementDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (RepresIsin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepresIsin);
      }
      if (issueSizePlan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSizePlan);
      }
      if (totalFloat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalFloat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetShare other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        Type = other.Type;
      }
      if (other.issueSize_ != null) {
        if (issueSize_ == null) {
          IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        IssueSize.MergeFrom(other.IssueSize);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      if (other.PrimaryIndex.Length != 0) {
        PrimaryIndex = other.PrimaryIndex;
      }
      if (other.dividendRate_ != null) {
        if (dividendRate_ == null) {
          DividendRate = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DividendRate.MergeFrom(other.DividendRate);
      }
      if (other.PreferredShareType.Length != 0) {
        PreferredShareType = other.PreferredShareType;
      }
      if (other.ipoDate_ != null) {
        if (ipoDate_ == null) {
          IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IpoDate.MergeFrom(other.IpoDate);
      }
      if (other.registryDate_ != null) {
        if (registryDate_ == null) {
          RegistryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RegistryDate.MergeFrom(other.RegistryDate);
      }
      if (other.DivYieldFlag != false) {
        DivYieldFlag = other.DivYieldFlag;
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.RepresIsin.Length != 0) {
        RepresIsin = other.RepresIsin;
      }
      if (other.issueSizePlan_ != null) {
        if (issueSizePlan_ == null) {
          IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        IssueSizePlan.MergeFrom(other.IssueSizePlan);
      }
      if (other.totalFloat_ != null) {
        if (totalFloat_ == null) {
          TotalFloat = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        TotalFloat.MergeFrom(other.TotalFloat);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Tinkoff.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 18: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 26: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 34: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 42: {
            PrimaryIndex = input.ReadString();
            break;
          }
          case 50: {
            if (dividendRate_ == null) {
              DividendRate = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DividendRate);
            break;
          }
          case 58: {
            PreferredShareType = input.ReadString();
            break;
          }
          case 66: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 74: {
            if (registryDate_ == null) {
              RegistryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RegistryDate);
            break;
          }
          case 80: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 90: {
            IssueKind = input.ReadString();
            break;
          }
          case 98: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 106: {
            RepresIsin = input.ReadString();
            break;
          }
          case 114: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
          case 122: {
            if (totalFloat_ == null) {
              TotalFloat = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(TotalFloat);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Tinkoff.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 18: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 26: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 34: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 42: {
            PrimaryIndex = input.ReadString();
            break;
          }
          case 50: {
            if (dividendRate_ == null) {
              DividendRate = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DividendRate);
            break;
          }
          case 58: {
            PreferredShareType = input.ReadString();
            break;
          }
          case 66: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 74: {
            if (registryDate_ == null) {
              RegistryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RegistryDate);
            break;
          }
          case 80: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 90: {
            IssueKind = input.ReadString();
            break;
          }
          case 98: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 106: {
            RepresIsin = input.ReadString();
            break;
          }
          case 114: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
          case 122: {
            if (totalFloat_ == null) {
              TotalFloat = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(TotalFloat);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Облигация.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetBond : pb::IMessage<AssetBond>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetBond> _parser = new pb::MessageParser<AssetBond>(() => new AssetBond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetBond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetBond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetBond(AssetBond other) : this() {
      currentNominal_ = other.currentNominal_ != null ? other.currentNominal_.Clone() : null;
      borrowName_ = other.borrowName_;
      issueSize_ = other.issueSize_ != null ? other.issueSize_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      issueKind_ = other.issueKind_;
      interestKind_ = other.interestKind_;
      couponQuantityPerYear_ = other.couponQuantityPerYear_;
      indexedNominalFlag_ = other.indexedNominalFlag_;
      subordinatedFlag_ = other.subordinatedFlag_;
      collateralFlag_ = other.collateralFlag_;
      taxFreeFlag_ = other.taxFreeFlag_;
      amortizationFlag_ = other.amortizationFlag_;
      floatingCouponFlag_ = other.floatingCouponFlag_;
      perpetualFlag_ = other.perpetualFlag_;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      returnCondition_ = other.returnCondition_;
      stateRegDate_ = other.stateRegDate_ != null ? other.stateRegDate_.Clone() : null;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      placementPrice_ = other.placementPrice_ != null ? other.placementPrice_.Clone() : null;
      issueSizePlan_ = other.issueSizePlan_ != null ? other.issueSizePlan_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetBond Clone() {
      return new AssetBond(this);
    }

    /// <summary>Field number for the "current_nominal" field.</summary>
    public const int CurrentNominalFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Quotation currentNominal_;
    /// <summary>
    ///Текущий номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation CurrentNominal {
      get { return currentNominal_; }
      set {
        currentNominal_ = value;
      }
    }

    /// <summary>Field number for the "borrow_name" field.</summary>
    public const int BorrowNameFieldNumber = 2;
    private string borrowName_ = "";
    /// <summary>
    ///Наименование заемщика.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BorrowName {
      get { return borrowName_; }
      set {
        borrowName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 3;
    private global::Tinkoff.InvestApi.V1.Quotation issueSize_;
    /// <summary>
    ///Объем эмиссии облигации (стоимость).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 4;
    private global::Tinkoff.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 5;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 6;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interest_kind" field.</summary>
    public const int InterestKindFieldNumber = 7;
    private string interestKind_ = "";
    /// <summary>
    ///Форма дохода облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InterestKind {
      get { return interestKind_; }
      set {
        interestKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupon_quantity_per_year" field.</summary>
    public const int CouponQuantityPerYearFieldNumber = 8;
    private int couponQuantityPerYear_;
    /// <summary>
    ///Количество выплат в год.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CouponQuantityPerYear {
      get { return couponQuantityPerYear_; }
      set {
        couponQuantityPerYear_ = value;
      }
    }

    /// <summary>Field number for the "indexed_nominal_flag" field.</summary>
    public const int IndexedNominalFlagFieldNumber = 9;
    private bool indexedNominalFlag_;
    /// <summary>
    ///Признак облигации с индексируемым номиналом.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IndexedNominalFlag {
      get { return indexedNominalFlag_; }
      set {
        indexedNominalFlag_ = value;
      }
    }

    /// <summary>Field number for the "subordinated_flag" field.</summary>
    public const int SubordinatedFlagFieldNumber = 10;
    private bool subordinatedFlag_;
    /// <summary>
    ///Признак субординированной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SubordinatedFlag {
      get { return subordinatedFlag_; }
      set {
        subordinatedFlag_ = value;
      }
    }

    /// <summary>Field number for the "collateral_flag" field.</summary>
    public const int CollateralFlagFieldNumber = 11;
    private bool collateralFlag_;
    /// <summary>
    ///Признак обеспеченной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CollateralFlag {
      get { return collateralFlag_; }
      set {
        collateralFlag_ = value;
      }
    }

    /// <summary>Field number for the "tax_free_flag" field.</summary>
    public const int TaxFreeFlagFieldNumber = 12;
    private bool taxFreeFlag_;
    /// <summary>
    ///Признак показывает, что купоны облигации не облагаются налогом (для mass market).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TaxFreeFlag {
      get { return taxFreeFlag_; }
      set {
        taxFreeFlag_ = value;
      }
    }

    /// <summary>Field number for the "amortization_flag" field.</summary>
    public const int AmortizationFlagFieldNumber = 13;
    private bool amortizationFlag_;
    /// <summary>
    ///Признак облигации с амортизацией долга.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AmortizationFlag {
      get { return amortizationFlag_; }
      set {
        amortizationFlag_ = value;
      }
    }

    /// <summary>Field number for the "floating_coupon_flag" field.</summary>
    public const int FloatingCouponFlagFieldNumber = 14;
    private bool floatingCouponFlag_;
    /// <summary>
    ///Признак облигации с плавающим купоном.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FloatingCouponFlag {
      get { return floatingCouponFlag_; }
      set {
        floatingCouponFlag_ = value;
      }
    }

    /// <summary>Field number for the "perpetual_flag" field.</summary>
    public const int PerpetualFlagFieldNumber = 15;
    private bool perpetualFlag_;
    /// <summary>
    ///Признак бессрочной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PerpetualFlag {
      get { return perpetualFlag_; }
      set {
        perpetualFlag_ = value;
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maturityDate_;
    /// <summary>
    ///Дата погашения облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "return_condition" field.</summary>
    public const int ReturnConditionFieldNumber = 17;
    private string returnCondition_ = "";
    /// <summary>
    ///Описание и условия получения дополнительного дохода.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReturnCondition {
      get { return returnCondition_; }
      set {
        returnCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_reg_date" field.</summary>
    public const int StateRegDateFieldNumber = 18;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stateRegDate_;
    /// <summary>
    ///Дата выпуска облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StateRegDate {
      get { return stateRegDate_; }
      set {
        stateRegDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_price" field.</summary>
    public const int PlacementPriceFieldNumber = 20;
    private global::Tinkoff.InvestApi.V1.Quotation placementPrice_;
    /// <summary>
    ///Цена размещения облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation PlacementPrice {
      get { return placementPrice_; }
      set {
        placementPrice_ = value;
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 21;
    private global::Tinkoff.InvestApi.V1.Quotation issueSizePlan_;
    /// <summary>
    ///Объявленное количество шт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetBond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetBond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentNominal, other.CurrentNominal)) return false;
      if (BorrowName != other.BorrowName) return false;
      if (!object.Equals(IssueSize, other.IssueSize)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      if (IssueKind != other.IssueKind) return false;
      if (InterestKind != other.InterestKind) return false;
      if (CouponQuantityPerYear != other.CouponQuantityPerYear) return false;
      if (IndexedNominalFlag != other.IndexedNominalFlag) return false;
      if (SubordinatedFlag != other.SubordinatedFlag) return false;
      if (CollateralFlag != other.CollateralFlag) return false;
      if (TaxFreeFlag != other.TaxFreeFlag) return false;
      if (AmortizationFlag != other.AmortizationFlag) return false;
      if (FloatingCouponFlag != other.FloatingCouponFlag) return false;
      if (PerpetualFlag != other.PerpetualFlag) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (ReturnCondition != other.ReturnCondition) return false;
      if (!object.Equals(StateRegDate, other.StateRegDate)) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (!object.Equals(PlacementPrice, other.PlacementPrice)) return false;
      if (!object.Equals(IssueSizePlan, other.IssueSizePlan)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (currentNominal_ != null) hash ^= CurrentNominal.GetHashCode();
      if (BorrowName.Length != 0) hash ^= BorrowName.GetHashCode();
      if (issueSize_ != null) hash ^= IssueSize.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (InterestKind.Length != 0) hash ^= InterestKind.GetHashCode();
      if (CouponQuantityPerYear != 0) hash ^= CouponQuantityPerYear.GetHashCode();
      if (IndexedNominalFlag != false) hash ^= IndexedNominalFlag.GetHashCode();
      if (SubordinatedFlag != false) hash ^= SubordinatedFlag.GetHashCode();
      if (CollateralFlag != false) hash ^= CollateralFlag.GetHashCode();
      if (TaxFreeFlag != false) hash ^= TaxFreeFlag.GetHashCode();
      if (AmortizationFlag != false) hash ^= AmortizationFlag.GetHashCode();
      if (FloatingCouponFlag != false) hash ^= FloatingCouponFlag.GetHashCode();
      if (PerpetualFlag != false) hash ^= PerpetualFlag.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (ReturnCondition.Length != 0) hash ^= ReturnCondition.GetHashCode();
      if (stateRegDate_ != null) hash ^= StateRegDate.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (placementPrice_ != null) hash ^= PlacementPrice.GetHashCode();
      if (issueSizePlan_ != null) hash ^= IssueSizePlan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (currentNominal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentNominal);
      }
      if (BorrowName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BorrowName);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IssueSize);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NominalCurrency);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IssueKind);
      }
      if (InterestKind.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(InterestKind);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (IndexedNominalFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(IndexedNominalFlag);
      }
      if (SubordinatedFlag != false) {
        output.WriteRawTag(80);
        output.WriteBool(SubordinatedFlag);
      }
      if (CollateralFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(CollateralFlag);
      }
      if (TaxFreeFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(TaxFreeFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(AmortizationFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(112);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(120);
        output.WriteBool(PerpetualFlag);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MaturityDate);
      }
      if (ReturnCondition.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ReturnCondition);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IssueSizePlan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (currentNominal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentNominal);
      }
      if (BorrowName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BorrowName);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IssueSize);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NominalCurrency);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IssueKind);
      }
      if (InterestKind.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(InterestKind);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (IndexedNominalFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(IndexedNominalFlag);
      }
      if (SubordinatedFlag != false) {
        output.WriteRawTag(80);
        output.WriteBool(SubordinatedFlag);
      }
      if (CollateralFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(CollateralFlag);
      }
      if (TaxFreeFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(TaxFreeFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(AmortizationFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(112);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(120);
        output.WriteBool(PerpetualFlag);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MaturityDate);
      }
      if (ReturnCondition.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ReturnCondition);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IssueSizePlan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (currentNominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentNominal);
      }
      if (BorrowName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BorrowName);
      }
      if (issueSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSize);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (IssueKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (InterestKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InterestKind);
      }
      if (CouponQuantityPerYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CouponQuantityPerYear);
      }
      if (IndexedNominalFlag != false) {
        size += 1 + 1;
      }
      if (SubordinatedFlag != false) {
        size += 1 + 1;
      }
      if (CollateralFlag != false) {
        size += 1 + 1;
      }
      if (TaxFreeFlag != false) {
        size += 1 + 1;
      }
      if (AmortizationFlag != false) {
        size += 1 + 1;
      }
      if (FloatingCouponFlag != false) {
        size += 1 + 1;
      }
      if (PerpetualFlag != false) {
        size += 1 + 1;
      }
      if (maturityDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (ReturnCondition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReturnCondition);
      }
      if (stateRegDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateRegDate);
      }
      if (placementDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (placementPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementPrice);
      }
      if (issueSizePlan_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IssueSizePlan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetBond other) {
      if (other == null) {
        return;
      }
      if (other.currentNominal_ != null) {
        if (currentNominal_ == null) {
          CurrentNominal = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        CurrentNominal.MergeFrom(other.CurrentNominal);
      }
      if (other.BorrowName.Length != 0) {
        BorrowName = other.BorrowName;
      }
      if (other.issueSize_ != null) {
        if (issueSize_ == null) {
          IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        IssueSize.MergeFrom(other.IssueSize);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.InterestKind.Length != 0) {
        InterestKind = other.InterestKind;
      }
      if (other.CouponQuantityPerYear != 0) {
        CouponQuantityPerYear = other.CouponQuantityPerYear;
      }
      if (other.IndexedNominalFlag != false) {
        IndexedNominalFlag = other.IndexedNominalFlag;
      }
      if (other.SubordinatedFlag != false) {
        SubordinatedFlag = other.SubordinatedFlag;
      }
      if (other.CollateralFlag != false) {
        CollateralFlag = other.CollateralFlag;
      }
      if (other.TaxFreeFlag != false) {
        TaxFreeFlag = other.TaxFreeFlag;
      }
      if (other.AmortizationFlag != false) {
        AmortizationFlag = other.AmortizationFlag;
      }
      if (other.FloatingCouponFlag != false) {
        FloatingCouponFlag = other.FloatingCouponFlag;
      }
      if (other.PerpetualFlag != false) {
        PerpetualFlag = other.PerpetualFlag;
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.ReturnCondition.Length != 0) {
        ReturnCondition = other.ReturnCondition;
      }
      if (other.stateRegDate_ != null) {
        if (stateRegDate_ == null) {
          StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StateRegDate.MergeFrom(other.StateRegDate);
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.placementPrice_ != null) {
        if (placementPrice_ == null) {
          PlacementPrice = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        PlacementPrice.MergeFrom(other.PlacementPrice);
      }
      if (other.issueSizePlan_ != null) {
        if (issueSizePlan_ == null) {
          IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        IssueSizePlan.MergeFrom(other.IssueSizePlan);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (currentNominal_ == null) {
              CurrentNominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(CurrentNominal);
            break;
          }
          case 18: {
            BorrowName = input.ReadString();
            break;
          }
          case 26: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 42: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 50: {
            IssueKind = input.ReadString();
            break;
          }
          case 58: {
            InterestKind = input.ReadString();
            break;
          }
          case 64: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 72: {
            IndexedNominalFlag = input.ReadBool();
            break;
          }
          case 80: {
            SubordinatedFlag = input.ReadBool();
            break;
          }
          case 88: {
            CollateralFlag = input.ReadBool();
            break;
          }
          case 96: {
            TaxFreeFlag = input.ReadBool();
            break;
          }
          case 104: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 112: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 120: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 130: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 138: {
            ReturnCondition = input.ReadString();
            break;
          }
          case 146: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 154: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 162: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 170: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (currentNominal_ == null) {
              CurrentNominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(CurrentNominal);
            break;
          }
          case 18: {
            BorrowName = input.ReadString();
            break;
          }
          case 26: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 42: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 50: {
            IssueKind = input.ReadString();
            break;
          }
          case 58: {
            InterestKind = input.ReadString();
            break;
          }
          case 64: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 72: {
            IndexedNominalFlag = input.ReadBool();
            break;
          }
          case 80: {
            SubordinatedFlag = input.ReadBool();
            break;
          }
          case 88: {
            CollateralFlag = input.ReadBool();
            break;
          }
          case 96: {
            TaxFreeFlag = input.ReadBool();
            break;
          }
          case 104: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 112: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 120: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 130: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 138: {
            ReturnCondition = input.ReadString();
            break;
          }
          case 146: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 154: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 162: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 170: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Структурная нота.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetStructuredProduct : pb::IMessage<AssetStructuredProduct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetStructuredProduct> _parser = new pb::MessageParser<AssetStructuredProduct>(() => new AssetStructuredProduct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetStructuredProduct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetStructuredProduct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetStructuredProduct(AssetStructuredProduct other) : this() {
      borrowName_ = other.borrowName_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      type_ = other.type_;
      logicPortfolio_ = other.logicPortfolio_;
      assetType_ = other.assetType_;
      basicAsset_ = other.basicAsset_;
      safetyBarrier_ = other.safetyBarrier_ != null ? other.safetyBarrier_.Clone() : null;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      issueSizePlan_ = other.issueSizePlan_ != null ? other.issueSizePlan_.Clone() : null;
      issueSize_ = other.issueSize_ != null ? other.issueSize_.Clone() : null;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      issueKind_ = other.issueKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetStructuredProduct Clone() {
      return new AssetStructuredProduct(this);
    }

    /// <summary>Field number for the "borrow_name" field.</summary>
    public const int BorrowNameFieldNumber = 1;
    private string borrowName_ = "";
    /// <summary>
    ///Наименование заемщика.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BorrowName {
      get { return borrowName_; }
      set {
        borrowName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 3;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Tinkoff.InvestApi.V1.StructuredProductType type_ = global::Tinkoff.InvestApi.V1.StructuredProductType.SpTypeUnspecified;
    /// <summary>
    ///Тип структурной ноты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.StructuredProductType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "logic_portfolio" field.</summary>
    public const int LogicPortfolioFieldNumber = 5;
    private string logicPortfolio_ = "";
    /// <summary>
    ///Стратегия портфеля.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LogicPortfolio {
      get { return logicPortfolio_; }
      set {
        logicPortfolio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 6;
    private global::Tinkoff.InvestApi.V1.AssetType assetType_ = global::Tinkoff.InvestApi.V1.AssetType.Unspecified;
    /// <summary>
    ///Тип базового актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.AssetType AssetType {
      get { return assetType_; }
      set {
        assetType_ = value;
      }
    }

    /// <summary>Field number for the "basic_asset" field.</summary>
    public const int BasicAssetFieldNumber = 7;
    private string basicAsset_ = "";
    /// <summary>
    ///Вид базового актива в зависимости от типа базового актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAsset {
      get { return basicAsset_; }
      set {
        basicAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "safety_barrier" field.</summary>
    public const int SafetyBarrierFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation safetyBarrier_;
    /// <summary>
    ///Барьер сохранности (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation SafetyBarrier {
      get { return safetyBarrier_; }
      set {
        safetyBarrier_ = value;
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maturityDate_;
    /// <summary>
    ///Дата погашения.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation issueSizePlan_;
    /// <summary>
    ///Объявленное количество шт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation issueSize_;
    /// <summary>
    ///Объем размещения.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения ноты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 13;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetStructuredProduct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetStructuredProduct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BorrowName != other.BorrowName) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      if (Type != other.Type) return false;
      if (LogicPortfolio != other.LogicPortfolio) return false;
      if (AssetType != other.AssetType) return false;
      if (BasicAsset != other.BasicAsset) return false;
      if (!object.Equals(SafetyBarrier, other.SafetyBarrier)) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (!object.Equals(IssueSizePlan, other.IssueSizePlan)) return false;
      if (!object.Equals(IssueSize, other.IssueSize)) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (IssueKind != other.IssueKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BorrowName.Length != 0) hash ^= BorrowName.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (Type != global::Tinkoff.InvestApi.V1.StructuredProductType.SpTypeUnspecified) hash ^= Type.GetHashCode();
      if (LogicPortfolio.Length != 0) hash ^= LogicPortfolio.GetHashCode();
      if (AssetType != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) hash ^= AssetType.GetHashCode();
      if (BasicAsset.Length != 0) hash ^= BasicAsset.GetHashCode();
      if (safetyBarrier_ != null) hash ^= SafetyBarrier.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (issueSizePlan_ != null) hash ^= IssueSizePlan.GetHashCode();
      if (issueSize_ != null) hash ^= IssueSize.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BorrowName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BorrowName);
      }
      if (nominal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NominalCurrency);
      }
      if (Type != global::Tinkoff.InvestApi.V1.StructuredProductType.SpTypeUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (LogicPortfolio.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogicPortfolio);
      }
      if (AssetType != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BasicAsset);
      }
      if (safetyBarrier_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SafetyBarrier);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MaturityDate);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(IssueSizePlan);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(IssueSize);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlacementDate);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(IssueKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BorrowName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BorrowName);
      }
      if (nominal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NominalCurrency);
      }
      if (Type != global::Tinkoff.InvestApi.V1.StructuredProductType.SpTypeUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (LogicPortfolio.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogicPortfolio);
      }
      if (AssetType != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BasicAsset);
      }
      if (safetyBarrier_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SafetyBarrier);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MaturityDate);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(IssueSizePlan);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(IssueSize);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlacementDate);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(IssueKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BorrowName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BorrowName);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (Type != global::Tinkoff.InvestApi.V1.StructuredProductType.SpTypeUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (LogicPortfolio.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogicPortfolio);
      }
      if (AssetType != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AssetType);
      }
      if (BasicAsset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicAsset);
      }
      if (safetyBarrier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SafetyBarrier);
      }
      if (maturityDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (issueSizePlan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSizePlan);
      }
      if (issueSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSize);
      }
      if (placementDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (IssueKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetStructuredProduct other) {
      if (other == null) {
        return;
      }
      if (other.BorrowName.Length != 0) {
        BorrowName = other.BorrowName;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      if (other.Type != global::Tinkoff.InvestApi.V1.StructuredProductType.SpTypeUnspecified) {
        Type = other.Type;
      }
      if (other.LogicPortfolio.Length != 0) {
        LogicPortfolio = other.LogicPortfolio;
      }
      if (other.AssetType != global::Tinkoff.InvestApi.V1.AssetType.Unspecified) {
        AssetType = other.AssetType;
      }
      if (other.BasicAsset.Length != 0) {
        BasicAsset = other.BasicAsset;
      }
      if (other.safetyBarrier_ != null) {
        if (safetyBarrier_ == null) {
          SafetyBarrier = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        SafetyBarrier.MergeFrom(other.SafetyBarrier);
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.issueSizePlan_ != null) {
        if (issueSizePlan_ == null) {
          IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        IssueSizePlan.MergeFrom(other.IssueSizePlan);
      }
      if (other.issueSize_ != null) {
        if (issueSize_ == null) {
          IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        IssueSize.MergeFrom(other.IssueSize);
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BorrowName = input.ReadString();
            break;
          }
          case 18: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 26: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::Tinkoff.InvestApi.V1.StructuredProductType) input.ReadEnum();
            break;
          }
          case 42: {
            LogicPortfolio = input.ReadString();
            break;
          }
          case 48: {
            AssetType = (global::Tinkoff.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 58: {
            BasicAsset = input.ReadString();
            break;
          }
          case 66: {
            if (safetyBarrier_ == null) {
              SafetyBarrier = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(SafetyBarrier);
            break;
          }
          case 74: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 82: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
          case 90: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 98: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 106: {
            IssueKind = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BorrowName = input.ReadString();
            break;
          }
          case 18: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 26: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::Tinkoff.InvestApi.V1.StructuredProductType) input.ReadEnum();
            break;
          }
          case 42: {
            LogicPortfolio = input.ReadString();
            break;
          }
          case 48: {
            AssetType = (global::Tinkoff.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 58: {
            BasicAsset = input.ReadString();
            break;
          }
          case 66: {
            if (safetyBarrier_ == null) {
              SafetyBarrier = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(SafetyBarrier);
            break;
          }
          case 74: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 82: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
          case 90: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 98: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 106: {
            IssueKind = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Фонд.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetEtf : pb::IMessage<AssetEtf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetEtf> _parser = new pb::MessageParser<AssetEtf>(() => new AssetEtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetEtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetEtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetEtf(AssetEtf other) : this() {
      totalExpense_ = other.totalExpense_ != null ? other.totalExpense_.Clone() : null;
      hurdleRate_ = other.hurdleRate_ != null ? other.hurdleRate_.Clone() : null;
      performanceFee_ = other.performanceFee_ != null ? other.performanceFee_.Clone() : null;
      fixedCommission_ = other.fixedCommission_ != null ? other.fixedCommission_.Clone() : null;
      paymentType_ = other.paymentType_;
      watermarkFlag_ = other.watermarkFlag_;
      buyPremium_ = other.buyPremium_ != null ? other.buyPremium_.Clone() : null;
      sellDiscount_ = other.sellDiscount_ != null ? other.sellDiscount_.Clone() : null;
      rebalancingFlag_ = other.rebalancingFlag_;
      rebalancingFreq_ = other.rebalancingFreq_;
      managementType_ = other.managementType_;
      primaryIndex_ = other.primaryIndex_;
      focusType_ = other.focusType_;
      leveragedFlag_ = other.leveragedFlag_;
      numShare_ = other.numShare_ != null ? other.numShare_.Clone() : null;
      ucitsFlag_ = other.ucitsFlag_;
      releasedDate_ = other.releasedDate_ != null ? other.releasedDate_.Clone() : null;
      description_ = other.description_;
      primaryIndexDescription_ = other.primaryIndexDescription_;
      primaryIndexCompany_ = other.primaryIndexCompany_;
      indexRecoveryPeriod_ = other.indexRecoveryPeriod_ != null ? other.indexRecoveryPeriod_.Clone() : null;
      inavCode_ = other.inavCode_;
      divYieldFlag_ = other.divYieldFlag_;
      expenseCommission_ = other.expenseCommission_ != null ? other.expenseCommission_.Clone() : null;
      primaryIndexTrackingError_ = other.primaryIndexTrackingError_ != null ? other.primaryIndexTrackingError_.Clone() : null;
      rebalancingPlan_ = other.rebalancingPlan_;
      taxRate_ = other.taxRate_;
      rebalancingDates_ = other.rebalancingDates_.Clone();
      issueKind_ = other.issueKind_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetEtf Clone() {
      return new AssetEtf(this);
    }

    /// <summary>Field number for the "total_expense" field.</summary>
    public const int TotalExpenseFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Quotation totalExpense_;
    /// <summary>
    ///Суммарные расходы фонда (в %).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation TotalExpense {
      get { return totalExpense_; }
      set {
        totalExpense_ = value;
      }
    }

    /// <summary>Field number for the "hurdle_rate" field.</summary>
    public const int HurdleRateFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.Quotation hurdleRate_;
    /// <summary>
    ///Барьерная ставка доходности после которой фонд имеет право на perfomance fee (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation HurdleRate {
      get { return hurdleRate_; }
      set {
        hurdleRate_ = value;
      }
    }

    /// <summary>Field number for the "performance_fee" field.</summary>
    public const int PerformanceFeeFieldNumber = 3;
    private global::Tinkoff.InvestApi.V1.Quotation performanceFee_;
    /// <summary>
    ///Комиссия за успешные результаты фонда (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation PerformanceFee {
      get { return performanceFee_; }
      set {
        performanceFee_ = value;
      }
    }

    /// <summary>Field number for the "fixed_commission" field.</summary>
    public const int FixedCommissionFieldNumber = 4;
    private global::Tinkoff.InvestApi.V1.Quotation fixedCommission_;
    /// <summary>
    ///Фиксированная комиссия за управление (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation FixedCommission {
      get { return fixedCommission_; }
      set {
        fixedCommission_ = value;
      }
    }

    /// <summary>Field number for the "payment_type" field.</summary>
    public const int PaymentTypeFieldNumber = 5;
    private string paymentType_ = "";
    /// <summary>
    ///Тип распределения доходов от выплат по бумагам.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PaymentType {
      get { return paymentType_; }
      set {
        paymentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "watermark_flag" field.</summary>
    public const int WatermarkFlagFieldNumber = 6;
    private bool watermarkFlag_;
    /// <summary>
    ///Признак необходимости выхода фонда в плюс для получения комиссии.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WatermarkFlag {
      get { return watermarkFlag_; }
      set {
        watermarkFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_premium" field.</summary>
    public const int BuyPremiumFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation buyPremium_;
    /// <summary>
    ///Премия (надбавка к цене) при покупке доли в фонде (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation BuyPremium {
      get { return buyPremium_; }
      set {
        buyPremium_ = value;
      }
    }

    /// <summary>Field number for the "sell_discount" field.</summary>
    public const int SellDiscountFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation sellDiscount_;
    /// <summary>
    ///Ставка дисконта (вычет из цены) при продаже доли в фонде (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation SellDiscount {
      get { return sellDiscount_; }
      set {
        sellDiscount_ = value;
      }
    }

    /// <summary>Field number for the "rebalancing_flag" field.</summary>
    public const int RebalancingFlagFieldNumber = 9;
    private bool rebalancingFlag_;
    /// <summary>
    ///Признак ребалансируемости портфеля фонда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RebalancingFlag {
      get { return rebalancingFlag_; }
      set {
        rebalancingFlag_ = value;
      }
    }

    /// <summary>Field number for the "rebalancing_freq" field.</summary>
    public const int RebalancingFreqFieldNumber = 10;
    private string rebalancingFreq_ = "";
    /// <summary>
    ///Периодичность ребалансировки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RebalancingFreq {
      get { return rebalancingFreq_; }
      set {
        rebalancingFreq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "management_type" field.</summary>
    public const int ManagementTypeFieldNumber = 11;
    private string managementType_ = "";
    /// <summary>
    ///Тип управления.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ManagementType {
      get { return managementType_; }
      set {
        managementType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_index" field.</summary>
    public const int PrimaryIndexFieldNumber = 12;
    private string primaryIndex_ = "";
    /// <summary>
    ///Индекс, который реплицирует (старается копировать) фонд.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryIndex {
      get { return primaryIndex_; }
      set {
        primaryIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "focus_type" field.</summary>
    public const int FocusTypeFieldNumber = 13;
    private string focusType_ = "";
    /// <summary>
    ///База ETF.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FocusType {
      get { return focusType_; }
      set {
        focusType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leveraged_flag" field.</summary>
    public const int LeveragedFlagFieldNumber = 14;
    private bool leveragedFlag_;
    /// <summary>
    ///Признак использования заемных активов (плечо).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeveragedFlag {
      get { return leveragedFlag_; }
      set {
        leveragedFlag_ = value;
      }
    }

    /// <summary>Field number for the "num_share" field.</summary>
    public const int NumShareFieldNumber = 15;
    private global::Tinkoff.InvestApi.V1.Quotation numShare_;
    /// <summary>
    ///Количество акций в обращении.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation NumShare {
      get { return numShare_; }
      set {
        numShare_ = value;
      }
    }

    /// <summary>Field number for the "ucits_flag" field.</summary>
    public const int UcitsFlagFieldNumber = 16;
    private bool ucitsFlag_;
    /// <summary>
    ///Признак обязательства по отчетности перед регулятором.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UcitsFlag {
      get { return ucitsFlag_; }
      set {
        ucitsFlag_ = value;
      }
    }

    /// <summary>Field number for the "released_date" field.</summary>
    public const int ReleasedDateFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Timestamp releasedDate_;
    /// <summary>
    ///Дата выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReleasedDate {
      get { return releasedDate_; }
      set {
        releasedDate_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 18;
    private string description_ = "";
    /// <summary>
    ///Описание фонда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_index_description" field.</summary>
    public const int PrimaryIndexDescriptionFieldNumber = 19;
    private string primaryIndexDescription_ = "";
    /// <summary>
    ///Описание индекса, за которым следует фонд.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryIndexDescription {
      get { return primaryIndexDescription_; }
      set {
        primaryIndexDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_index_company" field.</summary>
    public const int PrimaryIndexCompanyFieldNumber = 20;
    private string primaryIndexCompany_ = "";
    /// <summary>
    ///Основные компании, в которые вкладывается фонд.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryIndexCompany {
      get { return primaryIndexCompany_; }
      set {
        primaryIndexCompany_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index_recovery_period" field.</summary>
    public const int IndexRecoveryPeriodFieldNumber = 21;
    private global::Tinkoff.InvestApi.V1.Quotation indexRecoveryPeriod_;
    /// <summary>
    ///Срок восстановления индекса (после просадки).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation IndexRecoveryPeriod {
      get { return indexRecoveryPeriod_; }
      set {
        indexRecoveryPeriod_ = value;
      }
    }

    /// <summary>Field number for the "inav_code" field.</summary>
    public const int InavCodeFieldNumber = 22;
    private string inavCode_ = "";
    /// <summary>
    ///IVAV-код.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InavCode {
      get { return inavCode_; }
      set {
        inavCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "div_yield_flag" field.</summary>
    public const int DivYieldFlagFieldNumber = 23;
    private bool divYieldFlag_;
    /// <summary>
    ///Признак наличия дивидендной доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivYieldFlag {
      get { return divYieldFlag_; }
      set {
        divYieldFlag_ = value;
      }
    }

    /// <summary>Field number for the "expense_commission" field.</summary>
    public const int ExpenseCommissionFieldNumber = 24;
    private global::Tinkoff.InvestApi.V1.Quotation expenseCommission_;
    /// <summary>
    ///Комиссия на покрытие расходов фонда (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation ExpenseCommission {
      get { return expenseCommission_; }
      set {
        expenseCommission_ = value;
      }
    }

    /// <summary>Field number for the "primary_index_tracking_error" field.</summary>
    public const int PrimaryIndexTrackingErrorFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.Quotation primaryIndexTrackingError_;
    /// <summary>
    ///Ошибка следования за индексом (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation PrimaryIndexTrackingError {
      get { return primaryIndexTrackingError_; }
      set {
        primaryIndexTrackingError_ = value;
      }
    }

    /// <summary>Field number for the "rebalancing_plan" field.</summary>
    public const int RebalancingPlanFieldNumber = 26;
    private string rebalancingPlan_ = "";
    /// <summary>
    ///Плановая ребалансировка портфеля.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RebalancingPlan {
      get { return rebalancingPlan_; }
      set {
        rebalancingPlan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tax_rate" field.</summary>
    public const int TaxRateFieldNumber = 27;
    private string taxRate_ = "";
    /// <summary>
    ///Ставки налогообложения дивидендов и купонов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TaxRate {
      get { return taxRate_; }
      set {
        taxRate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rebalancing_dates" field.</summary>
    public const int RebalancingDatesFieldNumber = 28;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Timestamp> _repeated_rebalancingDates_codec
        = pb::FieldCodec.ForMessage(226, global::Google.Protobuf.WellKnownTypes.Timestamp.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> rebalancingDates_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp>();
    /// <summary>
    ///Даты ребалансировок.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> RebalancingDates {
      get { return rebalancingDates_; }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 29;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 30;
    private global::Tinkoff.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 31;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetEtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetEtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TotalExpense, other.TotalExpense)) return false;
      if (!object.Equals(HurdleRate, other.HurdleRate)) return false;
      if (!object.Equals(PerformanceFee, other.PerformanceFee)) return false;
      if (!object.Equals(FixedCommission, other.FixedCommission)) return false;
      if (PaymentType != other.PaymentType) return false;
      if (WatermarkFlag != other.WatermarkFlag) return false;
      if (!object.Equals(BuyPremium, other.BuyPremium)) return false;
      if (!object.Equals(SellDiscount, other.SellDiscount)) return false;
      if (RebalancingFlag != other.RebalancingFlag) return false;
      if (RebalancingFreq != other.RebalancingFreq) return false;
      if (ManagementType != other.ManagementType) return false;
      if (PrimaryIndex != other.PrimaryIndex) return false;
      if (FocusType != other.FocusType) return false;
      if (LeveragedFlag != other.LeveragedFlag) return false;
      if (!object.Equals(NumShare, other.NumShare)) return false;
      if (UcitsFlag != other.UcitsFlag) return false;
      if (!object.Equals(ReleasedDate, other.ReleasedDate)) return false;
      if (Description != other.Description) return false;
      if (PrimaryIndexDescription != other.PrimaryIndexDescription) return false;
      if (PrimaryIndexCompany != other.PrimaryIndexCompany) return false;
      if (!object.Equals(IndexRecoveryPeriod, other.IndexRecoveryPeriod)) return false;
      if (InavCode != other.InavCode) return false;
      if (DivYieldFlag != other.DivYieldFlag) return false;
      if (!object.Equals(ExpenseCommission, other.ExpenseCommission)) return false;
      if (!object.Equals(PrimaryIndexTrackingError, other.PrimaryIndexTrackingError)) return false;
      if (RebalancingPlan != other.RebalancingPlan) return false;
      if (TaxRate != other.TaxRate) return false;
      if(!rebalancingDates_.Equals(other.rebalancingDates_)) return false;
      if (IssueKind != other.IssueKind) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (totalExpense_ != null) hash ^= TotalExpense.GetHashCode();
      if (hurdleRate_ != null) hash ^= HurdleRate.GetHashCode();
      if (performanceFee_ != null) hash ^= PerformanceFee.GetHashCode();
      if (fixedCommission_ != null) hash ^= FixedCommission.GetHashCode();
      if (PaymentType.Length != 0) hash ^= PaymentType.GetHashCode();
      if (WatermarkFlag != false) hash ^= WatermarkFlag.GetHashCode();
      if (buyPremium_ != null) hash ^= BuyPremium.GetHashCode();
      if (sellDiscount_ != null) hash ^= SellDiscount.GetHashCode();
      if (RebalancingFlag != false) hash ^= RebalancingFlag.GetHashCode();
      if (RebalancingFreq.Length != 0) hash ^= RebalancingFreq.GetHashCode();
      if (ManagementType.Length != 0) hash ^= ManagementType.GetHashCode();
      if (PrimaryIndex.Length != 0) hash ^= PrimaryIndex.GetHashCode();
      if (FocusType.Length != 0) hash ^= FocusType.GetHashCode();
      if (LeveragedFlag != false) hash ^= LeveragedFlag.GetHashCode();
      if (numShare_ != null) hash ^= NumShare.GetHashCode();
      if (UcitsFlag != false) hash ^= UcitsFlag.GetHashCode();
      if (releasedDate_ != null) hash ^= ReleasedDate.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (PrimaryIndexDescription.Length != 0) hash ^= PrimaryIndexDescription.GetHashCode();
      if (PrimaryIndexCompany.Length != 0) hash ^= PrimaryIndexCompany.GetHashCode();
      if (indexRecoveryPeriod_ != null) hash ^= IndexRecoveryPeriod.GetHashCode();
      if (InavCode.Length != 0) hash ^= InavCode.GetHashCode();
      if (DivYieldFlag != false) hash ^= DivYieldFlag.GetHashCode();
      if (expenseCommission_ != null) hash ^= ExpenseCommission.GetHashCode();
      if (primaryIndexTrackingError_ != null) hash ^= PrimaryIndexTrackingError.GetHashCode();
      if (RebalancingPlan.Length != 0) hash ^= RebalancingPlan.GetHashCode();
      if (TaxRate.Length != 0) hash ^= TaxRate.GetHashCode();
      hash ^= rebalancingDates_.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (totalExpense_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TotalExpense);
      }
      if (hurdleRate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HurdleRate);
      }
      if (performanceFee_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PerformanceFee);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FixedCommission);
      }
      if (PaymentType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentType);
      }
      if (WatermarkFlag != false) {
        output.WriteRawTag(48);
        output.WriteBool(WatermarkFlag);
      }
      if (buyPremium_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BuyPremium);
      }
      if (sellDiscount_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SellDiscount);
      }
      if (RebalancingFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(RebalancingFlag);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RebalancingFreq);
      }
      if (ManagementType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ManagementType);
      }
      if (PrimaryIndex.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PrimaryIndex);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(FocusType);
      }
      if (LeveragedFlag != false) {
        output.WriteRawTag(112);
        output.WriteBool(LeveragedFlag);
      }
      if (numShare_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(NumShare);
      }
      if (UcitsFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(UcitsFlag);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Description);
      }
      if (PrimaryIndexDescription.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PrimaryIndexDescription);
      }
      if (PrimaryIndexCompany.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PrimaryIndexCompany);
      }
      if (indexRecoveryPeriod_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IndexRecoveryPeriod);
      }
      if (InavCode.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(InavCode);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (expenseCommission_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpenseCommission);
      }
      if (primaryIndexTrackingError_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PrimaryIndexTrackingError);
      }
      if (RebalancingPlan.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(RebalancingPlan);
      }
      if (TaxRate.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(TaxRate);
      }
      rebalancingDates_.WriteTo(output, _repeated_rebalancingDates_codec);
      if (IssueKind.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(IssueKind);
      }
      if (nominal_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(NominalCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (totalExpense_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TotalExpense);
      }
      if (hurdleRate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HurdleRate);
      }
      if (performanceFee_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PerformanceFee);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FixedCommission);
      }
      if (PaymentType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentType);
      }
      if (WatermarkFlag != false) {
        output.WriteRawTag(48);
        output.WriteBool(WatermarkFlag);
      }
      if (buyPremium_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BuyPremium);
      }
      if (sellDiscount_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SellDiscount);
      }
      if (RebalancingFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(RebalancingFlag);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RebalancingFreq);
      }
      if (ManagementType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ManagementType);
      }
      if (PrimaryIndex.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PrimaryIndex);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(FocusType);
      }
      if (LeveragedFlag != false) {
        output.WriteRawTag(112);
        output.WriteBool(LeveragedFlag);
      }
      if (numShare_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(NumShare);
      }
      if (UcitsFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(UcitsFlag);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Description);
      }
      if (PrimaryIndexDescription.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PrimaryIndexDescription);
      }
      if (PrimaryIndexCompany.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PrimaryIndexCompany);
      }
      if (indexRecoveryPeriod_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IndexRecoveryPeriod);
      }
      if (InavCode.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(InavCode);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (expenseCommission_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpenseCommission);
      }
      if (primaryIndexTrackingError_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PrimaryIndexTrackingError);
      }
      if (RebalancingPlan.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(RebalancingPlan);
      }
      if (TaxRate.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(TaxRate);
      }
      rebalancingDates_.WriteTo(ref output, _repeated_rebalancingDates_codec);
      if (IssueKind.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(IssueKind);
      }
      if (nominal_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(NominalCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (totalExpense_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalExpense);
      }
      if (hurdleRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HurdleRate);
      }
      if (performanceFee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PerformanceFee);
      }
      if (fixedCommission_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedCommission);
      }
      if (PaymentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentType);
      }
      if (WatermarkFlag != false) {
        size += 1 + 1;
      }
      if (buyPremium_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuyPremium);
      }
      if (sellDiscount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellDiscount);
      }
      if (RebalancingFlag != false) {
        size += 1 + 1;
      }
      if (RebalancingFreq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RebalancingFreq);
      }
      if (ManagementType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ManagementType);
      }
      if (PrimaryIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryIndex);
      }
      if (FocusType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FocusType);
      }
      if (LeveragedFlag != false) {
        size += 1 + 1;
      }
      if (numShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumShare);
      }
      if (UcitsFlag != false) {
        size += 2 + 1;
      }
      if (releasedDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReleasedDate);
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (PrimaryIndexDescription.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrimaryIndexDescription);
      }
      if (PrimaryIndexCompany.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrimaryIndexCompany);
      }
      if (indexRecoveryPeriod_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndexRecoveryPeriod);
      }
      if (InavCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InavCode);
      }
      if (DivYieldFlag != false) {
        size += 2 + 1;
      }
      if (expenseCommission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpenseCommission);
      }
      if (primaryIndexTrackingError_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrimaryIndexTrackingError);
      }
      if (RebalancingPlan.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RebalancingPlan);
      }
      if (TaxRate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TaxRate);
      }
      size += rebalancingDates_.CalculateSize(_repeated_rebalancingDates_codec);
      if (IssueKind.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetEtf other) {
      if (other == null) {
        return;
      }
      if (other.totalExpense_ != null) {
        if (totalExpense_ == null) {
          TotalExpense = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        TotalExpense.MergeFrom(other.TotalExpense);
      }
      if (other.hurdleRate_ != null) {
        if (hurdleRate_ == null) {
          HurdleRate = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        HurdleRate.MergeFrom(other.HurdleRate);
      }
      if (other.performanceFee_ != null) {
        if (performanceFee_ == null) {
          PerformanceFee = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        PerformanceFee.MergeFrom(other.PerformanceFee);
      }
      if (other.fixedCommission_ != null) {
        if (fixedCommission_ == null) {
          FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        FixedCommission.MergeFrom(other.FixedCommission);
      }
      if (other.PaymentType.Length != 0) {
        PaymentType = other.PaymentType;
      }
      if (other.WatermarkFlag != false) {
        WatermarkFlag = other.WatermarkFlag;
      }
      if (other.buyPremium_ != null) {
        if (buyPremium_ == null) {
          BuyPremium = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        BuyPremium.MergeFrom(other.BuyPremium);
      }
      if (other.sellDiscount_ != null) {
        if (sellDiscount_ == null) {
          SellDiscount = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        SellDiscount.MergeFrom(other.SellDiscount);
      }
      if (other.RebalancingFlag != false) {
        RebalancingFlag = other.RebalancingFlag;
      }
      if (other.RebalancingFreq.Length != 0) {
        RebalancingFreq = other.RebalancingFreq;
      }
      if (other.ManagementType.Length != 0) {
        ManagementType = other.ManagementType;
      }
      if (other.PrimaryIndex.Length != 0) {
        PrimaryIndex = other.PrimaryIndex;
      }
      if (other.FocusType.Length != 0) {
        FocusType = other.FocusType;
      }
      if (other.LeveragedFlag != false) {
        LeveragedFlag = other.LeveragedFlag;
      }
      if (other.numShare_ != null) {
        if (numShare_ == null) {
          NumShare = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        NumShare.MergeFrom(other.NumShare);
      }
      if (other.UcitsFlag != false) {
        UcitsFlag = other.UcitsFlag;
      }
      if (other.releasedDate_ != null) {
        if (releasedDate_ == null) {
          ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReleasedDate.MergeFrom(other.ReleasedDate);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.PrimaryIndexDescription.Length != 0) {
        PrimaryIndexDescription = other.PrimaryIndexDescription;
      }
      if (other.PrimaryIndexCompany.Length != 0) {
        PrimaryIndexCompany = other.PrimaryIndexCompany;
      }
      if (other.indexRecoveryPeriod_ != null) {
        if (indexRecoveryPeriod_ == null) {
          IndexRecoveryPeriod = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        IndexRecoveryPeriod.MergeFrom(other.IndexRecoveryPeriod);
      }
      if (other.InavCode.Length != 0) {
        InavCode = other.InavCode;
      }
      if (other.DivYieldFlag != false) {
        DivYieldFlag = other.DivYieldFlag;
      }
      if (other.expenseCommission_ != null) {
        if (expenseCommission_ == null) {
          ExpenseCommission = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        ExpenseCommission.MergeFrom(other.ExpenseCommission);
      }
      if (other.primaryIndexTrackingError_ != null) {
        if (primaryIndexTrackingError_ == null) {
          PrimaryIndexTrackingError = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        PrimaryIndexTrackingError.MergeFrom(other.PrimaryIndexTrackingError);
      }
      if (other.RebalancingPlan.Length != 0) {
        RebalancingPlan = other.RebalancingPlan;
      }
      if (other.TaxRate.Length != 0) {
        TaxRate = other.TaxRate;
      }
      rebalancingDates_.Add(other.rebalancingDates_);
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (totalExpense_ == null) {
              TotalExpense = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(TotalExpense);
            break;
          }
          case 18: {
            if (hurdleRate_ == null) {
              HurdleRate = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(HurdleRate);
            break;
          }
          case 26: {
            if (performanceFee_ == null) {
              PerformanceFee = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PerformanceFee);
            break;
          }
          case 34: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 42: {
            PaymentType = input.ReadString();
            break;
          }
          case 48: {
            WatermarkFlag = input.ReadBool();
            break;
          }
          case 58: {
            if (buyPremium_ == null) {
              BuyPremium = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BuyPremium);
            break;
          }
          case 66: {
            if (sellDiscount_ == null) {
              SellDiscount = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(SellDiscount);
            break;
          }
          case 72: {
            RebalancingFlag = input.ReadBool();
            break;
          }
          case 82: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 90: {
            ManagementType = input.ReadString();
            break;
          }
          case 98: {
            PrimaryIndex = input.ReadString();
            break;
          }
          case 106: {
            FocusType = input.ReadString();
            break;
          }
          case 112: {
            LeveragedFlag = input.ReadBool();
            break;
          }
          case 122: {
            if (numShare_ == null) {
              NumShare = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShare);
            break;
          }
          case 128: {
            UcitsFlag = input.ReadBool();
            break;
          }
          case 138: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 146: {
            Description = input.ReadString();
            break;
          }
          case 154: {
            PrimaryIndexDescription = input.ReadString();
            break;
          }
          case 162: {
            PrimaryIndexCompany = input.ReadString();
            break;
          }
          case 170: {
            if (indexRecoveryPeriod_ == null) {
              IndexRecoveryPeriod = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IndexRecoveryPeriod);
            break;
          }
          case 178: {
            InavCode = input.ReadString();
            break;
          }
          case 184: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 194: {
            if (expenseCommission_ == null) {
              ExpenseCommission = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ExpenseCommission);
            break;
          }
          case 202: {
            if (primaryIndexTrackingError_ == null) {
              PrimaryIndexTrackingError = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PrimaryIndexTrackingError);
            break;
          }
          case 210: {
            RebalancingPlan = input.ReadString();
            break;
          }
          case 218: {
            TaxRate = input.ReadString();
            break;
          }
          case 226: {
            rebalancingDates_.AddEntriesFrom(input, _repeated_rebalancingDates_codec);
            break;
          }
          case 234: {
            IssueKind = input.ReadString();
            break;
          }
          case 242: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 250: {
            NominalCurrency = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (totalExpense_ == null) {
              TotalExpense = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(TotalExpense);
            break;
          }
          case 18: {
            if (hurdleRate_ == null) {
              HurdleRate = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(HurdleRate);
            break;
          }
          case 26: {
            if (performanceFee_ == null) {
              PerformanceFee = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PerformanceFee);
            break;
          }
          case 34: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 42: {
            PaymentType = input.ReadString();
            break;
          }
          case 48: {
            WatermarkFlag = input.ReadBool();
            break;
          }
          case 58: {
            if (buyPremium_ == null) {
              BuyPremium = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BuyPremium);
            break;
          }
          case 66: {
            if (sellDiscount_ == null) {
              SellDiscount = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(SellDiscount);
            break;
          }
          case 72: {
            RebalancingFlag = input.ReadBool();
            break;
          }
          case 82: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 90: {
            ManagementType = input.ReadString();
            break;
          }
          case 98: {
            PrimaryIndex = input.ReadString();
            break;
          }
          case 106: {
            FocusType = input.ReadString();
            break;
          }
          case 112: {
            LeveragedFlag = input.ReadBool();
            break;
          }
          case 122: {
            if (numShare_ == null) {
              NumShare = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShare);
            break;
          }
          case 128: {
            UcitsFlag = input.ReadBool();
            break;
          }
          case 138: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 146: {
            Description = input.ReadString();
            break;
          }
          case 154: {
            PrimaryIndexDescription = input.ReadString();
            break;
          }
          case 162: {
            PrimaryIndexCompany = input.ReadString();
            break;
          }
          case 170: {
            if (indexRecoveryPeriod_ == null) {
              IndexRecoveryPeriod = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IndexRecoveryPeriod);
            break;
          }
          case 178: {
            InavCode = input.ReadString();
            break;
          }
          case 184: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 194: {
            if (expenseCommission_ == null) {
              ExpenseCommission = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ExpenseCommission);
            break;
          }
          case 202: {
            if (primaryIndexTrackingError_ == null) {
              PrimaryIndexTrackingError = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PrimaryIndexTrackingError);
            break;
          }
          case 210: {
            RebalancingPlan = input.ReadString();
            break;
          }
          case 218: {
            TaxRate = input.ReadString();
            break;
          }
          case 226: {
            rebalancingDates_.AddEntriesFrom(ref input, _repeated_rebalancingDates_codec);
            break;
          }
          case 234: {
            IssueKind = input.ReadString();
            break;
          }
          case 242: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 250: {
            NominalCurrency = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Клиринговый сертификат участия.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetClearingCertificate : pb::IMessage<AssetClearingCertificate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetClearingCertificate> _parser = new pb::MessageParser<AssetClearingCertificate>(() => new AssetClearingCertificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetClearingCertificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetClearingCertificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetClearingCertificate(AssetClearingCertificate other) : this() {
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetClearingCertificate Clone() {
      return new AssetClearingCertificate(this);
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 2;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetClearingCertificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetClearingCertificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (nominal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NominalCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (nominal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NominalCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetClearingCertificate other) {
      if (other == null) {
        return;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 18: {
            NominalCurrency = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 18: {
            NominalCurrency = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Бренд.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Brand : pb::IMessage<Brand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Brand> _parser = new pb::MessageParser<Brand>(() => new Brand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Brand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Brand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Brand(Brand other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      description_ = other.description_;
      info_ = other.info_;
      company_ = other.company_;
      sector_ = other.sector_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Brand Clone() {
      return new Brand(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///uid идентификатор бренда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///Наименование бренда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    ///Описание.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private string info_ = "";
    /// <summary>
    ///Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "company" field.</summary>
    public const int CompanyFieldNumber = 5;
    private string company_ = "";
    /// <summary>
    ///Компания.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Company {
      get { return company_; }
      set {
        company_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 6;
    private string sector_ = "";
    /// <summary>
    ///Сектор.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 7;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 8;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Brand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Brand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Info != other.Info) return false;
      if (Company != other.Company) return false;
      if (Sector != other.Sector) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (Company.Length != 0) hash ^= Company.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info);
      }
      if (Company.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Company);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Sector);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CountryOfRiskName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info);
      }
      if (Company.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Company);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Sector);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CountryOfRiskName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (Company.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Company);
      }
      if (Sector.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (CountryOfRisk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Brand other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.Company.Length != 0) {
        Company = other.Company;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Info = input.ReadString();
            break;
          }
          case 42: {
            Company = input.ReadString();
            break;
          }
          case 50: {
            Sector = input.ReadString();
            break;
          }
          case 58: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 66: {
            CountryOfRiskName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Info = input.ReadString();
            break;
          }
          case 42: {
            Company = input.ReadString();
            break;
          }
          case 50: {
            Sector = input.ReadString();
            break;
          }
          case 58: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 66: {
            CountryOfRiskName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Идентификаторы инструмента.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetInstrument : pb::IMessage<AssetInstrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetInstrument> _parser = new pb::MessageParser<AssetInstrument>(() => new AssetInstrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetInstrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetInstrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetInstrument(AssetInstrument other) : this() {
      uid_ = other.uid_;
      figi_ = other.figi_;
      instrumentType_ = other.instrumentType_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      links_ = other.links_.Clone();
      instrumentKind_ = other.instrumentKind_;
      positionUid_ = other.positionUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetInstrument Clone() {
      return new AssetInstrument(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///uid идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 2;
    private string figi_ = "";
    /// <summary>
    ///figi идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 3;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 4;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 5;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "links" field.</summary>
    public const int LinksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.InstrumentLink> _repeated_links_codec
        = pb::FieldCodec.ForMessage(50, global::Tinkoff.InvestApi.V1.InstrumentLink.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.InstrumentLink> links_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.InstrumentLink>();
    /// <summary>
    ///Массив связанных инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.InstrumentLink> Links {
      get { return links_; }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 11;
    private string positionUid_ = "";
    /// <summary>
    ///id позиции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetInstrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetInstrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Figi != other.Figi) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if(!links_.Equals(other.links_)) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (PositionUid != other.PositionUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      hash ^= links_.GetHashCode();
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Figi);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstrumentType);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClassCode);
      }
      links_.WriteTo(output, _repeated_links_codec);
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PositionUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Figi);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstrumentType);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClassCode);
      }
      links_.WriteTo(ref output, _repeated_links_codec);
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PositionUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (InstrumentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      size += links_.CalculateSize(_repeated_links_codec);
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (PositionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetInstrument other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      links_.Add(other.links_);
      if (other.InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Figi = input.ReadString();
            break;
          }
          case 26: {
            InstrumentType = input.ReadString();
            break;
          }
          case 34: {
            Ticker = input.ReadString();
            break;
          }
          case 42: {
            ClassCode = input.ReadString();
            break;
          }
          case 50: {
            links_.AddEntriesFrom(input, _repeated_links_codec);
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 90: {
            PositionUid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Figi = input.ReadString();
            break;
          }
          case 26: {
            InstrumentType = input.ReadString();
            break;
          }
          case 34: {
            Ticker = input.ReadString();
            break;
          }
          case 42: {
            ClassCode = input.ReadString();
            break;
          }
          case 50: {
            links_.AddEntriesFrom(ref input, _repeated_links_codec);
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 90: {
            PositionUid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Связь с другим инструментом.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentLink : pb::IMessage<InstrumentLink>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentLink> _parser = new pb::MessageParser<InstrumentLink>(() => new InstrumentLink());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentLink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentLink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentLink(InstrumentLink other) : this() {
      type_ = other.type_;
      instrumentUid_ = other.instrumentUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentLink Clone() {
      return new InstrumentLink(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    ///Тип связи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_uid" field.</summary>
    public const int InstrumentUidFieldNumber = 2;
    private string instrumentUid_ = "";
    /// <summary>
    ///uid идентификатор связанного инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentUid {
      get { return instrumentUid_; }
      set {
        instrumentUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentLink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentLink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (InstrumentUid != other.InstrumentUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (InstrumentUid.Length != 0) hash ^= InstrumentUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (InstrumentUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstrumentUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (InstrumentUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstrumentUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (InstrumentUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentLink other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.InstrumentUid.Length != 0) {
        InstrumentUid = other.InstrumentUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            InstrumentUid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            InstrumentUid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос списка избранных инструментов, входные параметры не требуются.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetFavoritesRequest : pb::IMessage<GetFavoritesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFavoritesRequest> _parser = new pb::MessageParser<GetFavoritesRequest>(() => new GetFavoritesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFavoritesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesRequest(GetFavoritesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesRequest Clone() {
      return new GetFavoritesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFavoritesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFavoritesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFavoritesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///В ответ передаётся список избранных инструментов в качестве массива.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetFavoritesResponse : pb::IMessage<GetFavoritesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFavoritesResponse> _parser = new pb::MessageParser<GetFavoritesResponse>(() => new GetFavoritesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFavoritesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesResponse(GetFavoritesResponse other) : this() {
      favoriteInstruments_ = other.favoriteInstruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesResponse Clone() {
      return new GetFavoritesResponse(this);
    }

    /// <summary>Field number for the "favorite_instruments" field.</summary>
    public const int FavoriteInstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.FavoriteInstrument> _repeated_favoriteInstruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.FavoriteInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.FavoriteInstrument> favoriteInstruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.FavoriteInstrument>();
    /// <summary>
    ///Массив инструментов
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.FavoriteInstrument> FavoriteInstruments {
      get { return favoriteInstruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFavoritesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFavoritesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!favoriteInstruments_.Equals(other.favoriteInstruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= favoriteInstruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      favoriteInstruments_.WriteTo(output, _repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      favoriteInstruments_.WriteTo(ref output, _repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += favoriteInstruments_.CalculateSize(_repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFavoritesResponse other) {
      if (other == null) {
        return;
      }
      favoriteInstruments_.Add(other.favoriteInstruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            favoriteInstruments_.AddEntriesFrom(input, _repeated_favoriteInstruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            favoriteInstruments_.AddEntriesFrom(ref input, _repeated_favoriteInstruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Массив избранных инструментов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FavoriteInstrument : pb::IMessage<FavoriteInstrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FavoriteInstrument> _parser = new pb::MessageParser<FavoriteInstrument>(() => new FavoriteInstrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FavoriteInstrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FavoriteInstrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FavoriteInstrument(FavoriteInstrument other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      instrumentType_ = other.instrumentType_;
      name_ = other.name_;
      uid_ = other.uid_;
      otcFlag_ = other.otcFlag_;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      instrumentKind_ = other.instrumentKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FavoriteInstrument Clone() {
      return new FavoriteInstrument(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 11;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 12;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 13;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 16;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 17;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 18;
    private global::Tinkoff.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FavoriteInstrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FavoriteInstrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (Name != other.Name) return false;
      if (Uid != other.Uid) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(InstrumentType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Name);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Uid);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(OtcFlag);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(InstrumentType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Name);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Uid);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(OtcFlag);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (InstrumentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FavoriteInstrument other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 90: {
            InstrumentType = input.ReadString();
            break;
          }
          case 98: {
            Name = input.ReadString();
            break;
          }
          case 106: {
            Uid = input.ReadString();
            break;
          }
          case 128: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 136: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 144: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 90: {
            InstrumentType = input.ReadString();
            break;
          }
          case 98: {
            Name = input.ReadString();
            break;
          }
          case 106: {
            Uid = input.ReadString();
            break;
          }
          case 128: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 136: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 144: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос редактирования списка избранных инструментов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EditFavoritesRequest : pb::IMessage<EditFavoritesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EditFavoritesRequest> _parser = new pb::MessageParser<EditFavoritesRequest>(() => new EditFavoritesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EditFavoritesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequest(EditFavoritesRequest other) : this() {
      instruments_ = other.instruments_.Clone();
      actionType_ = other.actionType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequest Clone() {
      return new EditFavoritesRequest(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.EditFavoritesRequestInstrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.EditFavoritesRequestInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.EditFavoritesRequestInstrument> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.EditFavoritesRequestInstrument>();
    /// <summary>
    ///Массив инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.EditFavoritesRequestInstrument> Instruments {
      get { return instruments_; }
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 6;
    private global::Tinkoff.InvestApi.V1.EditFavoritesActionType actionType_ = global::Tinkoff.InvestApi.V1.EditFavoritesActionType.Unspecified;
    /// <summary>
    ///Тип действия со списком.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.EditFavoritesActionType ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EditFavoritesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EditFavoritesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      if (ActionType != other.ActionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (ActionType != global::Tinkoff.InvestApi.V1.EditFavoritesActionType.Unspecified) hash ^= ActionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (ActionType != global::Tinkoff.InvestApi.V1.EditFavoritesActionType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ActionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (ActionType != global::Tinkoff.InvestApi.V1.EditFavoritesActionType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ActionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (ActionType != global::Tinkoff.InvestApi.V1.EditFavoritesActionType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EditFavoritesRequest other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      if (other.ActionType != global::Tinkoff.InvestApi.V1.EditFavoritesActionType.Unspecified) {
        ActionType = other.ActionType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
          case 48: {
            ActionType = (global::Tinkoff.InvestApi.V1.EditFavoritesActionType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
          case 48: {
            ActionType = (global::Tinkoff.InvestApi.V1.EditFavoritesActionType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Массив инструментов для редактирования списка избранных инструментов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EditFavoritesRequestInstrument : pb::IMessage<EditFavoritesRequestInstrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EditFavoritesRequestInstrument> _parser = new pb::MessageParser<EditFavoritesRequestInstrument>(() => new EditFavoritesRequestInstrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EditFavoritesRequestInstrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequestInstrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequestInstrument(EditFavoritesRequestInstrument other) : this() {
      figi_ = other.figi_;
      instrumentId_ = other.instrumentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequestInstrument Clone() {
      return new EditFavoritesRequestInstrument(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private readonly static string FigiDefaultValue = "";

    private string figi_;
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_ ?? FigiDefaultValue; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "figi" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFigi {
      get { return figi_ != null; }
    }
    /// <summary>Clears the value of the "figi" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFigi() {
      figi_ = null;
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 2;
    private string instrumentId_ = "";
    /// <summary>
    ///Идентификатор инструмента Figi или instrument_uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EditFavoritesRequestInstrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EditFavoritesRequestInstrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (InstrumentId != other.InstrumentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFigi) hash ^= Figi.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFigi) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFigi) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFigi) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EditFavoritesRequestInstrument other) {
      if (other == null) {
        return;
      }
      if (other.HasFigi) {
        Figi = other.Figi;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Результат редактирования списка избранных инструментов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EditFavoritesResponse : pb::IMessage<EditFavoritesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EditFavoritesResponse> _parser = new pb::MessageParser<EditFavoritesResponse>(() => new EditFavoritesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EditFavoritesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesResponse(EditFavoritesResponse other) : this() {
      favoriteInstruments_ = other.favoriteInstruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesResponse Clone() {
      return new EditFavoritesResponse(this);
    }

    /// <summary>Field number for the "favorite_instruments" field.</summary>
    public const int FavoriteInstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.FavoriteInstrument> _repeated_favoriteInstruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.FavoriteInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.FavoriteInstrument> favoriteInstruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.FavoriteInstrument>();
    /// <summary>
    ///Массив инструментов
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.FavoriteInstrument> FavoriteInstruments {
      get { return favoriteInstruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EditFavoritesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EditFavoritesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!favoriteInstruments_.Equals(other.favoriteInstruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= favoriteInstruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      favoriteInstruments_.WriteTo(output, _repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      favoriteInstruments_.WriteTo(ref output, _repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += favoriteInstruments_.CalculateSize(_repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EditFavoritesResponse other) {
      if (other == null) {
        return;
      }
      favoriteInstruments_.Add(other.favoriteInstruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            favoriteInstruments_.AddEntriesFrom(input, _repeated_favoriteInstruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            favoriteInstruments_.AddEntriesFrom(ref input, _repeated_favoriteInstruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос справочника стран.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetCountriesRequest : pb::IMessage<GetCountriesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetCountriesRequest> _parser = new pb::MessageParser<GetCountriesRequest>(() => new GetCountriesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetCountriesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesRequest(GetCountriesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesRequest Clone() {
      return new GetCountriesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetCountriesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetCountriesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetCountriesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Справочник стран.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetCountriesResponse : pb::IMessage<GetCountriesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetCountriesResponse> _parser = new pb::MessageParser<GetCountriesResponse>(() => new GetCountriesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetCountriesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesResponse(GetCountriesResponse other) : this() {
      countries_ = other.countries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesResponse Clone() {
      return new GetCountriesResponse(this);
    }

    /// <summary>Field number for the "countries" field.</summary>
    public const int CountriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.CountryResponse> _repeated_countries_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.CountryResponse.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.CountryResponse> countries_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.CountryResponse>();
    /// <summary>
    ///Массив стран.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.CountryResponse> Countries {
      get { return countries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetCountriesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetCountriesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!countries_.Equals(other.countries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= countries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      countries_.WriteTo(output, _repeated_countries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      countries_.WriteTo(ref output, _repeated_countries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += countries_.CalculateSize(_repeated_countries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetCountriesResponse other) {
      if (other == null) {
        return;
      }
      countries_.Add(other.countries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            countries_.AddEntriesFrom(input, _repeated_countries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            countries_.AddEntriesFrom(ref input, _repeated_countries_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос справочника индексов и товаров
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class IndicativesRequest : pb::IMessage<IndicativesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IndicativesRequest> _parser = new pb::MessageParser<IndicativesRequest>(() => new IndicativesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IndicativesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativesRequest(IndicativesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativesRequest Clone() {
      return new IndicativesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IndicativesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IndicativesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IndicativesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Справочник индексов и товаров
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class IndicativesResponse : pb::IMessage<IndicativesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IndicativesResponse> _parser = new pb::MessageParser<IndicativesResponse>(() => new IndicativesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IndicativesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativesResponse(IndicativesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativesResponse Clone() {
      return new IndicativesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.IndicativeResponse> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.IndicativeResponse.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.IndicativeResponse> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.IndicativeResponse>();
    /// <summary>
    /// Массив инструментов
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.IndicativeResponse> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IndicativesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IndicativesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IndicativesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Индикатив
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class IndicativeResponse : pb::IMessage<IndicativeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IndicativeResponse> _parser = new pb::MessageParser<IndicativeResponse>(() => new IndicativeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IndicativeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativeResponse(IndicativeResponse other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      currency_ = other.currency_;
      instrumentKind_ = other.instrumentKind_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      uid_ = other.uid_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IndicativeResponse Clone() {
      return new IndicativeResponse(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    /// Figi-идентификатор инструмента
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    /// Тикер инструмента
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    /// Класс-код инструмента
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 4;
    private string currency_ = "";
    /// <summary>
    /// Валюта расчётов
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 12;
    private string name_ = "";
    /// <summary>
    /// Название инструмента
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 13;
    private string exchange_ = "";
    /// <summary>
    /// Tорговая площадка (секция биржи)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 14;
    private string uid_ = "";
    /// <summary>
    /// Уникальный идентификатор инструмента
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 404;
    private bool buyAvailableFlag_;
    /// <summary>
    /// Признак доступности для покупки
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 405;
    private bool sellAvailableFlag_;
    /// <summary>
    /// Признак доступности для продажи
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IndicativeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IndicativeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Currency != other.Currency) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (Uid != other.Uid) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Currency);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Exchange);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Uid);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(160, 25);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(168, 25);
        output.WriteBool(SellAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Currency);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Exchange);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Uid);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(160, 25);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(168, 25);
        output.WriteBool(SellAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IndicativeResponse other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Currency = input.ReadString();
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 98: {
            Name = input.ReadString();
            break;
          }
          case 106: {
            Exchange = input.ReadString();
            break;
          }
          case 114: {
            Uid = input.ReadString();
            break;
          }
          case 3232: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 3240: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Currency = input.ReadString();
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 98: {
            Name = input.ReadString();
            break;
          }
          case 106: {
            Exchange = input.ReadString();
            break;
          }
          case 114: {
            Uid = input.ReadString();
            break;
          }
          case 3232: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 3240: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные о стране.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CountryResponse : pb::IMessage<CountryResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CountryResponse> _parser = new pb::MessageParser<CountryResponse>(() => new CountryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CountryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CountryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CountryResponse(CountryResponse other) : this() {
      alfaTwo_ = other.alfaTwo_;
      alfaThree_ = other.alfaThree_;
      name_ = other.name_;
      nameBrief_ = other.nameBrief_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CountryResponse Clone() {
      return new CountryResponse(this);
    }

    /// <summary>Field number for the "alfa_two" field.</summary>
    public const int AlfaTwoFieldNumber = 1;
    private string alfaTwo_ = "";
    /// <summary>
    ///Двухбуквенный код страны.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AlfaTwo {
      get { return alfaTwo_; }
      set {
        alfaTwo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alfa_three" field.</summary>
    public const int AlfaThreeFieldNumber = 2;
    private string alfaThree_ = "";
    /// <summary>
    ///Трёхбуквенный код страны.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AlfaThree {
      get { return alfaThree_; }
      set {
        alfaThree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///Наименование страны.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_brief" field.</summary>
    public const int NameBriefFieldNumber = 4;
    private string nameBrief_ = "";
    /// <summary>
    ///Краткое наименование страны.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NameBrief {
      get { return nameBrief_; }
      set {
        nameBrief_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CountryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CountryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlfaTwo != other.AlfaTwo) return false;
      if (AlfaThree != other.AlfaThree) return false;
      if (Name != other.Name) return false;
      if (NameBrief != other.NameBrief) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AlfaTwo.Length != 0) hash ^= AlfaTwo.GetHashCode();
      if (AlfaThree.Length != 0) hash ^= AlfaThree.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NameBrief.Length != 0) hash ^= NameBrief.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AlfaTwo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AlfaTwo);
      }
      if (AlfaThree.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AlfaThree);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameBrief);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AlfaTwo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AlfaTwo);
      }
      if (AlfaThree.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AlfaThree);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameBrief);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AlfaTwo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlfaTwo);
      }
      if (AlfaThree.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlfaThree);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NameBrief.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameBrief);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CountryResponse other) {
      if (other == null) {
        return;
      }
      if (other.AlfaTwo.Length != 0) {
        AlfaTwo = other.AlfaTwo;
      }
      if (other.AlfaThree.Length != 0) {
        AlfaThree = other.AlfaThree;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NameBrief.Length != 0) {
        NameBrief = other.NameBrief;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AlfaTwo = input.ReadString();
            break;
          }
          case 18: {
            AlfaThree = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameBrief = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AlfaTwo = input.ReadString();
            break;
          }
          case 18: {
            AlfaThree = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameBrief = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос на поиск инструментов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FindInstrumentRequest : pb::IMessage<FindInstrumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FindInstrumentRequest> _parser = new pb::MessageParser<FindInstrumentRequest>(() => new FindInstrumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FindInstrumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentRequest(FindInstrumentRequest other) : this() {
      _hasBits0 = other._hasBits0;
      query_ = other.query_;
      instrumentKind_ = other.instrumentKind_;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentRequest Clone() {
      return new FindInstrumentRequest(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    /// <summary>
    ///Строка поиска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 2;
    private readonly static global::Tinkoff.InvestApi.V1.InstrumentType InstrumentKindDefaultValue = global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified;

    private global::Tinkoff.InvestApi.V1.InstrumentType instrumentKind_;
    /// <summary>
    ///Фильтр по типу инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentType InstrumentKind {
      get { if ((_hasBits0 & 1) != 0) { return instrumentKind_; } else { return InstrumentKindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        instrumentKind_ = value;
      }
    }
    /// <summary>Gets whether the "instrument_kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "instrument_kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentKind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 3;
    private readonly static bool ApiTradeAvailableFlagDefaultValue = false;

    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Фильтр для отображения только торговых инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { if ((_hasBits0 & 2) != 0) { return apiTradeAvailableFlag_; } else { return ApiTradeAvailableFlagDefaultValue; } }
      set {
        _hasBits0 |= 2;
        apiTradeAvailableFlag_ = value;
      }
    }
    /// <summary>Gets whether the "api_trade_available_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasApiTradeAvailableFlag {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "api_trade_available_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearApiTradeAvailableFlag() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FindInstrumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FindInstrumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (HasInstrumentKind) hash ^= InstrumentKind.GetHashCode();
      if (HasApiTradeAvailableFlag) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (HasInstrumentKind) {
        output.WriteRawTag(16);
        output.WriteEnum((int) InstrumentKind);
      }
      if (HasApiTradeAvailableFlag) {
        output.WriteRawTag(24);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (HasInstrumentKind) {
        output.WriteRawTag(16);
        output.WriteEnum((int) InstrumentKind);
      }
      if (HasApiTradeAvailableFlag) {
        output.WriteRawTag(24);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (HasInstrumentKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (HasApiTradeAvailableFlag) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FindInstrumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.HasInstrumentKind) {
        InstrumentKind = other.InstrumentKind;
      }
      if (other.HasApiTradeAvailableFlag) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 16: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 24: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 16: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 24: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Результат поиска инструментов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FindInstrumentResponse : pb::IMessage<FindInstrumentResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FindInstrumentResponse> _parser = new pb::MessageParser<FindInstrumentResponse>(() => new FindInstrumentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FindInstrumentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentResponse(FindInstrumentResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentResponse Clone() {
      return new FindInstrumentResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.InstrumentShort> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.InstrumentShort.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.InstrumentShort> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.InstrumentShort>();
    /// <summary>
    ///Массив инструментов, удовлетворяющих условиям поиска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.InstrumentShort> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FindInstrumentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FindInstrumentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FindInstrumentResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Краткая информация об инструменте.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentShort : pb::IMessage<InstrumentShort>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentShort> _parser = new pb::MessageParser<InstrumentShort>(() => new InstrumentShort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentShort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentShort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentShort(InstrumentShort other) : this() {
      isin_ = other.isin_;
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      instrumentType_ = other.instrumentType_;
      name_ = other.name_;
      uid_ = other.uid_;
      positionUid_ = other.positionUid_;
      instrumentKind_ = other.instrumentKind_;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      forIisFlag_ = other.forIisFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentShort Clone() {
      return new InstrumentShort(this);
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 1;
    private string isin_ = "";
    /// <summary>
    ///Isin инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 2;
    private string figi_ = "";
    /// <summary>
    ///Figi инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 3;
    private string ticker_ = "";
    /// <summary>
    ///Ticker инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 4;
    private string classCode_ = "";
    /// <summary>
    ///ClassCode инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 5;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 7;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 8;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 11;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 12;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 26;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 27;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 28;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 29;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 30;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentShort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentShort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Isin != other.Isin) return false;
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (Name != other.Name) return false;
      if (Uid != other.Uid) return false;
      if (PositionUid != other.PositionUid) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Isin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Isin);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstrumentType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Uid);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PositionUid);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ForIisFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(First1DayCandleDate);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(BlockedTcaFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Isin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Isin);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstrumentType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Uid);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PositionUid);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ForIisFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(First1DayCandleDate);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(BlockedTcaFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (InstrumentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (PositionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 1 + 1;
      }
      if (ForIisFlag != false) {
        size += 1 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentShort other) {
      if (other == null) {
        return;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.InstrumentKind != global::Tinkoff.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Isin = input.ReadString();
            break;
          }
          case 18: {
            Figi = input.ReadString();
            break;
          }
          case 26: {
            Ticker = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            InstrumentType = input.ReadString();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            Uid = input.ReadString();
            break;
          }
          case 66: {
            PositionUid = input.ReadString();
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 88: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 96: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 210: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 218: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 224: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 232: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 240: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Isin = input.ReadString();
            break;
          }
          case 18: {
            Figi = input.ReadString();
            break;
          }
          case 26: {
            Ticker = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            InstrumentType = input.ReadString();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            Uid = input.ReadString();
            break;
          }
          case 66: {
            PositionUid = input.ReadString();
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 88: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 96: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 210: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 218: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 224: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 232: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 240: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос списка брендов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetBrandsRequest : pb::IMessage<GetBrandsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBrandsRequest> _parser = new pb::MessageParser<GetBrandsRequest>(() => new GetBrandsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBrandsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsRequest(GetBrandsRequest other) : this() {
      paging_ = other.paging_ != null ? other.paging_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsRequest Clone() {
      return new GetBrandsRequest(this);
    }

    /// <summary>Field number for the "paging" field.</summary>
    public const int PagingFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Page paging_;
    /// <summary>
    ///Настройки пагинации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Page Paging {
      get { return paging_; }
      set {
        paging_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBrandsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBrandsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Paging, other.Paging)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (paging_ != null) hash ^= Paging.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (paging_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Paging);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (paging_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Paging);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (paging_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paging);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBrandsRequest other) {
      if (other == null) {
        return;
      }
      if (other.paging_ != null) {
        if (paging_ == null) {
          Paging = new global::Tinkoff.InvestApi.V1.Page();
        }
        Paging.MergeFrom(other.Paging);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (paging_ == null) {
              Paging = new global::Tinkoff.InvestApi.V1.Page();
            }
            input.ReadMessage(Paging);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (paging_ == null) {
              Paging = new global::Tinkoff.InvestApi.V1.Page();
            }
            input.ReadMessage(Paging);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос бренда.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetBrandRequest : pb::IMessage<GetBrandRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBrandRequest> _parser = new pb::MessageParser<GetBrandRequest>(() => new GetBrandRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBrandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandRequest(GetBrandRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandRequest Clone() {
      return new GetBrandRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///Uid-идентификатор бренда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBrandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBrandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBrandRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список брендов.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetBrandsResponse : pb::IMessage<GetBrandsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBrandsResponse> _parser = new pb::MessageParser<GetBrandsResponse>(() => new GetBrandsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBrandsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsResponse(GetBrandsResponse other) : this() {
      brands_ = other.brands_.Clone();
      paging_ = other.paging_ != null ? other.paging_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsResponse Clone() {
      return new GetBrandsResponse(this);
    }

    /// <summary>Field number for the "brands" field.</summary>
    public const int BrandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Brand> _repeated_brands_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Brand.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Brand> brands_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Brand>();
    /// <summary>
    ///Массив брендов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Brand> Brands {
      get { return brands_; }
    }

    /// <summary>Field number for the "paging" field.</summary>
    public const int PagingFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.PageResponse paging_;
    /// <summary>
    ///Данные по пагинации
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.PageResponse Paging {
      get { return paging_; }
      set {
        paging_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBrandsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBrandsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!brands_.Equals(other.brands_)) return false;
      if (!object.Equals(Paging, other.Paging)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= brands_.GetHashCode();
      if (paging_ != null) hash ^= Paging.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      brands_.WriteTo(output, _repeated_brands_codec);
      if (paging_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Paging);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      brands_.WriteTo(ref output, _repeated_brands_codec);
      if (paging_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Paging);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += brands_.CalculateSize(_repeated_brands_codec);
      if (paging_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paging);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBrandsResponse other) {
      if (other == null) {
        return;
      }
      brands_.Add(other.brands_);
      if (other.paging_ != null) {
        if (paging_ == null) {
          Paging = new global::Tinkoff.InvestApi.V1.PageResponse();
        }
        Paging.MergeFrom(other.Paging);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            brands_.AddEntriesFrom(input, _repeated_brands_codec);
            break;
          }
          case 18: {
            if (paging_ == null) {
              Paging = new global::Tinkoff.InvestApi.V1.PageResponse();
            }
            input.ReadMessage(Paging);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            brands_.AddEntriesFrom(ref input, _repeated_brands_codec);
            break;
          }
          case 18: {
            if (paging_ == null) {
              Paging = new global::Tinkoff.InvestApi.V1.PageResponse();
            }
            input.ReadMessage(Paging);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос фундаментальных показателей
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetAssetFundamentalsRequest : pb::IMessage<GetAssetFundamentalsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAssetFundamentalsRequest> _parser = new pb::MessageParser<GetAssetFundamentalsRequest>(() => new GetAssetFundamentalsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAssetFundamentalsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetFundamentalsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetFundamentalsRequest(GetAssetFundamentalsRequest other) : this() {
      assets_ = other.assets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetFundamentalsRequest Clone() {
      return new GetAssetFundamentalsRequest(this);
    }

    /// <summary>Field number for the "assets" field.</summary>
    public const int AssetsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_assets_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> assets_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///Массив идентификаторов активов (не более 100 шт.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Assets {
      get { return assets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAssetFundamentalsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAssetFundamentalsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!assets_.Equals(other.assets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= assets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      assets_.WriteTo(output, _repeated_assets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      assets_.WriteTo(ref output, _repeated_assets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += assets_.CalculateSize(_repeated_assets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAssetFundamentalsRequest other) {
      if (other == null) {
        return;
      }
      assets_.Add(other.assets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            assets_.AddEntriesFrom(input, _repeated_assets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            assets_.AddEntriesFrom(ref input, _repeated_assets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Фундаментальные показатели
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetAssetFundamentalsResponse : pb::IMessage<GetAssetFundamentalsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAssetFundamentalsResponse> _parser = new pb::MessageParser<GetAssetFundamentalsResponse>(() => new GetAssetFundamentalsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAssetFundamentalsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetFundamentalsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetFundamentalsResponse(GetAssetFundamentalsResponse other) : this() {
      fundamentals_ = other.fundamentals_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetFundamentalsResponse Clone() {
      return new GetAssetFundamentalsResponse(this);
    }

    /// <summary>Field number for the "fundamentals" field.</summary>
    public const int FundamentalsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Types.StatisticResponse> _repeated_fundamentals_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Types.StatisticResponse.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Types.StatisticResponse> fundamentals_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Types.StatisticResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Types.StatisticResponse> Fundamentals {
      get { return fundamentals_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAssetFundamentalsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAssetFundamentalsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fundamentals_.Equals(other.fundamentals_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fundamentals_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fundamentals_.WriteTo(output, _repeated_fundamentals_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fundamentals_.WriteTo(ref output, _repeated_fundamentals_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += fundamentals_.CalculateSize(_repeated_fundamentals_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAssetFundamentalsResponse other) {
      if (other == null) {
        return;
      }
      fundamentals_.Add(other.fundamentals_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fundamentals_.AddEntriesFrom(input, _repeated_fundamentals_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            fundamentals_.AddEntriesFrom(ref input, _repeated_fundamentals_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GetAssetFundamentalsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///Фундаментальные показатели по активу
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class StatisticResponse : pb::IMessage<StatisticResponse>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<StatisticResponse> _parser = new pb::MessageParser<StatisticResponse>(() => new StatisticResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<StatisticResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public StatisticResponse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public StatisticResponse(StatisticResponse other) : this() {
          assetUid_ = other.assetUid_;
          currency_ = other.currency_;
          marketCapitalization_ = other.marketCapitalization_;
          highPriceLast52Weeks_ = other.highPriceLast52Weeks_;
          lowPriceLast52Weeks_ = other.lowPriceLast52Weeks_;
          averageDailyVolumeLast10Days_ = other.averageDailyVolumeLast10Days_;
          averageDailyVolumeLast4Weeks_ = other.averageDailyVolumeLast4Weeks_;
          beta_ = other.beta_;
          freeFloat_ = other.freeFloat_;
          forwardAnnualDividendYield_ = other.forwardAnnualDividendYield_;
          sharesOutstanding_ = other.sharesOutstanding_;
          revenueTtm_ = other.revenueTtm_;
          ebitdaTtm_ = other.ebitdaTtm_;
          netIncomeTtm_ = other.netIncomeTtm_;
          epsTtm_ = other.epsTtm_;
          dilutedEpsTtm_ = other.dilutedEpsTtm_;
          freeCashFlowTtm_ = other.freeCashFlowTtm_;
          fiveYearAnnualRevenueGrowthRate_ = other.fiveYearAnnualRevenueGrowthRate_;
          threeYearAnnualRevenueGrowthRate_ = other.threeYearAnnualRevenueGrowthRate_;
          peRatioTtm_ = other.peRatioTtm_;
          priceToSalesTtm_ = other.priceToSalesTtm_;
          priceToBookTtm_ = other.priceToBookTtm_;
          priceToFreeCashFlowTtm_ = other.priceToFreeCashFlowTtm_;
          totalEnterpriseValueMrq_ = other.totalEnterpriseValueMrq_;
          evToEbitdaMrq_ = other.evToEbitdaMrq_;
          netMarginMrq_ = other.netMarginMrq_;
          netInterestMarginMrq_ = other.netInterestMarginMrq_;
          roe_ = other.roe_;
          roa_ = other.roa_;
          roic_ = other.roic_;
          totalDebtMrq_ = other.totalDebtMrq_;
          totalDebtToEquityMrq_ = other.totalDebtToEquityMrq_;
          totalDebtToEbitdaMrq_ = other.totalDebtToEbitdaMrq_;
          freeCashFlowToPrice_ = other.freeCashFlowToPrice_;
          netDebtToEbitda_ = other.netDebtToEbitda_;
          currentRatioMrq_ = other.currentRatioMrq_;
          fixedChargeCoverageRatioFy_ = other.fixedChargeCoverageRatioFy_;
          dividendYieldDailyTtm_ = other.dividendYieldDailyTtm_;
          dividendRateTtm_ = other.dividendRateTtm_;
          dividendsPerShare_ = other.dividendsPerShare_;
          fiveYearsAverageDividendYield_ = other.fiveYearsAverageDividendYield_;
          fiveYearAnnualDividendGrowthRate_ = other.fiveYearAnnualDividendGrowthRate_;
          dividendPayoutRatioFy_ = other.dividendPayoutRatioFy_;
          buyBackTtm_ = other.buyBackTtm_;
          oneYearAnnualRevenueGrowthRate_ = other.oneYearAnnualRevenueGrowthRate_;
          domicileIndicatorCode_ = other.domicileIndicatorCode_;
          adrToCommonShareRatio_ = other.adrToCommonShareRatio_;
          numberOfEmployees_ = other.numberOfEmployees_;
          exDividendDate_ = other.exDividendDate_ != null ? other.exDividendDate_.Clone() : null;
          fiscalPeriodStartDate_ = other.fiscalPeriodStartDate_ != null ? other.fiscalPeriodStartDate_.Clone() : null;
          fiscalPeriodEndDate_ = other.fiscalPeriodEndDate_ != null ? other.fiscalPeriodEndDate_.Clone() : null;
          revenueChangeFiveYears_ = other.revenueChangeFiveYears_;
          epsChangeFiveYears_ = other.epsChangeFiveYears_;
          ebitdaChangeFiveYears_ = other.ebitdaChangeFiveYears_;
          totalDebtChangeFiveYears_ = other.totalDebtChangeFiveYears_;
          evToSales_ = other.evToSales_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public StatisticResponse Clone() {
          return new StatisticResponse(this);
        }

        /// <summary>Field number for the "asset_uid" field.</summary>
        public const int AssetUidFieldNumber = 1;
        private string assetUid_ = "";
        /// <summary>
        ///Идентификатор актива
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AssetUid {
          get { return assetUid_; }
          set {
            assetUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "currency" field.</summary>
        public const int CurrencyFieldNumber = 2;
        private string currency_ = "";
        /// <summary>
        ///Валюта
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Currency {
          get { return currency_; }
          set {
            currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "market_capitalization" field.</summary>
        public const int MarketCapitalizationFieldNumber = 3;
        private double marketCapitalization_;
        /// <summary>
        ///Рыночная капитализация
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double MarketCapitalization {
          get { return marketCapitalization_; }
          set {
            marketCapitalization_ = value;
          }
        }

        /// <summary>Field number for the "high_price_last_52_weeks" field.</summary>
        public const int HighPriceLast52WeeksFieldNumber = 4;
        private double highPriceLast52Weeks_;
        /// <summary>
        ///Максимум за год
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double HighPriceLast52Weeks {
          get { return highPriceLast52Weeks_; }
          set {
            highPriceLast52Weeks_ = value;
          }
        }

        /// <summary>Field number for the "low_price_last_52_weeks" field.</summary>
        public const int LowPriceLast52WeeksFieldNumber = 5;
        private double lowPriceLast52Weeks_;
        /// <summary>
        ///Минимум за год
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double LowPriceLast52Weeks {
          get { return lowPriceLast52Weeks_; }
          set {
            lowPriceLast52Weeks_ = value;
          }
        }

        /// <summary>Field number for the "average_daily_volume_last_10_days" field.</summary>
        public const int AverageDailyVolumeLast10DaysFieldNumber = 6;
        private double averageDailyVolumeLast10Days_;
        /// <summary>
        ///Средний объем торгов за 10 дней
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double AverageDailyVolumeLast10Days {
          get { return averageDailyVolumeLast10Days_; }
          set {
            averageDailyVolumeLast10Days_ = value;
          }
        }

        /// <summary>Field number for the "average_daily_volume_last_4_weeks" field.</summary>
        public const int AverageDailyVolumeLast4WeeksFieldNumber = 7;
        private double averageDailyVolumeLast4Weeks_;
        /// <summary>
        ///Средний объем торгов за месяц
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double AverageDailyVolumeLast4Weeks {
          get { return averageDailyVolumeLast4Weeks_; }
          set {
            averageDailyVolumeLast4Weeks_ = value;
          }
        }

        /// <summary>Field number for the "beta" field.</summary>
        public const int BetaFieldNumber = 8;
        private double beta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Beta {
          get { return beta_; }
          set {
            beta_ = value;
          }
        }

        /// <summary>Field number for the "free_float" field.</summary>
        public const int FreeFloatFieldNumber = 9;
        private double freeFloat_;
        /// <summary>
        ///Доля акций в свободном обращении
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double FreeFloat {
          get { return freeFloat_; }
          set {
            freeFloat_ = value;
          }
        }

        /// <summary>Field number for the "forward_annual_dividend_yield" field.</summary>
        public const int ForwardAnnualDividendYieldFieldNumber = 10;
        private double forwardAnnualDividendYield_;
        /// <summary>
        ///Процент форвардной дивидендной доходности по отношению к цене акций.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double ForwardAnnualDividendYield {
          get { return forwardAnnualDividendYield_; }
          set {
            forwardAnnualDividendYield_ = value;
          }
        }

        /// <summary>Field number for the "shares_outstanding" field.</summary>
        public const int SharesOutstandingFieldNumber = 11;
        private double sharesOutstanding_;
        /// <summary>
        ///Количество акций в обращении
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double SharesOutstanding {
          get { return sharesOutstanding_; }
          set {
            sharesOutstanding_ = value;
          }
        }

        /// <summary>Field number for the "revenue_ttm" field.</summary>
        public const int RevenueTtmFieldNumber = 12;
        private double revenueTtm_;
        /// <summary>
        ///Выручка
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RevenueTtm {
          get { return revenueTtm_; }
          set {
            revenueTtm_ = value;
          }
        }

        /// <summary>Field number for the "ebitda_ttm" field.</summary>
        public const int EbitdaTtmFieldNumber = 13;
        private double ebitdaTtm_;
        /// <summary>
        ///EBITDA Прибыль до вычета процентов, налогов, износа и амортизации
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double EbitdaTtm {
          get { return ebitdaTtm_; }
          set {
            ebitdaTtm_ = value;
          }
        }

        /// <summary>Field number for the "net_income_ttm" field.</summary>
        public const int NetIncomeTtmFieldNumber = 14;
        private double netIncomeTtm_;
        /// <summary>
        ///Чистая прибыль
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double NetIncomeTtm {
          get { return netIncomeTtm_; }
          set {
            netIncomeTtm_ = value;
          }
        }

        /// <summary>Field number for the "eps_ttm" field.</summary>
        public const int EpsTtmFieldNumber = 15;
        private double epsTtm_;
        /// <summary>
        ///EPS Величина чистой прибыли компании, приходящуюся на каждую обыкновенную акцию
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double EpsTtm {
          get { return epsTtm_; }
          set {
            epsTtm_ = value;
          }
        }

        /// <summary>Field number for the "diluted_eps_ttm" field.</summary>
        public const int DilutedEpsTtmFieldNumber = 16;
        private double dilutedEpsTtm_;
        /// <summary>
        ///EPS компании с допущением, что все конвертируемые ценные бумаги компании были сконвертированы в обыкновенные акции
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double DilutedEpsTtm {
          get { return dilutedEpsTtm_; }
          set {
            dilutedEpsTtm_ = value;
          }
        }

        /// <summary>Field number for the "free_cash_flow_ttm" field.</summary>
        public const int FreeCashFlowTtmFieldNumber = 17;
        private double freeCashFlowTtm_;
        /// <summary>
        ///Свободный денежный поток
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double FreeCashFlowTtm {
          get { return freeCashFlowTtm_; }
          set {
            freeCashFlowTtm_ = value;
          }
        }

        /// <summary>Field number for the "five_year_annual_revenue_growth_rate" field.</summary>
        public const int FiveYearAnnualRevenueGrowthRateFieldNumber = 18;
        private double fiveYearAnnualRevenueGrowthRate_;
        /// <summary>
        ///Среднегодовой  рocт выручки (за 5 лет)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double FiveYearAnnualRevenueGrowthRate {
          get { return fiveYearAnnualRevenueGrowthRate_; }
          set {
            fiveYearAnnualRevenueGrowthRate_ = value;
          }
        }

        /// <summary>Field number for the "three_year_annual_revenue_growth_rate" field.</summary>
        public const int ThreeYearAnnualRevenueGrowthRateFieldNumber = 19;
        private double threeYearAnnualRevenueGrowthRate_;
        /// <summary>
        ///Среднегодовой  рocт выручки (за 3 года)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double ThreeYearAnnualRevenueGrowthRate {
          get { return threeYearAnnualRevenueGrowthRate_; }
          set {
            threeYearAnnualRevenueGrowthRate_ = value;
          }
        }

        /// <summary>Field number for the "pe_ratio_ttm" field.</summary>
        public const int PeRatioTtmFieldNumber = 20;
        private double peRatioTtm_;
        /// <summary>
        ///Показывает соотношение рыночной капитализации компании к ее чистой прибыли
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double PeRatioTtm {
          get { return peRatioTtm_; }
          set {
            peRatioTtm_ = value;
          }
        }

        /// <summary>Field number for the "price_to_sales_ttm" field.</summary>
        public const int PriceToSalesTtmFieldNumber = 21;
        private double priceToSalesTtm_;
        /// <summary>
        ///Показывает соотношение рыночной капитализации компании к ее выручке
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double PriceToSalesTtm {
          get { return priceToSalesTtm_; }
          set {
            priceToSalesTtm_ = value;
          }
        }

        /// <summary>Field number for the "price_to_book_ttm" field.</summary>
        public const int PriceToBookTtmFieldNumber = 22;
        private double priceToBookTtm_;
        /// <summary>
        ///Показывает соотношение рыночной капитализации компании к ее балансовой стоимости
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double PriceToBookTtm {
          get { return priceToBookTtm_; }
          set {
            priceToBookTtm_ = value;
          }
        }

        /// <summary>Field number for the "price_to_free_cash_flow_ttm" field.</summary>
        public const int PriceToFreeCashFlowTtmFieldNumber = 23;
        private double priceToFreeCashFlowTtm_;
        /// <summary>
        ///Показывает соотношение рыночной капитализации компании к ее свободному денежному потоку
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double PriceToFreeCashFlowTtm {
          get { return priceToFreeCashFlowTtm_; }
          set {
            priceToFreeCashFlowTtm_ = value;
          }
        }

        /// <summary>Field number for the "total_enterprise_value_mrq" field.</summary>
        public const int TotalEnterpriseValueMrqFieldNumber = 24;
        private double totalEnterpriseValueMrq_;
        /// <summary>
        ///Рыночная стоимость компании
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalEnterpriseValueMrq {
          get { return totalEnterpriseValueMrq_; }
          set {
            totalEnterpriseValueMrq_ = value;
          }
        }

        /// <summary>Field number for the "ev_to_ebitda_mrq" field.</summary>
        public const int EvToEbitdaMrqFieldNumber = 25;
        private double evToEbitdaMrq_;
        /// <summary>
        ///Соотношение EV и EBITDA
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double EvToEbitdaMrq {
          get { return evToEbitdaMrq_; }
          set {
            evToEbitdaMrq_ = value;
          }
        }

        /// <summary>Field number for the "net_margin_mrq" field.</summary>
        public const int NetMarginMrqFieldNumber = 26;
        private double netMarginMrq_;
        /// <summary>
        ///Маржа чистой прибыли
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double NetMarginMrq {
          get { return netMarginMrq_; }
          set {
            netMarginMrq_ = value;
          }
        }

        /// <summary>Field number for the "net_interest_margin_mrq" field.</summary>
        public const int NetInterestMarginMrqFieldNumber = 27;
        private double netInterestMarginMrq_;
        /// <summary>
        ///Рентабельность чистой прибыли
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double NetInterestMarginMrq {
          get { return netInterestMarginMrq_; }
          set {
            netInterestMarginMrq_ = value;
          }
        }

        /// <summary>Field number for the "roe" field.</summary>
        public const int RoeFieldNumber = 28;
        private double roe_;
        /// <summary>
        ///Рентабельность собственного капитала
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Roe {
          get { return roe_; }
          set {
            roe_ = value;
          }
        }

        /// <summary>Field number for the "roa" field.</summary>
        public const int RoaFieldNumber = 29;
        private double roa_;
        /// <summary>
        ///Рентабельность активов
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Roa {
          get { return roa_; }
          set {
            roa_ = value;
          }
        }

        /// <summary>Field number for the "roic" field.</summary>
        public const int RoicFieldNumber = 30;
        private double roic_;
        /// <summary>
        ///Рентабельность активов
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Roic {
          get { return roic_; }
          set {
            roic_ = value;
          }
        }

        /// <summary>Field number for the "total_debt_mrq" field.</summary>
        public const int TotalDebtMrqFieldNumber = 31;
        private double totalDebtMrq_;
        /// <summary>
        ///Сумма краткосрочных и долгосрочных обязательств компании
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalDebtMrq {
          get { return totalDebtMrq_; }
          set {
            totalDebtMrq_ = value;
          }
        }

        /// <summary>Field number for the "total_debt_to_equity_mrq" field.</summary>
        public const int TotalDebtToEquityMrqFieldNumber = 32;
        private double totalDebtToEquityMrq_;
        /// <summary>
        ///Соотношение долга к собственному капиталу
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalDebtToEquityMrq {
          get { return totalDebtToEquityMrq_; }
          set {
            totalDebtToEquityMrq_ = value;
          }
        }

        /// <summary>Field number for the "total_debt_to_ebitda_mrq" field.</summary>
        public const int TotalDebtToEbitdaMrqFieldNumber = 33;
        private double totalDebtToEbitdaMrq_;
        /// <summary>
        ///Total Debt/EBITDA
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalDebtToEbitdaMrq {
          get { return totalDebtToEbitdaMrq_; }
          set {
            totalDebtToEbitdaMrq_ = value;
          }
        }

        /// <summary>Field number for the "free_cash_flow_to_price" field.</summary>
        public const int FreeCashFlowToPriceFieldNumber = 34;
        private double freeCashFlowToPrice_;
        /// <summary>
        ///Отношение свободглго кэша к стоимости
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double FreeCashFlowToPrice {
          get { return freeCashFlowToPrice_; }
          set {
            freeCashFlowToPrice_ = value;
          }
        }

        /// <summary>Field number for the "net_debt_to_ebitda" field.</summary>
        public const int NetDebtToEbitdaFieldNumber = 35;
        private double netDebtToEbitda_;
        /// <summary>
        ///Отношение чистого долга к ebitda
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double NetDebtToEbitda {
          get { return netDebtToEbitda_; }
          set {
            netDebtToEbitda_ = value;
          }
        }

        /// <summary>Field number for the "current_ratio_mrq" field.</summary>
        public const int CurrentRatioMrqFieldNumber = 36;
        private double currentRatioMrq_;
        /// <summary>
        ///Коэффициент текущей ликвидности
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double CurrentRatioMrq {
          get { return currentRatioMrq_; }
          set {
            currentRatioMrq_ = value;
          }
        }

        /// <summary>Field number for the "fixed_charge_coverage_ratio_fy" field.</summary>
        public const int FixedChargeCoverageRatioFyFieldNumber = 37;
        private double fixedChargeCoverageRatioFy_;
        /// <summary>
        ///Коэффициент покрытия фиксированных платежей (FCCR)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double FixedChargeCoverageRatioFy {
          get { return fixedChargeCoverageRatioFy_; }
          set {
            fixedChargeCoverageRatioFy_ = value;
          }
        }

        /// <summary>Field number for the "dividend_yield_daily_ttm" field.</summary>
        public const int DividendYieldDailyTtmFieldNumber = 38;
        private double dividendYieldDailyTtm_;
        /// <summary>
        ///Дивидендная доходность за 12 мес
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double DividendYieldDailyTtm {
          get { return dividendYieldDailyTtm_; }
          set {
            dividendYieldDailyTtm_ = value;
          }
        }

        /// <summary>Field number for the "dividend_rate_ttm" field.</summary>
        public const int DividendRateTtmFieldNumber = 39;
        private double dividendRateTtm_;
        /// <summary>
        ///Выплаченные дивиденды за 12 мес.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double DividendRateTtm {
          get { return dividendRateTtm_; }
          set {
            dividendRateTtm_ = value;
          }
        }

        /// <summary>Field number for the "dividends_per_share" field.</summary>
        public const int DividendsPerShareFieldNumber = 40;
        private double dividendsPerShare_;
        /// <summary>
        ///Значение дивидендов на акцию
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double DividendsPerShare {
          get { return dividendsPerShare_; }
          set {
            dividendsPerShare_ = value;
          }
        }

        /// <summary>Field number for the "five_years_average_dividend_yield" field.</summary>
        public const int FiveYearsAverageDividendYieldFieldNumber = 41;
        private double fiveYearsAverageDividendYield_;
        /// <summary>
        ///Средняя дивидендная доходность за 5 лет
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double FiveYearsAverageDividendYield {
          get { return fiveYearsAverageDividendYield_; }
          set {
            fiveYearsAverageDividendYield_ = value;
          }
        }

        /// <summary>Field number for the "five_year_annual_dividend_growth_rate" field.</summary>
        public const int FiveYearAnnualDividendGrowthRateFieldNumber = 42;
        private double fiveYearAnnualDividendGrowthRate_;
        /// <summary>
        ///Среднегодовой рост дивидендов за 5 лет
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double FiveYearAnnualDividendGrowthRate {
          get { return fiveYearAnnualDividendGrowthRate_; }
          set {
            fiveYearAnnualDividendGrowthRate_ = value;
          }
        }

        /// <summary>Field number for the "dividend_payout_ratio_fy" field.</summary>
        public const int DividendPayoutRatioFyFieldNumber = 43;
        private double dividendPayoutRatioFy_;
        /// <summary>
        ///Процент чистой прибыли, уходящий на выплату дивидендов
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double DividendPayoutRatioFy {
          get { return dividendPayoutRatioFy_; }
          set {
            dividendPayoutRatioFy_ = value;
          }
        }

        /// <summary>Field number for the "buy_back_ttm" field.</summary>
        public const int BuyBackTtmFieldNumber = 44;
        private double buyBackTtm_;
        /// <summary>
        ///Деньги, потраченные на обратный выкуп акций
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double BuyBackTtm {
          get { return buyBackTtm_; }
          set {
            buyBackTtm_ = value;
          }
        }

        /// <summary>Field number for the "one_year_annual_revenue_growth_rate" field.</summary>
        public const int OneYearAnnualRevenueGrowthRateFieldNumber = 45;
        private double oneYearAnnualRevenueGrowthRate_;
        /// <summary>
        ///Рост выручки за 1 год
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double OneYearAnnualRevenueGrowthRate {
          get { return oneYearAnnualRevenueGrowthRate_; }
          set {
            oneYearAnnualRevenueGrowthRate_ = value;
          }
        }

        /// <summary>Field number for the "domicile_indicator_code" field.</summary>
        public const int DomicileIndicatorCodeFieldNumber = 46;
        private string domicileIndicatorCode_ = "";
        /// <summary>
        ///Код страны
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string DomicileIndicatorCode {
          get { return domicileIndicatorCode_; }
          set {
            domicileIndicatorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "adr_to_common_share_ratio" field.</summary>
        public const int AdrToCommonShareRatioFieldNumber = 47;
        private double adrToCommonShareRatio_;
        /// <summary>
        ///Соотношение депозитарной расписки к акциям
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double AdrToCommonShareRatio {
          get { return adrToCommonShareRatio_; }
          set {
            adrToCommonShareRatio_ = value;
          }
        }

        /// <summary>Field number for the "number_of_employees" field.</summary>
        public const int NumberOfEmployeesFieldNumber = 48;
        private double numberOfEmployees_;
        /// <summary>
        ///Количество сотрудников
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double NumberOfEmployees {
          get { return numberOfEmployees_; }
          set {
            numberOfEmployees_ = value;
          }
        }

        /// <summary>Field number for the "ex_dividend_date" field.</summary>
        public const int ExDividendDateFieldNumber = 49;
        private global::Google.Protobuf.WellKnownTypes.Timestamp exDividendDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp ExDividendDate {
          get { return exDividendDate_; }
          set {
            exDividendDate_ = value;
          }
        }

        /// <summary>Field number for the "fiscal_period_start_date" field.</summary>
        public const int FiscalPeriodStartDateFieldNumber = 50;
        private global::Google.Protobuf.WellKnownTypes.Timestamp fiscalPeriodStartDate_;
        /// <summary>
        ///Начало фискального периода
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp FiscalPeriodStartDate {
          get { return fiscalPeriodStartDate_; }
          set {
            fiscalPeriodStartDate_ = value;
          }
        }

        /// <summary>Field number for the "fiscal_period_end_date" field.</summary>
        public const int FiscalPeriodEndDateFieldNumber = 51;
        private global::Google.Protobuf.WellKnownTypes.Timestamp fiscalPeriodEndDate_;
        /// <summary>
        ///Конец фискального периода
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp FiscalPeriodEndDate {
          get { return fiscalPeriodEndDate_; }
          set {
            fiscalPeriodEndDate_ = value;
          }
        }

        /// <summary>Field number for the "revenue_change_five_years" field.</summary>
        public const int RevenueChangeFiveYearsFieldNumber = 53;
        private double revenueChangeFiveYears_;
        /// <summary>
        ///Изменение общего дохода за 5 лет
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RevenueChangeFiveYears {
          get { return revenueChangeFiveYears_; }
          set {
            revenueChangeFiveYears_ = value;
          }
        }

        /// <summary>Field number for the "eps_change_five_years" field.</summary>
        public const int EpsChangeFiveYearsFieldNumber = 54;
        private double epsChangeFiveYears_;
        /// <summary>
        ///Изменение eps за 5 лет
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double EpsChangeFiveYears {
          get { return epsChangeFiveYears_; }
          set {
            epsChangeFiveYears_ = value;
          }
        }

        /// <summary>Field number for the "ebitda_change_five_years" field.</summary>
        public const int EbitdaChangeFiveYearsFieldNumber = 55;
        private double ebitdaChangeFiveYears_;
        /// <summary>
        ///Изменение ebitda за 5 лет
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double EbitdaChangeFiveYears {
          get { return ebitdaChangeFiveYears_; }
          set {
            ebitdaChangeFiveYears_ = value;
          }
        }

        /// <summary>Field number for the "total_debt_change_five_years" field.</summary>
        public const int TotalDebtChangeFiveYearsFieldNumber = 56;
        private double totalDebtChangeFiveYears_;
        /// <summary>
        ///Изменение общей задолжности за 5 лет
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalDebtChangeFiveYears {
          get { return totalDebtChangeFiveYears_; }
          set {
            totalDebtChangeFiveYears_ = value;
          }
        }

        /// <summary>Field number for the "ev_to_sales" field.</summary>
        public const int EvToSalesFieldNumber = 57;
        private double evToSales_;
        /// <summary>
        ///Отношение EV к выручке
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double EvToSales {
          get { return evToSales_; }
          set {
            evToSales_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as StatisticResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(StatisticResponse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AssetUid != other.AssetUid) return false;
          if (Currency != other.Currency) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarketCapitalization, other.MarketCapitalization)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HighPriceLast52Weeks, other.HighPriceLast52Weeks)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowPriceLast52Weeks, other.LowPriceLast52Weeks)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageDailyVolumeLast10Days, other.AverageDailyVolumeLast10Days)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageDailyVolumeLast4Weeks, other.AverageDailyVolumeLast4Weeks)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Beta, other.Beta)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeFloat, other.FreeFloat)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ForwardAnnualDividendYield, other.ForwardAnnualDividendYield)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SharesOutstanding, other.SharesOutstanding)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevenueTtm, other.RevenueTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EbitdaTtm, other.EbitdaTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetIncomeTtm, other.NetIncomeTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EpsTtm, other.EpsTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DilutedEpsTtm, other.DilutedEpsTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeCashFlowTtm, other.FreeCashFlowTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FiveYearAnnualRevenueGrowthRate, other.FiveYearAnnualRevenueGrowthRate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ThreeYearAnnualRevenueGrowthRate, other.ThreeYearAnnualRevenueGrowthRate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PeRatioTtm, other.PeRatioTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceToSalesTtm, other.PriceToSalesTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceToBookTtm, other.PriceToBookTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceToFreeCashFlowTtm, other.PriceToFreeCashFlowTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalEnterpriseValueMrq, other.TotalEnterpriseValueMrq)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EvToEbitdaMrq, other.EvToEbitdaMrq)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetMarginMrq, other.NetMarginMrq)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetInterestMarginMrq, other.NetInterestMarginMrq)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roe, other.Roe)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roa, other.Roa)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roic, other.Roic)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalDebtMrq, other.TotalDebtMrq)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalDebtToEquityMrq, other.TotalDebtToEquityMrq)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalDebtToEbitdaMrq, other.TotalDebtToEbitdaMrq)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeCashFlowToPrice, other.FreeCashFlowToPrice)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetDebtToEbitda, other.NetDebtToEbitda)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentRatioMrq, other.CurrentRatioMrq)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FixedChargeCoverageRatioFy, other.FixedChargeCoverageRatioFy)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DividendYieldDailyTtm, other.DividendYieldDailyTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DividendRateTtm, other.DividendRateTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DividendsPerShare, other.DividendsPerShare)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FiveYearsAverageDividendYield, other.FiveYearsAverageDividendYield)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FiveYearAnnualDividendGrowthRate, other.FiveYearAnnualDividendGrowthRate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DividendPayoutRatioFy, other.DividendPayoutRatioFy)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BuyBackTtm, other.BuyBackTtm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OneYearAnnualRevenueGrowthRate, other.OneYearAnnualRevenueGrowthRate)) return false;
          if (DomicileIndicatorCode != other.DomicileIndicatorCode) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdrToCommonShareRatio, other.AdrToCommonShareRatio)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NumberOfEmployees, other.NumberOfEmployees)) return false;
          if (!object.Equals(ExDividendDate, other.ExDividendDate)) return false;
          if (!object.Equals(FiscalPeriodStartDate, other.FiscalPeriodStartDate)) return false;
          if (!object.Equals(FiscalPeriodEndDate, other.FiscalPeriodEndDate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevenueChangeFiveYears, other.RevenueChangeFiveYears)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EpsChangeFiveYears, other.EpsChangeFiveYears)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EbitdaChangeFiveYears, other.EbitdaChangeFiveYears)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalDebtChangeFiveYears, other.TotalDebtChangeFiveYears)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EvToSales, other.EvToSales)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (AssetUid.Length != 0) hash ^= AssetUid.GetHashCode();
          if (Currency.Length != 0) hash ^= Currency.GetHashCode();
          if (MarketCapitalization != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarketCapitalization);
          if (HighPriceLast52Weeks != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HighPriceLast52Weeks);
          if (LowPriceLast52Weeks != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowPriceLast52Weeks);
          if (AverageDailyVolumeLast10Days != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageDailyVolumeLast10Days);
          if (AverageDailyVolumeLast4Weeks != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageDailyVolumeLast4Weeks);
          if (Beta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Beta);
          if (FreeFloat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeFloat);
          if (ForwardAnnualDividendYield != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ForwardAnnualDividendYield);
          if (SharesOutstanding != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SharesOutstanding);
          if (RevenueTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevenueTtm);
          if (EbitdaTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EbitdaTtm);
          if (NetIncomeTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetIncomeTtm);
          if (EpsTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EpsTtm);
          if (DilutedEpsTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DilutedEpsTtm);
          if (FreeCashFlowTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeCashFlowTtm);
          if (FiveYearAnnualRevenueGrowthRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FiveYearAnnualRevenueGrowthRate);
          if (ThreeYearAnnualRevenueGrowthRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ThreeYearAnnualRevenueGrowthRate);
          if (PeRatioTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PeRatioTtm);
          if (PriceToSalesTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceToSalesTtm);
          if (PriceToBookTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceToBookTtm);
          if (PriceToFreeCashFlowTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceToFreeCashFlowTtm);
          if (TotalEnterpriseValueMrq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalEnterpriseValueMrq);
          if (EvToEbitdaMrq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EvToEbitdaMrq);
          if (NetMarginMrq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetMarginMrq);
          if (NetInterestMarginMrq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetInterestMarginMrq);
          if (Roe != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roe);
          if (Roa != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roa);
          if (Roic != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roic);
          if (TotalDebtMrq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalDebtMrq);
          if (TotalDebtToEquityMrq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalDebtToEquityMrq);
          if (TotalDebtToEbitdaMrq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalDebtToEbitdaMrq);
          if (FreeCashFlowToPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeCashFlowToPrice);
          if (NetDebtToEbitda != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetDebtToEbitda);
          if (CurrentRatioMrq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentRatioMrq);
          if (FixedChargeCoverageRatioFy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FixedChargeCoverageRatioFy);
          if (DividendYieldDailyTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DividendYieldDailyTtm);
          if (DividendRateTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DividendRateTtm);
          if (DividendsPerShare != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DividendsPerShare);
          if (FiveYearsAverageDividendYield != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FiveYearsAverageDividendYield);
          if (FiveYearAnnualDividendGrowthRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FiveYearAnnualDividendGrowthRate);
          if (DividendPayoutRatioFy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DividendPayoutRatioFy);
          if (BuyBackTtm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BuyBackTtm);
          if (OneYearAnnualRevenueGrowthRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OneYearAnnualRevenueGrowthRate);
          if (DomicileIndicatorCode.Length != 0) hash ^= DomicileIndicatorCode.GetHashCode();
          if (AdrToCommonShareRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdrToCommonShareRatio);
          if (NumberOfEmployees != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NumberOfEmployees);
          if (exDividendDate_ != null) hash ^= ExDividendDate.GetHashCode();
          if (fiscalPeriodStartDate_ != null) hash ^= FiscalPeriodStartDate.GetHashCode();
          if (fiscalPeriodEndDate_ != null) hash ^= FiscalPeriodEndDate.GetHashCode();
          if (RevenueChangeFiveYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevenueChangeFiveYears);
          if (EpsChangeFiveYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EpsChangeFiveYears);
          if (EbitdaChangeFiveYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EbitdaChangeFiveYears);
          if (TotalDebtChangeFiveYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalDebtChangeFiveYears);
          if (EvToSales != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EvToSales);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (AssetUid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AssetUid);
          }
          if (Currency.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Currency);
          }
          if (MarketCapitalization != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(MarketCapitalization);
          }
          if (HighPriceLast52Weeks != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(HighPriceLast52Weeks);
          }
          if (LowPriceLast52Weeks != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(LowPriceLast52Weeks);
          }
          if (AverageDailyVolumeLast10Days != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(AverageDailyVolumeLast10Days);
          }
          if (AverageDailyVolumeLast4Weeks != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(AverageDailyVolumeLast4Weeks);
          }
          if (Beta != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(Beta);
          }
          if (FreeFloat != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(FreeFloat);
          }
          if (ForwardAnnualDividendYield != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(ForwardAnnualDividendYield);
          }
          if (SharesOutstanding != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(SharesOutstanding);
          }
          if (RevenueTtm != 0D) {
            output.WriteRawTag(97);
            output.WriteDouble(RevenueTtm);
          }
          if (EbitdaTtm != 0D) {
            output.WriteRawTag(105);
            output.WriteDouble(EbitdaTtm);
          }
          if (NetIncomeTtm != 0D) {
            output.WriteRawTag(113);
            output.WriteDouble(NetIncomeTtm);
          }
          if (EpsTtm != 0D) {
            output.WriteRawTag(121);
            output.WriteDouble(EpsTtm);
          }
          if (DilutedEpsTtm != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(DilutedEpsTtm);
          }
          if (FreeCashFlowTtm != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(FreeCashFlowTtm);
          }
          if (FiveYearAnnualRevenueGrowthRate != 0D) {
            output.WriteRawTag(145, 1);
            output.WriteDouble(FiveYearAnnualRevenueGrowthRate);
          }
          if (ThreeYearAnnualRevenueGrowthRate != 0D) {
            output.WriteRawTag(153, 1);
            output.WriteDouble(ThreeYearAnnualRevenueGrowthRate);
          }
          if (PeRatioTtm != 0D) {
            output.WriteRawTag(161, 1);
            output.WriteDouble(PeRatioTtm);
          }
          if (PriceToSalesTtm != 0D) {
            output.WriteRawTag(169, 1);
            output.WriteDouble(PriceToSalesTtm);
          }
          if (PriceToBookTtm != 0D) {
            output.WriteRawTag(177, 1);
            output.WriteDouble(PriceToBookTtm);
          }
          if (PriceToFreeCashFlowTtm != 0D) {
            output.WriteRawTag(185, 1);
            output.WriteDouble(PriceToFreeCashFlowTtm);
          }
          if (TotalEnterpriseValueMrq != 0D) {
            output.WriteRawTag(193, 1);
            output.WriteDouble(TotalEnterpriseValueMrq);
          }
          if (EvToEbitdaMrq != 0D) {
            output.WriteRawTag(201, 1);
            output.WriteDouble(EvToEbitdaMrq);
          }
          if (NetMarginMrq != 0D) {
            output.WriteRawTag(209, 1);
            output.WriteDouble(NetMarginMrq);
          }
          if (NetInterestMarginMrq != 0D) {
            output.WriteRawTag(217, 1);
            output.WriteDouble(NetInterestMarginMrq);
          }
          if (Roe != 0D) {
            output.WriteRawTag(225, 1);
            output.WriteDouble(Roe);
          }
          if (Roa != 0D) {
            output.WriteRawTag(233, 1);
            output.WriteDouble(Roa);
          }
          if (Roic != 0D) {
            output.WriteRawTag(241, 1);
            output.WriteDouble(Roic);
          }
          if (TotalDebtMrq != 0D) {
            output.WriteRawTag(249, 1);
            output.WriteDouble(TotalDebtMrq);
          }
          if (TotalDebtToEquityMrq != 0D) {
            output.WriteRawTag(129, 2);
            output.WriteDouble(TotalDebtToEquityMrq);
          }
          if (TotalDebtToEbitdaMrq != 0D) {
            output.WriteRawTag(137, 2);
            output.WriteDouble(TotalDebtToEbitdaMrq);
          }
          if (FreeCashFlowToPrice != 0D) {
            output.WriteRawTag(145, 2);
            output.WriteDouble(FreeCashFlowToPrice);
          }
          if (NetDebtToEbitda != 0D) {
            output.WriteRawTag(153, 2);
            output.WriteDouble(NetDebtToEbitda);
          }
          if (CurrentRatioMrq != 0D) {
            output.WriteRawTag(161, 2);
            output.WriteDouble(CurrentRatioMrq);
          }
          if (FixedChargeCoverageRatioFy != 0D) {
            output.WriteRawTag(169, 2);
            output.WriteDouble(FixedChargeCoverageRatioFy);
          }
          if (DividendYieldDailyTtm != 0D) {
            output.WriteRawTag(177, 2);
            output.WriteDouble(DividendYieldDailyTtm);
          }
          if (DividendRateTtm != 0D) {
            output.WriteRawTag(185, 2);
            output.WriteDouble(DividendRateTtm);
          }
          if (DividendsPerShare != 0D) {
            output.WriteRawTag(193, 2);
            output.WriteDouble(DividendsPerShare);
          }
          if (FiveYearsAverageDividendYield != 0D) {
            output.WriteRawTag(201, 2);
            output.WriteDouble(FiveYearsAverageDividendYield);
          }
          if (FiveYearAnnualDividendGrowthRate != 0D) {
            output.WriteRawTag(209, 2);
            output.WriteDouble(FiveYearAnnualDividendGrowthRate);
          }
          if (DividendPayoutRatioFy != 0D) {
            output.WriteRawTag(217, 2);
            output.WriteDouble(DividendPayoutRatioFy);
          }
          if (BuyBackTtm != 0D) {
            output.WriteRawTag(225, 2);
            output.WriteDouble(BuyBackTtm);
          }
          if (OneYearAnnualRevenueGrowthRate != 0D) {
            output.WriteRawTag(233, 2);
            output.WriteDouble(OneYearAnnualRevenueGrowthRate);
          }
          if (DomicileIndicatorCode.Length != 0) {
            output.WriteRawTag(242, 2);
            output.WriteString(DomicileIndicatorCode);
          }
          if (AdrToCommonShareRatio != 0D) {
            output.WriteRawTag(249, 2);
            output.WriteDouble(AdrToCommonShareRatio);
          }
          if (NumberOfEmployees != 0D) {
            output.WriteRawTag(129, 3);
            output.WriteDouble(NumberOfEmployees);
          }
          if (exDividendDate_ != null) {
            output.WriteRawTag(138, 3);
            output.WriteMessage(ExDividendDate);
          }
          if (fiscalPeriodStartDate_ != null) {
            output.WriteRawTag(146, 3);
            output.WriteMessage(FiscalPeriodStartDate);
          }
          if (fiscalPeriodEndDate_ != null) {
            output.WriteRawTag(154, 3);
            output.WriteMessage(FiscalPeriodEndDate);
          }
          if (RevenueChangeFiveYears != 0D) {
            output.WriteRawTag(169, 3);
            output.WriteDouble(RevenueChangeFiveYears);
          }
          if (EpsChangeFiveYears != 0D) {
            output.WriteRawTag(177, 3);
            output.WriteDouble(EpsChangeFiveYears);
          }
          if (EbitdaChangeFiveYears != 0D) {
            output.WriteRawTag(185, 3);
            output.WriteDouble(EbitdaChangeFiveYears);
          }
          if (TotalDebtChangeFiveYears != 0D) {
            output.WriteRawTag(193, 3);
            output.WriteDouble(TotalDebtChangeFiveYears);
          }
          if (EvToSales != 0D) {
            output.WriteRawTag(201, 3);
            output.WriteDouble(EvToSales);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (AssetUid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AssetUid);
          }
          if (Currency.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Currency);
          }
          if (MarketCapitalization != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(MarketCapitalization);
          }
          if (HighPriceLast52Weeks != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(HighPriceLast52Weeks);
          }
          if (LowPriceLast52Weeks != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(LowPriceLast52Weeks);
          }
          if (AverageDailyVolumeLast10Days != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(AverageDailyVolumeLast10Days);
          }
          if (AverageDailyVolumeLast4Weeks != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(AverageDailyVolumeLast4Weeks);
          }
          if (Beta != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(Beta);
          }
          if (FreeFloat != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(FreeFloat);
          }
          if (ForwardAnnualDividendYield != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(ForwardAnnualDividendYield);
          }
          if (SharesOutstanding != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(SharesOutstanding);
          }
          if (RevenueTtm != 0D) {
            output.WriteRawTag(97);
            output.WriteDouble(RevenueTtm);
          }
          if (EbitdaTtm != 0D) {
            output.WriteRawTag(105);
            output.WriteDouble(EbitdaTtm);
          }
          if (NetIncomeTtm != 0D) {
            output.WriteRawTag(113);
            output.WriteDouble(NetIncomeTtm);
          }
          if (EpsTtm != 0D) {
            output.WriteRawTag(121);
            output.WriteDouble(EpsTtm);
          }
          if (DilutedEpsTtm != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(DilutedEpsTtm);
          }
          if (FreeCashFlowTtm != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(FreeCashFlowTtm);
          }
          if (FiveYearAnnualRevenueGrowthRate != 0D) {
            output.WriteRawTag(145, 1);
            output.WriteDouble(FiveYearAnnualRevenueGrowthRate);
          }
          if (ThreeYearAnnualRevenueGrowthRate != 0D) {
            output.WriteRawTag(153, 1);
            output.WriteDouble(ThreeYearAnnualRevenueGrowthRate);
          }
          if (PeRatioTtm != 0D) {
            output.WriteRawTag(161, 1);
            output.WriteDouble(PeRatioTtm);
          }
          if (PriceToSalesTtm != 0D) {
            output.WriteRawTag(169, 1);
            output.WriteDouble(PriceToSalesTtm);
          }
          if (PriceToBookTtm != 0D) {
            output.WriteRawTag(177, 1);
            output.WriteDouble(PriceToBookTtm);
          }
          if (PriceToFreeCashFlowTtm != 0D) {
            output.WriteRawTag(185, 1);
            output.WriteDouble(PriceToFreeCashFlowTtm);
          }
          if (TotalEnterpriseValueMrq != 0D) {
            output.WriteRawTag(193, 1);
            output.WriteDouble(TotalEnterpriseValueMrq);
          }
          if (EvToEbitdaMrq != 0D) {
            output.WriteRawTag(201, 1);
            output.WriteDouble(EvToEbitdaMrq);
          }
          if (NetMarginMrq != 0D) {
            output.WriteRawTag(209, 1);
            output.WriteDouble(NetMarginMrq);
          }
          if (NetInterestMarginMrq != 0D) {
            output.WriteRawTag(217, 1);
            output.WriteDouble(NetInterestMarginMrq);
          }
          if (Roe != 0D) {
            output.WriteRawTag(225, 1);
            output.WriteDouble(Roe);
          }
          if (Roa != 0D) {
            output.WriteRawTag(233, 1);
            output.WriteDouble(Roa);
          }
          if (Roic != 0D) {
            output.WriteRawTag(241, 1);
            output.WriteDouble(Roic);
          }
          if (TotalDebtMrq != 0D) {
            output.WriteRawTag(249, 1);
            output.WriteDouble(TotalDebtMrq);
          }
          if (TotalDebtToEquityMrq != 0D) {
            output.WriteRawTag(129, 2);
            output.WriteDouble(TotalDebtToEquityMrq);
          }
          if (TotalDebtToEbitdaMrq != 0D) {
            output.WriteRawTag(137, 2);
            output.WriteDouble(TotalDebtToEbitdaMrq);
          }
          if (FreeCashFlowToPrice != 0D) {
            output.WriteRawTag(145, 2);
            output.WriteDouble(FreeCashFlowToPrice);
          }
          if (NetDebtToEbitda != 0D) {
            output.WriteRawTag(153, 2);
            output.WriteDouble(NetDebtToEbitda);
          }
          if (CurrentRatioMrq != 0D) {
            output.WriteRawTag(161, 2);
            output.WriteDouble(CurrentRatioMrq);
          }
          if (FixedChargeCoverageRatioFy != 0D) {
            output.WriteRawTag(169, 2);
            output.WriteDouble(FixedChargeCoverageRatioFy);
          }
          if (DividendYieldDailyTtm != 0D) {
            output.WriteRawTag(177, 2);
            output.WriteDouble(DividendYieldDailyTtm);
          }
          if (DividendRateTtm != 0D) {
            output.WriteRawTag(185, 2);
            output.WriteDouble(DividendRateTtm);
          }
          if (DividendsPerShare != 0D) {
            output.WriteRawTag(193, 2);
            output.WriteDouble(DividendsPerShare);
          }
          if (FiveYearsAverageDividendYield != 0D) {
            output.WriteRawTag(201, 2);
            output.WriteDouble(FiveYearsAverageDividendYield);
          }
          if (FiveYearAnnualDividendGrowthRate != 0D) {
            output.WriteRawTag(209, 2);
            output.WriteDouble(FiveYearAnnualDividendGrowthRate);
          }
          if (DividendPayoutRatioFy != 0D) {
            output.WriteRawTag(217, 2);
            output.WriteDouble(DividendPayoutRatioFy);
          }
          if (BuyBackTtm != 0D) {
            output.WriteRawTag(225, 2);
            output.WriteDouble(BuyBackTtm);
          }
          if (OneYearAnnualRevenueGrowthRate != 0D) {
            output.WriteRawTag(233, 2);
            output.WriteDouble(OneYearAnnualRevenueGrowthRate);
          }
          if (DomicileIndicatorCode.Length != 0) {
            output.WriteRawTag(242, 2);
            output.WriteString(DomicileIndicatorCode);
          }
          if (AdrToCommonShareRatio != 0D) {
            output.WriteRawTag(249, 2);
            output.WriteDouble(AdrToCommonShareRatio);
          }
          if (NumberOfEmployees != 0D) {
            output.WriteRawTag(129, 3);
            output.WriteDouble(NumberOfEmployees);
          }
          if (exDividendDate_ != null) {
            output.WriteRawTag(138, 3);
            output.WriteMessage(ExDividendDate);
          }
          if (fiscalPeriodStartDate_ != null) {
            output.WriteRawTag(146, 3);
            output.WriteMessage(FiscalPeriodStartDate);
          }
          if (fiscalPeriodEndDate_ != null) {
            output.WriteRawTag(154, 3);
            output.WriteMessage(FiscalPeriodEndDate);
          }
          if (RevenueChangeFiveYears != 0D) {
            output.WriteRawTag(169, 3);
            output.WriteDouble(RevenueChangeFiveYears);
          }
          if (EpsChangeFiveYears != 0D) {
            output.WriteRawTag(177, 3);
            output.WriteDouble(EpsChangeFiveYears);
          }
          if (EbitdaChangeFiveYears != 0D) {
            output.WriteRawTag(185, 3);
            output.WriteDouble(EbitdaChangeFiveYears);
          }
          if (TotalDebtChangeFiveYears != 0D) {
            output.WriteRawTag(193, 3);
            output.WriteDouble(TotalDebtChangeFiveYears);
          }
          if (EvToSales != 0D) {
            output.WriteRawTag(201, 3);
            output.WriteDouble(EvToSales);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (AssetUid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetUid);
          }
          if (Currency.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
          }
          if (MarketCapitalization != 0D) {
            size += 1 + 8;
          }
          if (HighPriceLast52Weeks != 0D) {
            size += 1 + 8;
          }
          if (LowPriceLast52Weeks != 0D) {
            size += 1 + 8;
          }
          if (AverageDailyVolumeLast10Days != 0D) {
            size += 1 + 8;
          }
          if (AverageDailyVolumeLast4Weeks != 0D) {
            size += 1 + 8;
          }
          if (Beta != 0D) {
            size += 1 + 8;
          }
          if (FreeFloat != 0D) {
            size += 1 + 8;
          }
          if (ForwardAnnualDividendYield != 0D) {
            size += 1 + 8;
          }
          if (SharesOutstanding != 0D) {
            size += 1 + 8;
          }
          if (RevenueTtm != 0D) {
            size += 1 + 8;
          }
          if (EbitdaTtm != 0D) {
            size += 1 + 8;
          }
          if (NetIncomeTtm != 0D) {
            size += 1 + 8;
          }
          if (EpsTtm != 0D) {
            size += 1 + 8;
          }
          if (DilutedEpsTtm != 0D) {
            size += 2 + 8;
          }
          if (FreeCashFlowTtm != 0D) {
            size += 2 + 8;
          }
          if (FiveYearAnnualRevenueGrowthRate != 0D) {
            size += 2 + 8;
          }
          if (ThreeYearAnnualRevenueGrowthRate != 0D) {
            size += 2 + 8;
          }
          if (PeRatioTtm != 0D) {
            size += 2 + 8;
          }
          if (PriceToSalesTtm != 0D) {
            size += 2 + 8;
          }
          if (PriceToBookTtm != 0D) {
            size += 2 + 8;
          }
          if (PriceToFreeCashFlowTtm != 0D) {
            size += 2 + 8;
          }
          if (TotalEnterpriseValueMrq != 0D) {
            size += 2 + 8;
          }
          if (EvToEbitdaMrq != 0D) {
            size += 2 + 8;
          }
          if (NetMarginMrq != 0D) {
            size += 2 + 8;
          }
          if (NetInterestMarginMrq != 0D) {
            size += 2 + 8;
          }
          if (Roe != 0D) {
            size += 2 + 8;
          }
          if (Roa != 0D) {
            size += 2 + 8;
          }
          if (Roic != 0D) {
            size += 2 + 8;
          }
          if (TotalDebtMrq != 0D) {
            size += 2 + 8;
          }
          if (TotalDebtToEquityMrq != 0D) {
            size += 2 + 8;
          }
          if (TotalDebtToEbitdaMrq != 0D) {
            size += 2 + 8;
          }
          if (FreeCashFlowToPrice != 0D) {
            size += 2 + 8;
          }
          if (NetDebtToEbitda != 0D) {
            size += 2 + 8;
          }
          if (CurrentRatioMrq != 0D) {
            size += 2 + 8;
          }
          if (FixedChargeCoverageRatioFy != 0D) {
            size += 2 + 8;
          }
          if (DividendYieldDailyTtm != 0D) {
            size += 2 + 8;
          }
          if (DividendRateTtm != 0D) {
            size += 2 + 8;
          }
          if (DividendsPerShare != 0D) {
            size += 2 + 8;
          }
          if (FiveYearsAverageDividendYield != 0D) {
            size += 2 + 8;
          }
          if (FiveYearAnnualDividendGrowthRate != 0D) {
            size += 2 + 8;
          }
          if (DividendPayoutRatioFy != 0D) {
            size += 2 + 8;
          }
          if (BuyBackTtm != 0D) {
            size += 2 + 8;
          }
          if (OneYearAnnualRevenueGrowthRate != 0D) {
            size += 2 + 8;
          }
          if (DomicileIndicatorCode.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DomicileIndicatorCode);
          }
          if (AdrToCommonShareRatio != 0D) {
            size += 2 + 8;
          }
          if (NumberOfEmployees != 0D) {
            size += 2 + 8;
          }
          if (exDividendDate_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExDividendDate);
          }
          if (fiscalPeriodStartDate_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(FiscalPeriodStartDate);
          }
          if (fiscalPeriodEndDate_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(FiscalPeriodEndDate);
          }
          if (RevenueChangeFiveYears != 0D) {
            size += 2 + 8;
          }
          if (EpsChangeFiveYears != 0D) {
            size += 2 + 8;
          }
          if (EbitdaChangeFiveYears != 0D) {
            size += 2 + 8;
          }
          if (TotalDebtChangeFiveYears != 0D) {
            size += 2 + 8;
          }
          if (EvToSales != 0D) {
            size += 2 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(StatisticResponse other) {
          if (other == null) {
            return;
          }
          if (other.AssetUid.Length != 0) {
            AssetUid = other.AssetUid;
          }
          if (other.Currency.Length != 0) {
            Currency = other.Currency;
          }
          if (other.MarketCapitalization != 0D) {
            MarketCapitalization = other.MarketCapitalization;
          }
          if (other.HighPriceLast52Weeks != 0D) {
            HighPriceLast52Weeks = other.HighPriceLast52Weeks;
          }
          if (other.LowPriceLast52Weeks != 0D) {
            LowPriceLast52Weeks = other.LowPriceLast52Weeks;
          }
          if (other.AverageDailyVolumeLast10Days != 0D) {
            AverageDailyVolumeLast10Days = other.AverageDailyVolumeLast10Days;
          }
          if (other.AverageDailyVolumeLast4Weeks != 0D) {
            AverageDailyVolumeLast4Weeks = other.AverageDailyVolumeLast4Weeks;
          }
          if (other.Beta != 0D) {
            Beta = other.Beta;
          }
          if (other.FreeFloat != 0D) {
            FreeFloat = other.FreeFloat;
          }
          if (other.ForwardAnnualDividendYield != 0D) {
            ForwardAnnualDividendYield = other.ForwardAnnualDividendYield;
          }
          if (other.SharesOutstanding != 0D) {
            SharesOutstanding = other.SharesOutstanding;
          }
          if (other.RevenueTtm != 0D) {
            RevenueTtm = other.RevenueTtm;
          }
          if (other.EbitdaTtm != 0D) {
            EbitdaTtm = other.EbitdaTtm;
          }
          if (other.NetIncomeTtm != 0D) {
            NetIncomeTtm = other.NetIncomeTtm;
          }
          if (other.EpsTtm != 0D) {
            EpsTtm = other.EpsTtm;
          }
          if (other.DilutedEpsTtm != 0D) {
            DilutedEpsTtm = other.DilutedEpsTtm;
          }
          if (other.FreeCashFlowTtm != 0D) {
            FreeCashFlowTtm = other.FreeCashFlowTtm;
          }
          if (other.FiveYearAnnualRevenueGrowthRate != 0D) {
            FiveYearAnnualRevenueGrowthRate = other.FiveYearAnnualRevenueGrowthRate;
          }
          if (other.ThreeYearAnnualRevenueGrowthRate != 0D) {
            ThreeYearAnnualRevenueGrowthRate = other.ThreeYearAnnualRevenueGrowthRate;
          }
          if (other.PeRatioTtm != 0D) {
            PeRatioTtm = other.PeRatioTtm;
          }
          if (other.PriceToSalesTtm != 0D) {
            PriceToSalesTtm = other.PriceToSalesTtm;
          }
          if (other.PriceToBookTtm != 0D) {
            PriceToBookTtm = other.PriceToBookTtm;
          }
          if (other.PriceToFreeCashFlowTtm != 0D) {
            PriceToFreeCashFlowTtm = other.PriceToFreeCashFlowTtm;
          }
          if (other.TotalEnterpriseValueMrq != 0D) {
            TotalEnterpriseValueMrq = other.TotalEnterpriseValueMrq;
          }
          if (other.EvToEbitdaMrq != 0D) {
            EvToEbitdaMrq = other.EvToEbitdaMrq;
          }
          if (other.NetMarginMrq != 0D) {
            NetMarginMrq = other.NetMarginMrq;
          }
          if (other.NetInterestMarginMrq != 0D) {
            NetInterestMarginMrq = other.NetInterestMarginMrq;
          }
          if (other.Roe != 0D) {
            Roe = other.Roe;
          }
          if (other.Roa != 0D) {
            Roa = other.Roa;
          }
          if (other.Roic != 0D) {
            Roic = other.Roic;
          }
          if (other.TotalDebtMrq != 0D) {
            TotalDebtMrq = other.TotalDebtMrq;
          }
          if (other.TotalDebtToEquityMrq != 0D) {
            TotalDebtToEquityMrq = other.TotalDebtToEquityMrq;
          }
          if (other.TotalDebtToEbitdaMrq != 0D) {
            TotalDebtToEbitdaMrq = other.TotalDebtToEbitdaMrq;
          }
          if (other.FreeCashFlowToPrice != 0D) {
            FreeCashFlowToPrice = other.FreeCashFlowToPrice;
          }
          if (other.NetDebtToEbitda != 0D) {
            NetDebtToEbitda = other.NetDebtToEbitda;
          }
          if (other.CurrentRatioMrq != 0D) {
            CurrentRatioMrq = other.CurrentRatioMrq;
          }
          if (other.FixedChargeCoverageRatioFy != 0D) {
            FixedChargeCoverageRatioFy = other.FixedChargeCoverageRatioFy;
          }
          if (other.DividendYieldDailyTtm != 0D) {
            DividendYieldDailyTtm = other.DividendYieldDailyTtm;
          }
          if (other.DividendRateTtm != 0D) {
            DividendRateTtm = other.DividendRateTtm;
          }
          if (other.DividendsPerShare != 0D) {
            DividendsPerShare = other.DividendsPerShare;
          }
          if (other.FiveYearsAverageDividendYield != 0D) {
            FiveYearsAverageDividendYield = other.FiveYearsAverageDividendYield;
          }
          if (other.FiveYearAnnualDividendGrowthRate != 0D) {
            FiveYearAnnualDividendGrowthRate = other.FiveYearAnnualDividendGrowthRate;
          }
          if (other.DividendPayoutRatioFy != 0D) {
            DividendPayoutRatioFy = other.DividendPayoutRatioFy;
          }
          if (other.BuyBackTtm != 0D) {
            BuyBackTtm = other.BuyBackTtm;
          }
          if (other.OneYearAnnualRevenueGrowthRate != 0D) {
            OneYearAnnualRevenueGrowthRate = other.OneYearAnnualRevenueGrowthRate;
          }
          if (other.DomicileIndicatorCode.Length != 0) {
            DomicileIndicatorCode = other.DomicileIndicatorCode;
          }
          if (other.AdrToCommonShareRatio != 0D) {
            AdrToCommonShareRatio = other.AdrToCommonShareRatio;
          }
          if (other.NumberOfEmployees != 0D) {
            NumberOfEmployees = other.NumberOfEmployees;
          }
          if (other.exDividendDate_ != null) {
            if (exDividendDate_ == null) {
              ExDividendDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            ExDividendDate.MergeFrom(other.ExDividendDate);
          }
          if (other.fiscalPeriodStartDate_ != null) {
            if (fiscalPeriodStartDate_ == null) {
              FiscalPeriodStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            FiscalPeriodStartDate.MergeFrom(other.FiscalPeriodStartDate);
          }
          if (other.fiscalPeriodEndDate_ != null) {
            if (fiscalPeriodEndDate_ == null) {
              FiscalPeriodEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            FiscalPeriodEndDate.MergeFrom(other.FiscalPeriodEndDate);
          }
          if (other.RevenueChangeFiveYears != 0D) {
            RevenueChangeFiveYears = other.RevenueChangeFiveYears;
          }
          if (other.EpsChangeFiveYears != 0D) {
            EpsChangeFiveYears = other.EpsChangeFiveYears;
          }
          if (other.EbitdaChangeFiveYears != 0D) {
            EbitdaChangeFiveYears = other.EbitdaChangeFiveYears;
          }
          if (other.TotalDebtChangeFiveYears != 0D) {
            TotalDebtChangeFiveYears = other.TotalDebtChangeFiveYears;
          }
          if (other.EvToSales != 0D) {
            EvToSales = other.EvToSales;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AssetUid = input.ReadString();
                break;
              }
              case 18: {
                Currency = input.ReadString();
                break;
              }
              case 25: {
                MarketCapitalization = input.ReadDouble();
                break;
              }
              case 33: {
                HighPriceLast52Weeks = input.ReadDouble();
                break;
              }
              case 41: {
                LowPriceLast52Weeks = input.ReadDouble();
                break;
              }
              case 49: {
                AverageDailyVolumeLast10Days = input.ReadDouble();
                break;
              }
              case 57: {
                AverageDailyVolumeLast4Weeks = input.ReadDouble();
                break;
              }
              case 65: {
                Beta = input.ReadDouble();
                break;
              }
              case 73: {
                FreeFloat = input.ReadDouble();
                break;
              }
              case 81: {
                ForwardAnnualDividendYield = input.ReadDouble();
                break;
              }
              case 89: {
                SharesOutstanding = input.ReadDouble();
                break;
              }
              case 97: {
                RevenueTtm = input.ReadDouble();
                break;
              }
              case 105: {
                EbitdaTtm = input.ReadDouble();
                break;
              }
              case 113: {
                NetIncomeTtm = input.ReadDouble();
                break;
              }
              case 121: {
                EpsTtm = input.ReadDouble();
                break;
              }
              case 129: {
                DilutedEpsTtm = input.ReadDouble();
                break;
              }
              case 137: {
                FreeCashFlowTtm = input.ReadDouble();
                break;
              }
              case 145: {
                FiveYearAnnualRevenueGrowthRate = input.ReadDouble();
                break;
              }
              case 153: {
                ThreeYearAnnualRevenueGrowthRate = input.ReadDouble();
                break;
              }
              case 161: {
                PeRatioTtm = input.ReadDouble();
                break;
              }
              case 169: {
                PriceToSalesTtm = input.ReadDouble();
                break;
              }
              case 177: {
                PriceToBookTtm = input.ReadDouble();
                break;
              }
              case 185: {
                PriceToFreeCashFlowTtm = input.ReadDouble();
                break;
              }
              case 193: {
                TotalEnterpriseValueMrq = input.ReadDouble();
                break;
              }
              case 201: {
                EvToEbitdaMrq = input.ReadDouble();
                break;
              }
              case 209: {
                NetMarginMrq = input.ReadDouble();
                break;
              }
              case 217: {
                NetInterestMarginMrq = input.ReadDouble();
                break;
              }
              case 225: {
                Roe = input.ReadDouble();
                break;
              }
              case 233: {
                Roa = input.ReadDouble();
                break;
              }
              case 241: {
                Roic = input.ReadDouble();
                break;
              }
              case 249: {
                TotalDebtMrq = input.ReadDouble();
                break;
              }
              case 257: {
                TotalDebtToEquityMrq = input.ReadDouble();
                break;
              }
              case 265: {
                TotalDebtToEbitdaMrq = input.ReadDouble();
                break;
              }
              case 273: {
                FreeCashFlowToPrice = input.ReadDouble();
                break;
              }
              case 281: {
                NetDebtToEbitda = input.ReadDouble();
                break;
              }
              case 289: {
                CurrentRatioMrq = input.ReadDouble();
                break;
              }
              case 297: {
                FixedChargeCoverageRatioFy = input.ReadDouble();
                break;
              }
              case 305: {
                DividendYieldDailyTtm = input.ReadDouble();
                break;
              }
              case 313: {
                DividendRateTtm = input.ReadDouble();
                break;
              }
              case 321: {
                DividendsPerShare = input.ReadDouble();
                break;
              }
              case 329: {
                FiveYearsAverageDividendYield = input.ReadDouble();
                break;
              }
              case 337: {
                FiveYearAnnualDividendGrowthRate = input.ReadDouble();
                break;
              }
              case 345: {
                DividendPayoutRatioFy = input.ReadDouble();
                break;
              }
              case 353: {
                BuyBackTtm = input.ReadDouble();
                break;
              }
              case 361: {
                OneYearAnnualRevenueGrowthRate = input.ReadDouble();
                break;
              }
              case 370: {
                DomicileIndicatorCode = input.ReadString();
                break;
              }
              case 377: {
                AdrToCommonShareRatio = input.ReadDouble();
                break;
              }
              case 385: {
                NumberOfEmployees = input.ReadDouble();
                break;
              }
              case 394: {
                if (exDividendDate_ == null) {
                  ExDividendDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(ExDividendDate);
                break;
              }
              case 402: {
                if (fiscalPeriodStartDate_ == null) {
                  FiscalPeriodStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(FiscalPeriodStartDate);
                break;
              }
              case 410: {
                if (fiscalPeriodEndDate_ == null) {
                  FiscalPeriodEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(FiscalPeriodEndDate);
                break;
              }
              case 425: {
                RevenueChangeFiveYears = input.ReadDouble();
                break;
              }
              case 433: {
                EpsChangeFiveYears = input.ReadDouble();
                break;
              }
              case 441: {
                EbitdaChangeFiveYears = input.ReadDouble();
                break;
              }
              case 449: {
                TotalDebtChangeFiveYears = input.ReadDouble();
                break;
              }
              case 457: {
                EvToSales = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                AssetUid = input.ReadString();
                break;
              }
              case 18: {
                Currency = input.ReadString();
                break;
              }
              case 25: {
                MarketCapitalization = input.ReadDouble();
                break;
              }
              case 33: {
                HighPriceLast52Weeks = input.ReadDouble();
                break;
              }
              case 41: {
                LowPriceLast52Weeks = input.ReadDouble();
                break;
              }
              case 49: {
                AverageDailyVolumeLast10Days = input.ReadDouble();
                break;
              }
              case 57: {
                AverageDailyVolumeLast4Weeks = input.ReadDouble();
                break;
              }
              case 65: {
                Beta = input.ReadDouble();
                break;
              }
              case 73: {
                FreeFloat = input.ReadDouble();
                break;
              }
              case 81: {
                ForwardAnnualDividendYield = input.ReadDouble();
                break;
              }
              case 89: {
                SharesOutstanding = input.ReadDouble();
                break;
              }
              case 97: {
                RevenueTtm = input.ReadDouble();
                break;
              }
              case 105: {
                EbitdaTtm = input.ReadDouble();
                break;
              }
              case 113: {
                NetIncomeTtm = input.ReadDouble();
                break;
              }
              case 121: {
                EpsTtm = input.ReadDouble();
                break;
              }
              case 129: {
                DilutedEpsTtm = input.ReadDouble();
                break;
              }
              case 137: {
                FreeCashFlowTtm = input.ReadDouble();
                break;
              }
              case 145: {
                FiveYearAnnualRevenueGrowthRate = input.ReadDouble();
                break;
              }
              case 153: {
                ThreeYearAnnualRevenueGrowthRate = input.ReadDouble();
                break;
              }
              case 161: {
                PeRatioTtm = input.ReadDouble();
                break;
              }
              case 169: {
                PriceToSalesTtm = input.ReadDouble();
                break;
              }
              case 177: {
                PriceToBookTtm = input.ReadDouble();
                break;
              }
              case 185: {
                PriceToFreeCashFlowTtm = input.ReadDouble();
                break;
              }
              case 193: {
                TotalEnterpriseValueMrq = input.ReadDouble();
                break;
              }
              case 201: {
                EvToEbitdaMrq = input.ReadDouble();
                break;
              }
              case 209: {
                NetMarginMrq = input.ReadDouble();
                break;
              }
              case 217: {
                NetInterestMarginMrq = input.ReadDouble();
                break;
              }
              case 225: {
                Roe = input.ReadDouble();
                break;
              }
              case 233: {
                Roa = input.ReadDouble();
                break;
              }
              case 241: {
                Roic = input.ReadDouble();
                break;
              }
              case 249: {
                TotalDebtMrq = input.ReadDouble();
                break;
              }
              case 257: {
                TotalDebtToEquityMrq = input.ReadDouble();
                break;
              }
              case 265: {
                TotalDebtToEbitdaMrq = input.ReadDouble();
                break;
              }
              case 273: {
                FreeCashFlowToPrice = input.ReadDouble();
                break;
              }
              case 281: {
                NetDebtToEbitda = input.ReadDouble();
                break;
              }
              case 289: {
                CurrentRatioMrq = input.ReadDouble();
                break;
              }
              case 297: {
                FixedChargeCoverageRatioFy = input.ReadDouble();
                break;
              }
              case 305: {
                DividendYieldDailyTtm = input.ReadDouble();
                break;
              }
              case 313: {
                DividendRateTtm = input.ReadDouble();
                break;
              }
              case 321: {
                DividendsPerShare = input.ReadDouble();
                break;
              }
              case 329: {
                FiveYearsAverageDividendYield = input.ReadDouble();
                break;
              }
              case 337: {
                FiveYearAnnualDividendGrowthRate = input.ReadDouble();
                break;
              }
              case 345: {
                DividendPayoutRatioFy = input.ReadDouble();
                break;
              }
              case 353: {
                BuyBackTtm = input.ReadDouble();
                break;
              }
              case 361: {
                OneYearAnnualRevenueGrowthRate = input.ReadDouble();
                break;
              }
              case 370: {
                DomicileIndicatorCode = input.ReadString();
                break;
              }
              case 377: {
                AdrToCommonShareRatio = input.ReadDouble();
                break;
              }
              case 385: {
                NumberOfEmployees = input.ReadDouble();
                break;
              }
              case 394: {
                if (exDividendDate_ == null) {
                  ExDividendDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(ExDividendDate);
                break;
              }
              case 402: {
                if (fiscalPeriodStartDate_ == null) {
                  FiscalPeriodStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(FiscalPeriodStartDate);
                break;
              }
              case 410: {
                if (fiscalPeriodEndDate_ == null) {
                  FiscalPeriodEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(FiscalPeriodEndDate);
                break;
              }
              case 425: {
                RevenueChangeFiveYears = input.ReadDouble();
                break;
              }
              case 433: {
                EpsChangeFiveYears = input.ReadDouble();
                break;
              }
              case 441: {
                EbitdaChangeFiveYears = input.ReadDouble();
                break;
              }
              case 449: {
                TotalDebtChangeFiveYears = input.ReadDouble();
                break;
              }
              case 457: {
                EvToSales = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  ///Запрос отчетов эмитентов
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetAssetReportsRequest : pb::IMessage<GetAssetReportsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAssetReportsRequest> _parser = new pb::MessageParser<GetAssetReportsRequest>(() => new GetAssetReportsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAssetReportsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetReportsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetReportsRequest(GetAssetReportsRequest other) : this() {
      instrumentId_ = other.instrumentId_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetReportsRequest Clone() {
      return new GetAssetReportsRequest(this);
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 1;
    private string instrumentId_ = "";
    /// <summary>
    ///Идентификатор инструмента в формате uid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAssetReportsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAssetReportsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentId != other.InstrumentId) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentId);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentId);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAssetReportsRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentId = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InstrumentId = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Отчеты эмитентов
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetAssetReportsResponse : pb::IMessage<GetAssetReportsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAssetReportsResponse> _parser = new pb::MessageParser<GetAssetReportsResponse>(() => new GetAssetReportsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAssetReportsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetReportsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetReportsResponse(GetAssetReportsResponse other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAssetReportsResponse Clone() {
      return new GetAssetReportsResponse(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.GetAssetReportsEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.GetAssetReportsEvent.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.GetAssetReportsEvent> events_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.GetAssetReportsEvent>();
    /// <summary>
    /// Массив событий по облигации
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.GetAssetReportsEvent> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAssetReportsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAssetReportsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      events_.WriteTo(ref output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAssetReportsResponse other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            events_.AddEntriesFrom(ref input, _repeated_events_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GetAssetReportsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum AssetReportPeriodType {
        /// <summary>
        ///не указан
        /// </summary>
        [pbr::OriginalName("PERIOD_TYPE_UNSPECIFIED")] PeriodTypeUnspecified = 0,
        /// <summary>
        /// Квартальный
        /// </summary>
        [pbr::OriginalName("PERIOD_TYPE_QUARTER")] PeriodTypeQuarter = 1,
        /// <summary>
        /// Полугодовой
        /// </summary>
        [pbr::OriginalName("PERIOD_TYPE_SEMIANNUAL")] PeriodTypeSemiannual = 2,
        /// <summary>
        /// Годовой
        /// </summary>
        [pbr::OriginalName("PERIOD_TYPE_ANNUAL")] PeriodTypeAnnual = 3,
      }

      /// <summary>
      ///Отчет
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class GetAssetReportsEvent : pb::IMessage<GetAssetReportsEvent>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GetAssetReportsEvent> _parser = new pb::MessageParser<GetAssetReportsEvent>(() => new GetAssetReportsEvent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<GetAssetReportsEvent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GetAssetReportsEvent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GetAssetReportsEvent(GetAssetReportsEvent other) : this() {
          instrumentId_ = other.instrumentId_;
          reportDate_ = other.reportDate_ != null ? other.reportDate_.Clone() : null;
          periodYear_ = other.periodYear_;
          periodNum_ = other.periodNum_;
          periodType_ = other.periodType_;
          createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GetAssetReportsEvent Clone() {
          return new GetAssetReportsEvent(this);
        }

        /// <summary>Field number for the "instrument_id" field.</summary>
        public const int InstrumentIdFieldNumber = 1;
        private string instrumentId_ = "";
        /// <summary>
        /// Идентификатор инструмента.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string InstrumentId {
          get { return instrumentId_; }
          set {
            instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "report_date" field.</summary>
        public const int ReportDateFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Timestamp reportDate_;
        /// <summary>
        /// Дата публикации отчета.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp ReportDate {
          get { return reportDate_; }
          set {
            reportDate_ = value;
          }
        }

        /// <summary>Field number for the "period_year" field.</summary>
        public const int PeriodYearFieldNumber = 3;
        private int periodYear_;
        /// <summary>
        /// Год периода отчета.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int PeriodYear {
          get { return periodYear_; }
          set {
            periodYear_ = value;
          }
        }

        /// <summary>Field number for the "period_num" field.</summary>
        public const int PeriodNumFieldNumber = 4;
        private int periodNum_;
        /// <summary>
        /// Номер периода.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int PeriodNum {
          get { return periodNum_; }
          set {
            periodNum_ = value;
          }
        }

        /// <summary>Field number for the "period_type" field.</summary>
        public const int PeriodTypeFieldNumber = 5;
        private global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType periodType_ = global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType.PeriodTypeUnspecified;
        /// <summary>
        /// Тип отчета.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType PeriodType {
          get { return periodType_; }
          set {
            periodType_ = value;
          }
        }

        /// <summary>Field number for the "created_at" field.</summary>
        public const int CreatedAtFieldNumber = 6;
        private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
        /// <summary>
        /// Дата создания записи.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
          get { return createdAt_; }
          set {
            createdAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as GetAssetReportsEvent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(GetAssetReportsEvent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InstrumentId != other.InstrumentId) return false;
          if (!object.Equals(ReportDate, other.ReportDate)) return false;
          if (PeriodYear != other.PeriodYear) return false;
          if (PeriodNum != other.PeriodNum) return false;
          if (PeriodType != other.PeriodType) return false;
          if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
          if (reportDate_ != null) hash ^= ReportDate.GetHashCode();
          if (PeriodYear != 0) hash ^= PeriodYear.GetHashCode();
          if (PeriodNum != 0) hash ^= PeriodNum.GetHashCode();
          if (PeriodType != global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType.PeriodTypeUnspecified) hash ^= PeriodType.GetHashCode();
          if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (InstrumentId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(InstrumentId);
          }
          if (reportDate_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ReportDate);
          }
          if (PeriodYear != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(PeriodYear);
          }
          if (PeriodNum != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(PeriodNum);
          }
          if (PeriodType != global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType.PeriodTypeUnspecified) {
            output.WriteRawTag(40);
            output.WriteEnum((int) PeriodType);
          }
          if (createdAt_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(CreatedAt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (InstrumentId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(InstrumentId);
          }
          if (reportDate_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ReportDate);
          }
          if (PeriodYear != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(PeriodYear);
          }
          if (PeriodNum != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(PeriodNum);
          }
          if (PeriodType != global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType.PeriodTypeUnspecified) {
            output.WriteRawTag(40);
            output.WriteEnum((int) PeriodType);
          }
          if (createdAt_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(CreatedAt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (InstrumentId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
          }
          if (reportDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportDate);
          }
          if (PeriodYear != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeriodYear);
          }
          if (PeriodNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeriodNum);
          }
          if (PeriodType != global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType.PeriodTypeUnspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PeriodType);
          }
          if (createdAt_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(GetAssetReportsEvent other) {
          if (other == null) {
            return;
          }
          if (other.InstrumentId.Length != 0) {
            InstrumentId = other.InstrumentId;
          }
          if (other.reportDate_ != null) {
            if (reportDate_ == null) {
              ReportDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            ReportDate.MergeFrom(other.ReportDate);
          }
          if (other.PeriodYear != 0) {
            PeriodYear = other.PeriodYear;
          }
          if (other.PeriodNum != 0) {
            PeriodNum = other.PeriodNum;
          }
          if (other.PeriodType != global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType.PeriodTypeUnspecified) {
            PeriodType = other.PeriodType;
          }
          if (other.createdAt_ != null) {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            CreatedAt.MergeFrom(other.CreatedAt);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                InstrumentId = input.ReadString();
                break;
              }
              case 18: {
                if (reportDate_ == null) {
                  ReportDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(ReportDate);
                break;
              }
              case 24: {
                PeriodYear = input.ReadInt32();
                break;
              }
              case 32: {
                PeriodNum = input.ReadInt32();
                break;
              }
              case 40: {
                PeriodType = (global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType) input.ReadEnum();
                break;
              }
              case 50: {
                if (createdAt_ == null) {
                  CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CreatedAt);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                InstrumentId = input.ReadString();
                break;
              }
              case 18: {
                if (reportDate_ == null) {
                  ReportDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(ReportDate);
                break;
              }
              case 24: {
                PeriodYear = input.ReadInt32();
                break;
              }
              case 32: {
                PeriodNum = input.ReadInt32();
                break;
              }
              case 40: {
                PeriodType = (global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Types.AssetReportPeriodType) input.ReadEnum();
                break;
              }
              case 50: {
                if (createdAt_ == null) {
                  CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CreatedAt);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  ///Запрос консенсус-прогнозов
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetConsensusForecastsRequest : pb::IMessage<GetConsensusForecastsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetConsensusForecastsRequest> _parser = new pb::MessageParser<GetConsensusForecastsRequest>(() => new GetConsensusForecastsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetConsensusForecastsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetConsensusForecastsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetConsensusForecastsRequest(GetConsensusForecastsRequest other) : this() {
      paging_ = other.paging_ != null ? other.paging_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetConsensusForecastsRequest Clone() {
      return new GetConsensusForecastsRequest(this);
    }

    /// <summary>Field number for the "paging" field.</summary>
    public const int PagingFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Page paging_;
    /// <summary>
    ///Настройки пагинации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Page Paging {
      get { return paging_; }
      set {
        paging_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetConsensusForecastsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetConsensusForecastsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Paging, other.Paging)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (paging_ != null) hash ^= Paging.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (paging_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Paging);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (paging_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Paging);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (paging_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paging);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetConsensusForecastsRequest other) {
      if (other == null) {
        return;
      }
      if (other.paging_ != null) {
        if (paging_ == null) {
          Paging = new global::Tinkoff.InvestApi.V1.Page();
        }
        Paging.MergeFrom(other.Paging);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (paging_ == null) {
              Paging = new global::Tinkoff.InvestApi.V1.Page();
            }
            input.ReadMessage(Paging);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (paging_ == null) {
              Paging = new global::Tinkoff.InvestApi.V1.Page();
            }
            input.ReadMessage(Paging);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Консенсус-прогнозы
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetConsensusForecastsResponse : pb::IMessage<GetConsensusForecastsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetConsensusForecastsResponse> _parser = new pb::MessageParser<GetConsensusForecastsResponse>(() => new GetConsensusForecastsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetConsensusForecastsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetConsensusForecastsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetConsensusForecastsResponse(GetConsensusForecastsResponse other) : this() {
      items_ = other.items_.Clone();
      page_ = other.page_ != null ? other.page_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetConsensusForecastsResponse Clone() {
      return new GetConsensusForecastsResponse(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Types.ConsensusForecastsItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Types.ConsensusForecastsItem.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Types.ConsensusForecastsItem> items_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Types.ConsensusForecastsItem>();
    /// <summary>
    /// Массив прогнозов
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Types.ConsensusForecastsItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.PageResponse page_;
    /// <summary>
    ///Данные по пагинации
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.PageResponse Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetConsensusForecastsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetConsensusForecastsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (!object.Equals(Page, other.Page)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (page_ != null) hash ^= Page.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      items_.WriteTo(output, _repeated_items_codec);
      if (page_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Page);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      items_.WriteTo(ref output, _repeated_items_codec);
      if (page_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Page);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (page_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Page);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetConsensusForecastsResponse other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.page_ != null) {
        if (page_ == null) {
          Page = new global::Tinkoff.InvestApi.V1.PageResponse();
        }
        Page.MergeFrom(other.Page);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 18: {
            if (page_ == null) {
              Page = new global::Tinkoff.InvestApi.V1.PageResponse();
            }
            input.ReadMessage(Page);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
          case 18: {
            if (page_ == null) {
              Page = new global::Tinkoff.InvestApi.V1.PageResponse();
            }
            input.ReadMessage(Page);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GetConsensusForecastsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///Прогноз
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class ConsensusForecastsItem : pb::IMessage<ConsensusForecastsItem>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ConsensusForecastsItem> _parser = new pb::MessageParser<ConsensusForecastsItem>(() => new ConsensusForecastsItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ConsensusForecastsItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConsensusForecastsItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConsensusForecastsItem(ConsensusForecastsItem other) : this() {
          uid_ = other.uid_;
          assetUid_ = other.assetUid_;
          createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
          bestTargetPrice_ = other.bestTargetPrice_ != null ? other.bestTargetPrice_.Clone() : null;
          bestTargetLow_ = other.bestTargetLow_ != null ? other.bestTargetLow_.Clone() : null;
          bestTargetHigh_ = other.bestTargetHigh_ != null ? other.bestTargetHigh_.Clone() : null;
          totalBuyRecommend_ = other.totalBuyRecommend_;
          totalHoldRecommend_ = other.totalHoldRecommend_;
          totalSellRecommend_ = other.totalSellRecommend_;
          currency_ = other.currency_;
          consensus_ = other.consensus_;
          prognosisDate_ = other.prognosisDate_ != null ? other.prognosisDate_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConsensusForecastsItem Clone() {
          return new ConsensusForecastsItem(this);
        }

        /// <summary>Field number for the "uid" field.</summary>
        public const int UidFieldNumber = 1;
        private string uid_ = "";
        /// <summary>
        /// uid идентификатор
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Uid {
          get { return uid_; }
          set {
            uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "asset_uid" field.</summary>
        public const int AssetUidFieldNumber = 2;
        private string assetUid_ = "";
        /// <summary>
        /// uid идентификатор актива
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AssetUid {
          get { return assetUid_; }
          set {
            assetUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "created_at" field.</summary>
        public const int CreatedAtFieldNumber = 3;
        private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
        /// <summary>
        /// Дата и время создания записи
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
          get { return createdAt_; }
          set {
            createdAt_ = value;
          }
        }

        /// <summary>Field number for the "best_target_price" field.</summary>
        public const int BestTargetPriceFieldNumber = 4;
        private global::Tinkoff.InvestApi.V1.Quotation bestTargetPrice_;
        /// <summary>
        /// Целевая цена на 12 месяцев
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation BestTargetPrice {
          get { return bestTargetPrice_; }
          set {
            bestTargetPrice_ = value;
          }
        }

        /// <summary>Field number for the "best_target_low" field.</summary>
        public const int BestTargetLowFieldNumber = 5;
        private global::Tinkoff.InvestApi.V1.Quotation bestTargetLow_;
        /// <summary>
        /// Минимальная прогнозная цена
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation BestTargetLow {
          get { return bestTargetLow_; }
          set {
            bestTargetLow_ = value;
          }
        }

        /// <summary>Field number for the "best_target_high" field.</summary>
        public const int BestTargetHighFieldNumber = 6;
        private global::Tinkoff.InvestApi.V1.Quotation bestTargetHigh_;
        /// <summary>
        /// Максимальная прогнозная цена
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation BestTargetHigh {
          get { return bestTargetHigh_; }
          set {
            bestTargetHigh_ = value;
          }
        }

        /// <summary>Field number for the "total_buy_recommend" field.</summary>
        public const int TotalBuyRecommendFieldNumber = 7;
        private int totalBuyRecommend_;
        /// <summary>
        /// Количество аналитиков рекомендующих покупать
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int TotalBuyRecommend {
          get { return totalBuyRecommend_; }
          set {
            totalBuyRecommend_ = value;
          }
        }

        /// <summary>Field number for the "total_hold_recommend" field.</summary>
        public const int TotalHoldRecommendFieldNumber = 8;
        private int totalHoldRecommend_;
        /// <summary>
        /// Количество аналитиков рекомендующих держать
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int TotalHoldRecommend {
          get { return totalHoldRecommend_; }
          set {
            totalHoldRecommend_ = value;
          }
        }

        /// <summary>Field number for the "total_sell_recommend" field.</summary>
        public const int TotalSellRecommendFieldNumber = 9;
        private int totalSellRecommend_;
        /// <summary>
        /// Количество аналитиков рекомендующих продавать
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int TotalSellRecommend {
          get { return totalSellRecommend_; }
          set {
            totalSellRecommend_ = value;
          }
        }

        /// <summary>Field number for the "currency" field.</summary>
        public const int CurrencyFieldNumber = 10;
        private string currency_ = "";
        /// <summary>
        /// Валюта прогнозов /инструмента
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Currency {
          get { return currency_; }
          set {
            currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "consensus" field.</summary>
        public const int ConsensusFieldNumber = 11;
        private global::Tinkoff.InvestApi.V1.Recommendation consensus_ = global::Tinkoff.InvestApi.V1.Recommendation.Unspecified;
        /// <summary>
        /// Консенсус-прогноз
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Recommendation Consensus {
          get { return consensus_; }
          set {
            consensus_ = value;
          }
        }

        /// <summary>Field number for the "prognosis_date" field.</summary>
        public const int PrognosisDateFieldNumber = 12;
        private global::Google.Protobuf.WellKnownTypes.Timestamp prognosisDate_;
        /// <summary>
        /// Дата прогноза
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp PrognosisDate {
          get { return prognosisDate_; }
          set {
            prognosisDate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ConsensusForecastsItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ConsensusForecastsItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uid != other.Uid) return false;
          if (AssetUid != other.AssetUid) return false;
          if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
          if (!object.Equals(BestTargetPrice, other.BestTargetPrice)) return false;
          if (!object.Equals(BestTargetLow, other.BestTargetLow)) return false;
          if (!object.Equals(BestTargetHigh, other.BestTargetHigh)) return false;
          if (TotalBuyRecommend != other.TotalBuyRecommend) return false;
          if (TotalHoldRecommend != other.TotalHoldRecommend) return false;
          if (TotalSellRecommend != other.TotalSellRecommend) return false;
          if (Currency != other.Currency) return false;
          if (Consensus != other.Consensus) return false;
          if (!object.Equals(PrognosisDate, other.PrognosisDate)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Uid.Length != 0) hash ^= Uid.GetHashCode();
          if (AssetUid.Length != 0) hash ^= AssetUid.GetHashCode();
          if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
          if (bestTargetPrice_ != null) hash ^= BestTargetPrice.GetHashCode();
          if (bestTargetLow_ != null) hash ^= BestTargetLow.GetHashCode();
          if (bestTargetHigh_ != null) hash ^= BestTargetHigh.GetHashCode();
          if (TotalBuyRecommend != 0) hash ^= TotalBuyRecommend.GetHashCode();
          if (TotalHoldRecommend != 0) hash ^= TotalHoldRecommend.GetHashCode();
          if (TotalSellRecommend != 0) hash ^= TotalSellRecommend.GetHashCode();
          if (Currency.Length != 0) hash ^= Currency.GetHashCode();
          if (Consensus != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) hash ^= Consensus.GetHashCode();
          if (prognosisDate_ != null) hash ^= PrognosisDate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Uid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Uid);
          }
          if (AssetUid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AssetUid);
          }
          if (createdAt_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(CreatedAt);
          }
          if (bestTargetPrice_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(BestTargetPrice);
          }
          if (bestTargetLow_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(BestTargetLow);
          }
          if (bestTargetHigh_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(BestTargetHigh);
          }
          if (TotalBuyRecommend != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(TotalBuyRecommend);
          }
          if (TotalHoldRecommend != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(TotalHoldRecommend);
          }
          if (TotalSellRecommend != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(TotalSellRecommend);
          }
          if (Currency.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Currency);
          }
          if (Consensus != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) Consensus);
          }
          if (prognosisDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(PrognosisDate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Uid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Uid);
          }
          if (AssetUid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AssetUid);
          }
          if (createdAt_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(CreatedAt);
          }
          if (bestTargetPrice_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(BestTargetPrice);
          }
          if (bestTargetLow_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(BestTargetLow);
          }
          if (bestTargetHigh_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(BestTargetHigh);
          }
          if (TotalBuyRecommend != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(TotalBuyRecommend);
          }
          if (TotalHoldRecommend != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(TotalHoldRecommend);
          }
          if (TotalSellRecommend != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(TotalSellRecommend);
          }
          if (Currency.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Currency);
          }
          if (Consensus != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) Consensus);
          }
          if (prognosisDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(PrognosisDate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Uid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
          }
          if (AssetUid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetUid);
          }
          if (createdAt_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
          }
          if (bestTargetPrice_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BestTargetPrice);
          }
          if (bestTargetLow_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BestTargetLow);
          }
          if (bestTargetHigh_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BestTargetHigh);
          }
          if (TotalBuyRecommend != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalBuyRecommend);
          }
          if (TotalHoldRecommend != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalHoldRecommend);
          }
          if (TotalSellRecommend != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalSellRecommend);
          }
          if (Currency.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
          }
          if (Consensus != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Consensus);
          }
          if (prognosisDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrognosisDate);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ConsensusForecastsItem other) {
          if (other == null) {
            return;
          }
          if (other.Uid.Length != 0) {
            Uid = other.Uid;
          }
          if (other.AssetUid.Length != 0) {
            AssetUid = other.AssetUid;
          }
          if (other.createdAt_ != null) {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            CreatedAt.MergeFrom(other.CreatedAt);
          }
          if (other.bestTargetPrice_ != null) {
            if (bestTargetPrice_ == null) {
              BestTargetPrice = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            BestTargetPrice.MergeFrom(other.BestTargetPrice);
          }
          if (other.bestTargetLow_ != null) {
            if (bestTargetLow_ == null) {
              BestTargetLow = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            BestTargetLow.MergeFrom(other.BestTargetLow);
          }
          if (other.bestTargetHigh_ != null) {
            if (bestTargetHigh_ == null) {
              BestTargetHigh = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            BestTargetHigh.MergeFrom(other.BestTargetHigh);
          }
          if (other.TotalBuyRecommend != 0) {
            TotalBuyRecommend = other.TotalBuyRecommend;
          }
          if (other.TotalHoldRecommend != 0) {
            TotalHoldRecommend = other.TotalHoldRecommend;
          }
          if (other.TotalSellRecommend != 0) {
            TotalSellRecommend = other.TotalSellRecommend;
          }
          if (other.Currency.Length != 0) {
            Currency = other.Currency;
          }
          if (other.Consensus != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            Consensus = other.Consensus;
          }
          if (other.prognosisDate_ != null) {
            if (prognosisDate_ == null) {
              PrognosisDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            PrognosisDate.MergeFrom(other.PrognosisDate);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Uid = input.ReadString();
                break;
              }
              case 18: {
                AssetUid = input.ReadString();
                break;
              }
              case 26: {
                if (createdAt_ == null) {
                  CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CreatedAt);
                break;
              }
              case 34: {
                if (bestTargetPrice_ == null) {
                  BestTargetPrice = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(BestTargetPrice);
                break;
              }
              case 42: {
                if (bestTargetLow_ == null) {
                  BestTargetLow = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(BestTargetLow);
                break;
              }
              case 50: {
                if (bestTargetHigh_ == null) {
                  BestTargetHigh = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(BestTargetHigh);
                break;
              }
              case 56: {
                TotalBuyRecommend = input.ReadInt32();
                break;
              }
              case 64: {
                TotalHoldRecommend = input.ReadInt32();
                break;
              }
              case 72: {
                TotalSellRecommend = input.ReadInt32();
                break;
              }
              case 82: {
                Currency = input.ReadString();
                break;
              }
              case 88: {
                Consensus = (global::Tinkoff.InvestApi.V1.Recommendation) input.ReadEnum();
                break;
              }
              case 98: {
                if (prognosisDate_ == null) {
                  PrognosisDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(PrognosisDate);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Uid = input.ReadString();
                break;
              }
              case 18: {
                AssetUid = input.ReadString();
                break;
              }
              case 26: {
                if (createdAt_ == null) {
                  CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CreatedAt);
                break;
              }
              case 34: {
                if (bestTargetPrice_ == null) {
                  BestTargetPrice = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(BestTargetPrice);
                break;
              }
              case 42: {
                if (bestTargetLow_ == null) {
                  BestTargetLow = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(BestTargetLow);
                break;
              }
              case 50: {
                if (bestTargetHigh_ == null) {
                  BestTargetHigh = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(BestTargetHigh);
                break;
              }
              case 56: {
                TotalBuyRecommend = input.ReadInt32();
                break;
              }
              case 64: {
                TotalHoldRecommend = input.ReadInt32();
                break;
              }
              case 72: {
                TotalSellRecommend = input.ReadInt32();
                break;
              }
              case 82: {
                Currency = input.ReadString();
                break;
              }
              case 88: {
                Consensus = (global::Tinkoff.InvestApi.V1.Recommendation) input.ReadEnum();
                break;
              }
              case 98: {
                if (prognosisDate_ == null) {
                  PrognosisDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(PrognosisDate);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  ///Запрос прогнозов инвестдомов
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetForecastRequest : pb::IMessage<GetForecastRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetForecastRequest> _parser = new pb::MessageParser<GetForecastRequest>(() => new GetForecastRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetForecastRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetForecastRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetForecastRequest(GetForecastRequest other) : this() {
      instrumentId_ = other.instrumentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetForecastRequest Clone() {
      return new GetForecastRequest(this);
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 1;
    private string instrumentId_ = "";
    /// <summary>
    /// Идентификатор инструмента
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetForecastRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetForecastRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentId != other.InstrumentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetForecastRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InstrumentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Прогнозы инвестдомов по инструменту
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GetForecastResponse : pb::IMessage<GetForecastResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetForecastResponse> _parser = new pb::MessageParser<GetForecastResponse>(() => new GetForecastResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetForecastResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetForecastResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetForecastResponse(GetForecastResponse other) : this() {
      targets_ = other.targets_.Clone();
      consensus_ = other.consensus_ != null ? other.consensus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetForecastResponse Clone() {
      return new GetForecastResponse(this);
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.TargetItem> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.TargetItem.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.TargetItem> targets_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.TargetItem>();
    /// <summary>
    ///Массив прогнозов
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.TargetItem> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "consensus" field.</summary>
    public const int ConsensusFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.ConsensusItem consensus_;
    /// <summary>
    /// Согласованный прогноз
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.ConsensusItem Consensus {
      get { return consensus_; }
      set {
        consensus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetForecastResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetForecastResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!targets_.Equals(other.targets_)) return false;
      if (!object.Equals(Consensus, other.Consensus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= targets_.GetHashCode();
      if (consensus_ != null) hash ^= Consensus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      targets_.WriteTo(output, _repeated_targets_codec);
      if (consensus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Consensus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      targets_.WriteTo(ref output, _repeated_targets_codec);
      if (consensus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Consensus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (consensus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Consensus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetForecastResponse other) {
      if (other == null) {
        return;
      }
      targets_.Add(other.targets_);
      if (other.consensus_ != null) {
        if (consensus_ == null) {
          Consensus = new global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.ConsensusItem();
        }
        Consensus.MergeFrom(other.Consensus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 18: {
            if (consensus_ == null) {
              Consensus = new global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.ConsensusItem();
            }
            input.ReadMessage(Consensus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            targets_.AddEntriesFrom(ref input, _repeated_targets_codec);
            break;
          }
          case 18: {
            if (consensus_ == null) {
              Consensus = new global::Tinkoff.InvestApi.V1.GetForecastResponse.Types.ConsensusItem();
            }
            input.ReadMessage(Consensus);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GetForecastResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///Прогноз
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class TargetItem : pb::IMessage<TargetItem>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TargetItem> _parser = new pb::MessageParser<TargetItem>(() => new TargetItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TargetItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tinkoff.InvestApi.V1.GetForecastResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TargetItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TargetItem(TargetItem other) : this() {
          uid_ = other.uid_;
          ticker_ = other.ticker_;
          company_ = other.company_;
          recommendation_ = other.recommendation_;
          recommendationDate_ = other.recommendationDate_ != null ? other.recommendationDate_.Clone() : null;
          currency_ = other.currency_;
          currentPrice_ = other.currentPrice_ != null ? other.currentPrice_.Clone() : null;
          targetPrice_ = other.targetPrice_ != null ? other.targetPrice_.Clone() : null;
          priceChange_ = other.priceChange_ != null ? other.priceChange_.Clone() : null;
          priceChangeRel_ = other.priceChangeRel_ != null ? other.priceChangeRel_.Clone() : null;
          showName_ = other.showName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TargetItem Clone() {
          return new TargetItem(this);
        }

        /// <summary>Field number for the "uid" field.</summary>
        public const int UidFieldNumber = 1;
        private string uid_ = "";
        /// <summary>
        /// Уникальный идентификатор инструмента
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Uid {
          get { return uid_; }
          set {
            uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 2;
        private string ticker_ = "";
        /// <summary>
        /// Тикер инструмента
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Ticker {
          get { return ticker_; }
          set {
            ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "company" field.</summary>
        public const int CompanyFieldNumber = 3;
        private string company_ = "";
        /// <summary>
        /// Название компании, давшей прогноз
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Company {
          get { return company_; }
          set {
            company_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "recommendation" field.</summary>
        public const int RecommendationFieldNumber = 4;
        private global::Tinkoff.InvestApi.V1.Recommendation recommendation_ = global::Tinkoff.InvestApi.V1.Recommendation.Unspecified;
        /// <summary>
        /// Прогноз
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Recommendation Recommendation {
          get { return recommendation_; }
          set {
            recommendation_ = value;
          }
        }

        /// <summary>Field number for the "recommendation_date" field.</summary>
        public const int RecommendationDateFieldNumber = 5;
        private global::Google.Protobuf.WellKnownTypes.Timestamp recommendationDate_;
        /// <summary>
        ///Дата прогноза
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp RecommendationDate {
          get { return recommendationDate_; }
          set {
            recommendationDate_ = value;
          }
        }

        /// <summary>Field number for the "currency" field.</summary>
        public const int CurrencyFieldNumber = 6;
        private string currency_ = "";
        /// <summary>
        /// Валюта
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Currency {
          get { return currency_; }
          set {
            currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "current_price" field.</summary>
        public const int CurrentPriceFieldNumber = 7;
        private global::Tinkoff.InvestApi.V1.Quotation currentPrice_;
        /// <summary>
        /// Текущая цена
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation CurrentPrice {
          get { return currentPrice_; }
          set {
            currentPrice_ = value;
          }
        }

        /// <summary>Field number for the "target_price" field.</summary>
        public const int TargetPriceFieldNumber = 8;
        private global::Tinkoff.InvestApi.V1.Quotation targetPrice_;
        /// <summary>
        /// Прогнозируемая цена
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation TargetPrice {
          get { return targetPrice_; }
          set {
            targetPrice_ = value;
          }
        }

        /// <summary>Field number for the "price_change" field.</summary>
        public const int PriceChangeFieldNumber = 9;
        private global::Tinkoff.InvestApi.V1.Quotation priceChange_;
        /// <summary>
        /// Изменение цены
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation PriceChange {
          get { return priceChange_; }
          set {
            priceChange_ = value;
          }
        }

        /// <summary>Field number for the "price_change_rel" field.</summary>
        public const int PriceChangeRelFieldNumber = 10;
        private global::Tinkoff.InvestApi.V1.Quotation priceChangeRel_;
        /// <summary>
        /// Относительное изменение цены
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation PriceChangeRel {
          get { return priceChangeRel_; }
          set {
            priceChangeRel_ = value;
          }
        }

        /// <summary>Field number for the "show_name" field.</summary>
        public const int ShowNameFieldNumber = 11;
        private string showName_ = "";
        /// <summary>
        /// Наименование инструмента
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ShowName {
          get { return showName_; }
          set {
            showName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as TargetItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TargetItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uid != other.Uid) return false;
          if (Ticker != other.Ticker) return false;
          if (Company != other.Company) return false;
          if (Recommendation != other.Recommendation) return false;
          if (!object.Equals(RecommendationDate, other.RecommendationDate)) return false;
          if (Currency != other.Currency) return false;
          if (!object.Equals(CurrentPrice, other.CurrentPrice)) return false;
          if (!object.Equals(TargetPrice, other.TargetPrice)) return false;
          if (!object.Equals(PriceChange, other.PriceChange)) return false;
          if (!object.Equals(PriceChangeRel, other.PriceChangeRel)) return false;
          if (ShowName != other.ShowName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Uid.Length != 0) hash ^= Uid.GetHashCode();
          if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
          if (Company.Length != 0) hash ^= Company.GetHashCode();
          if (Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) hash ^= Recommendation.GetHashCode();
          if (recommendationDate_ != null) hash ^= RecommendationDate.GetHashCode();
          if (Currency.Length != 0) hash ^= Currency.GetHashCode();
          if (currentPrice_ != null) hash ^= CurrentPrice.GetHashCode();
          if (targetPrice_ != null) hash ^= TargetPrice.GetHashCode();
          if (priceChange_ != null) hash ^= PriceChange.GetHashCode();
          if (priceChangeRel_ != null) hash ^= PriceChangeRel.GetHashCode();
          if (ShowName.Length != 0) hash ^= ShowName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Uid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Uid);
          }
          if (Ticker.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ticker);
          }
          if (Company.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Company);
          }
          if (Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Recommendation);
          }
          if (recommendationDate_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(RecommendationDate);
          }
          if (Currency.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Currency);
          }
          if (currentPrice_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(CurrentPrice);
          }
          if (targetPrice_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(TargetPrice);
          }
          if (priceChange_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(PriceChange);
          }
          if (priceChangeRel_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(PriceChangeRel);
          }
          if (ShowName.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ShowName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Uid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Uid);
          }
          if (Ticker.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ticker);
          }
          if (Company.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Company);
          }
          if (Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Recommendation);
          }
          if (recommendationDate_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(RecommendationDate);
          }
          if (Currency.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Currency);
          }
          if (currentPrice_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(CurrentPrice);
          }
          if (targetPrice_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(TargetPrice);
          }
          if (priceChange_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(PriceChange);
          }
          if (priceChangeRel_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(PriceChangeRel);
          }
          if (ShowName.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ShowName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Uid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
          }
          if (Ticker.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
          }
          if (Company.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Company);
          }
          if (Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Recommendation);
          }
          if (recommendationDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecommendationDate);
          }
          if (Currency.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
          }
          if (currentPrice_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentPrice);
          }
          if (targetPrice_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPrice);
          }
          if (priceChange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceChange);
          }
          if (priceChangeRel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceChangeRel);
          }
          if (ShowName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TargetItem other) {
          if (other == null) {
            return;
          }
          if (other.Uid.Length != 0) {
            Uid = other.Uid;
          }
          if (other.Ticker.Length != 0) {
            Ticker = other.Ticker;
          }
          if (other.Company.Length != 0) {
            Company = other.Company;
          }
          if (other.Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            Recommendation = other.Recommendation;
          }
          if (other.recommendationDate_ != null) {
            if (recommendationDate_ == null) {
              RecommendationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            RecommendationDate.MergeFrom(other.RecommendationDate);
          }
          if (other.Currency.Length != 0) {
            Currency = other.Currency;
          }
          if (other.currentPrice_ != null) {
            if (currentPrice_ == null) {
              CurrentPrice = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            CurrentPrice.MergeFrom(other.CurrentPrice);
          }
          if (other.targetPrice_ != null) {
            if (targetPrice_ == null) {
              TargetPrice = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            TargetPrice.MergeFrom(other.TargetPrice);
          }
          if (other.priceChange_ != null) {
            if (priceChange_ == null) {
              PriceChange = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            PriceChange.MergeFrom(other.PriceChange);
          }
          if (other.priceChangeRel_ != null) {
            if (priceChangeRel_ == null) {
              PriceChangeRel = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            PriceChangeRel.MergeFrom(other.PriceChangeRel);
          }
          if (other.ShowName.Length != 0) {
            ShowName = other.ShowName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Uid = input.ReadString();
                break;
              }
              case 18: {
                Ticker = input.ReadString();
                break;
              }
              case 26: {
                Company = input.ReadString();
                break;
              }
              case 32: {
                Recommendation = (global::Tinkoff.InvestApi.V1.Recommendation) input.ReadEnum();
                break;
              }
              case 42: {
                if (recommendationDate_ == null) {
                  RecommendationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(RecommendationDate);
                break;
              }
              case 50: {
                Currency = input.ReadString();
                break;
              }
              case 58: {
                if (currentPrice_ == null) {
                  CurrentPrice = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(CurrentPrice);
                break;
              }
              case 66: {
                if (targetPrice_ == null) {
                  TargetPrice = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(TargetPrice);
                break;
              }
              case 74: {
                if (priceChange_ == null) {
                  PriceChange = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(PriceChange);
                break;
              }
              case 82: {
                if (priceChangeRel_ == null) {
                  PriceChangeRel = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(PriceChangeRel);
                break;
              }
              case 90: {
                ShowName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Uid = input.ReadString();
                break;
              }
              case 18: {
                Ticker = input.ReadString();
                break;
              }
              case 26: {
                Company = input.ReadString();
                break;
              }
              case 32: {
                Recommendation = (global::Tinkoff.InvestApi.V1.Recommendation) input.ReadEnum();
                break;
              }
              case 42: {
                if (recommendationDate_ == null) {
                  RecommendationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(RecommendationDate);
                break;
              }
              case 50: {
                Currency = input.ReadString();
                break;
              }
              case 58: {
                if (currentPrice_ == null) {
                  CurrentPrice = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(CurrentPrice);
                break;
              }
              case 66: {
                if (targetPrice_ == null) {
                  TargetPrice = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(TargetPrice);
                break;
              }
              case 74: {
                if (priceChange_ == null) {
                  PriceChange = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(PriceChange);
                break;
              }
              case 82: {
                if (priceChangeRel_ == null) {
                  PriceChangeRel = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(PriceChangeRel);
                break;
              }
              case 90: {
                ShowName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///Консенсус-прогноз
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class ConsensusItem : pb::IMessage<ConsensusItem>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ConsensusItem> _parser = new pb::MessageParser<ConsensusItem>(() => new ConsensusItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ConsensusItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tinkoff.InvestApi.V1.GetForecastResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConsensusItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConsensusItem(ConsensusItem other) : this() {
          uid_ = other.uid_;
          ticker_ = other.ticker_;
          recommendation_ = other.recommendation_;
          currency_ = other.currency_;
          currentPrice_ = other.currentPrice_ != null ? other.currentPrice_.Clone() : null;
          consensus_ = other.consensus_ != null ? other.consensus_.Clone() : null;
          minTarget_ = other.minTarget_ != null ? other.minTarget_.Clone() : null;
          maxTarget_ = other.maxTarget_ != null ? other.maxTarget_.Clone() : null;
          priceChange_ = other.priceChange_ != null ? other.priceChange_.Clone() : null;
          priceChangeRel_ = other.priceChangeRel_ != null ? other.priceChangeRel_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConsensusItem Clone() {
          return new ConsensusItem(this);
        }

        /// <summary>Field number for the "uid" field.</summary>
        public const int UidFieldNumber = 1;
        private string uid_ = "";
        /// <summary>
        /// Уникальный идентификатор инструмента
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Uid {
          get { return uid_; }
          set {
            uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 2;
        private string ticker_ = "";
        /// <summary>
        /// Тикер инструмента
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Ticker {
          get { return ticker_; }
          set {
            ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "recommendation" field.</summary>
        public const int RecommendationFieldNumber = 3;
        private global::Tinkoff.InvestApi.V1.Recommendation recommendation_ = global::Tinkoff.InvestApi.V1.Recommendation.Unspecified;
        /// <summary>
        /// Прогноз
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Recommendation Recommendation {
          get { return recommendation_; }
          set {
            recommendation_ = value;
          }
        }

        /// <summary>Field number for the "currency" field.</summary>
        public const int CurrencyFieldNumber = 4;
        private string currency_ = "";
        /// <summary>
        /// Валюта
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Currency {
          get { return currency_; }
          set {
            currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "current_price" field.</summary>
        public const int CurrentPriceFieldNumber = 5;
        private global::Tinkoff.InvestApi.V1.Quotation currentPrice_;
        /// <summary>
        /// Текущая цена
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation CurrentPrice {
          get { return currentPrice_; }
          set {
            currentPrice_ = value;
          }
        }

        /// <summary>Field number for the "consensus" field.</summary>
        public const int ConsensusFieldNumber = 6;
        private global::Tinkoff.InvestApi.V1.Quotation consensus_;
        /// <summary>
        /// Прогнозируемая цена
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation Consensus {
          get { return consensus_; }
          set {
            consensus_ = value;
          }
        }

        /// <summary>Field number for the "min_target" field.</summary>
        public const int MinTargetFieldNumber = 7;
        private global::Tinkoff.InvestApi.V1.Quotation minTarget_;
        /// <summary>
        /// Минимальная цена прогноза
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation MinTarget {
          get { return minTarget_; }
          set {
            minTarget_ = value;
          }
        }

        /// <summary>Field number for the "max_target" field.</summary>
        public const int MaxTargetFieldNumber = 8;
        private global::Tinkoff.InvestApi.V1.Quotation maxTarget_;
        /// <summary>
        /// Максимальная цена прогноза
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation MaxTarget {
          get { return maxTarget_; }
          set {
            maxTarget_ = value;
          }
        }

        /// <summary>Field number for the "price_change" field.</summary>
        public const int PriceChangeFieldNumber = 9;
        private global::Tinkoff.InvestApi.V1.Quotation priceChange_;
        /// <summary>
        /// Изменение цены
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation PriceChange {
          get { return priceChange_; }
          set {
            priceChange_ = value;
          }
        }

        /// <summary>Field number for the "price_change_rel" field.</summary>
        public const int PriceChangeRelFieldNumber = 10;
        private global::Tinkoff.InvestApi.V1.Quotation priceChangeRel_;
        /// <summary>
        /// Относительное изменение цены
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Tinkoff.InvestApi.V1.Quotation PriceChangeRel {
          get { return priceChangeRel_; }
          set {
            priceChangeRel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ConsensusItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ConsensusItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uid != other.Uid) return false;
          if (Ticker != other.Ticker) return false;
          if (Recommendation != other.Recommendation) return false;
          if (Currency != other.Currency) return false;
          if (!object.Equals(CurrentPrice, other.CurrentPrice)) return false;
          if (!object.Equals(Consensus, other.Consensus)) return false;
          if (!object.Equals(MinTarget, other.MinTarget)) return false;
          if (!object.Equals(MaxTarget, other.MaxTarget)) return false;
          if (!object.Equals(PriceChange, other.PriceChange)) return false;
          if (!object.Equals(PriceChangeRel, other.PriceChangeRel)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Uid.Length != 0) hash ^= Uid.GetHashCode();
          if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
          if (Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) hash ^= Recommendation.GetHashCode();
          if (Currency.Length != 0) hash ^= Currency.GetHashCode();
          if (currentPrice_ != null) hash ^= CurrentPrice.GetHashCode();
          if (consensus_ != null) hash ^= Consensus.GetHashCode();
          if (minTarget_ != null) hash ^= MinTarget.GetHashCode();
          if (maxTarget_ != null) hash ^= MaxTarget.GetHashCode();
          if (priceChange_ != null) hash ^= PriceChange.GetHashCode();
          if (priceChangeRel_ != null) hash ^= PriceChangeRel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Uid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Uid);
          }
          if (Ticker.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ticker);
          }
          if (Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Recommendation);
          }
          if (Currency.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Currency);
          }
          if (currentPrice_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(CurrentPrice);
          }
          if (consensus_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Consensus);
          }
          if (minTarget_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(MinTarget);
          }
          if (maxTarget_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(MaxTarget);
          }
          if (priceChange_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(PriceChange);
          }
          if (priceChangeRel_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(PriceChangeRel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Uid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Uid);
          }
          if (Ticker.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ticker);
          }
          if (Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Recommendation);
          }
          if (Currency.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Currency);
          }
          if (currentPrice_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(CurrentPrice);
          }
          if (consensus_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Consensus);
          }
          if (minTarget_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(MinTarget);
          }
          if (maxTarget_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(MaxTarget);
          }
          if (priceChange_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(PriceChange);
          }
          if (priceChangeRel_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(PriceChangeRel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Uid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
          }
          if (Ticker.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
          }
          if (Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Recommendation);
          }
          if (Currency.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
          }
          if (currentPrice_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentPrice);
          }
          if (consensus_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Consensus);
          }
          if (minTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinTarget);
          }
          if (maxTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxTarget);
          }
          if (priceChange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceChange);
          }
          if (priceChangeRel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceChangeRel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ConsensusItem other) {
          if (other == null) {
            return;
          }
          if (other.Uid.Length != 0) {
            Uid = other.Uid;
          }
          if (other.Ticker.Length != 0) {
            Ticker = other.Ticker;
          }
          if (other.Recommendation != global::Tinkoff.InvestApi.V1.Recommendation.Unspecified) {
            Recommendation = other.Recommendation;
          }
          if (other.Currency.Length != 0) {
            Currency = other.Currency;
          }
          if (other.currentPrice_ != null) {
            if (currentPrice_ == null) {
              CurrentPrice = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            CurrentPrice.MergeFrom(other.CurrentPrice);
          }
          if (other.consensus_ != null) {
            if (consensus_ == null) {
              Consensus = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            Consensus.MergeFrom(other.Consensus);
          }
          if (other.minTarget_ != null) {
            if (minTarget_ == null) {
              MinTarget = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            MinTarget.MergeFrom(other.MinTarget);
          }
          if (other.maxTarget_ != null) {
            if (maxTarget_ == null) {
              MaxTarget = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            MaxTarget.MergeFrom(other.MaxTarget);
          }
          if (other.priceChange_ != null) {
            if (priceChange_ == null) {
              PriceChange = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            PriceChange.MergeFrom(other.PriceChange);
          }
          if (other.priceChangeRel_ != null) {
            if (priceChangeRel_ == null) {
              PriceChangeRel = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            PriceChangeRel.MergeFrom(other.PriceChangeRel);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Uid = input.ReadString();
                break;
              }
              case 18: {
                Ticker = input.ReadString();
                break;
              }
              case 24: {
                Recommendation = (global::Tinkoff.InvestApi.V1.Recommendation) input.ReadEnum();
                break;
              }
              case 34: {
                Currency = input.ReadString();
                break;
              }
              case 42: {
                if (currentPrice_ == null) {
                  CurrentPrice = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(CurrentPrice);
                break;
              }
              case 50: {
                if (consensus_ == null) {
                  Consensus = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(Consensus);
                break;
              }
              case 58: {
                if (minTarget_ == null) {
                  MinTarget = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(MinTarget);
                break;
              }
              case 66: {
                if (maxTarget_ == null) {
                  MaxTarget = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(MaxTarget);
                break;
              }
              case 74: {
                if (priceChange_ == null) {
                  PriceChange = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(PriceChange);
                break;
              }
              case 82: {
                if (priceChangeRel_ == null) {
                  PriceChangeRel = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(PriceChangeRel);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Uid = input.ReadString();
                break;
              }
              case 18: {
                Ticker = input.ReadString();
                break;
              }
              case 24: {
                Recommendation = (global::Tinkoff.InvestApi.V1.Recommendation) input.ReadEnum();
                break;
              }
              case 34: {
                Currency = input.ReadString();
                break;
              }
              case 42: {
                if (currentPrice_ == null) {
                  CurrentPrice = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(CurrentPrice);
                break;
              }
              case 50: {
                if (consensus_ == null) {
                  Consensus = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(Consensus);
                break;
              }
              case 58: {
                if (minTarget_ == null) {
                  MinTarget = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(MinTarget);
                break;
              }
              case 66: {
                if (maxTarget_ == null) {
                  MaxTarget = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(MaxTarget);
                break;
              }
              case 74: {
                if (priceChange_ == null) {
                  PriceChange = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(PriceChange);
                break;
              }
              case 82: {
                if (priceChangeRel_ == null) {
                  PriceChangeRel = new global::Tinkoff.InvestApi.V1.Quotation();
                }
                input.ReadMessage(PriceChangeRel);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingInterval : pb::IMessage<TradingInterval>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingInterval> _parser = new pb::MessageParser<TradingInterval>(() => new TradingInterval());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingInterval> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingInterval() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingInterval(TradingInterval other) : this() {
      type_ = other.type_;
      interval_ = other.interval_ != null ? other.interval_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingInterval Clone() {
      return new TradingInterval(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    ///Название интервала
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.TradingInterval.Types.TimeInterval interval_;
    /// <summary>
    ///Интервал
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.TradingInterval.Types.TimeInterval Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingInterval);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingInterval other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingInterval other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          Interval = new global::Tinkoff.InvestApi.V1.TradingInterval.Types.TimeInterval();
        }
        Interval.MergeFrom(other.Interval);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            if (interval_ == null) {
              Interval = new global::Tinkoff.InvestApi.V1.TradingInterval.Types.TimeInterval();
            }
            input.ReadMessage(Interval);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            if (interval_ == null) {
              Interval = new global::Tinkoff.InvestApi.V1.TradingInterval.Types.TimeInterval();
            }
            input.ReadMessage(Interval);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TradingInterval message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class TimeInterval : pb::IMessage<TimeInterval>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TimeInterval> _parser = new pb::MessageParser<TimeInterval>(() => new TimeInterval());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TimeInterval> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tinkoff.InvestApi.V1.TradingInterval.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TimeInterval() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TimeInterval(TimeInterval other) : this() {
          startTs_ = other.startTs_ != null ? other.startTs_.Clone() : null;
          endTs_ = other.endTs_ != null ? other.endTs_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TimeInterval Clone() {
          return new TimeInterval(this);
        }

        /// <summary>Field number for the "start_ts" field.</summary>
        public const int StartTsFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp startTs_;
        /// <summary>
        /// Время начала интервала
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp StartTs {
          get { return startTs_; }
          set {
            startTs_ = value;
          }
        }

        /// <summary>Field number for the "end_ts" field.</summary>
        public const int EndTsFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Timestamp endTs_;
        /// <summary>
        /// Время окончания интервала
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp EndTs {
          get { return endTs_; }
          set {
            endTs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as TimeInterval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TimeInterval other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(StartTs, other.StartTs)) return false;
          if (!object.Equals(EndTs, other.EndTs)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (startTs_ != null) hash ^= StartTs.GetHashCode();
          if (endTs_ != null) hash ^= EndTs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (startTs_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StartTs);
          }
          if (endTs_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EndTs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (startTs_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StartTs);
          }
          if (endTs_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EndTs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (startTs_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTs);
          }
          if (endTs_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TimeInterval other) {
          if (other == null) {
            return;
          }
          if (other.startTs_ != null) {
            if (startTs_ == null) {
              StartTs = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            StartTs.MergeFrom(other.StartTs);
          }
          if (other.endTs_ != null) {
            if (endTs_ == null) {
              EndTs = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            EndTs.MergeFrom(other.EndTs);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (startTs_ == null) {
                  StartTs = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(StartTs);
                break;
              }
              case 18: {
                if (endTs_ == null) {
                  EndTs = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(EndTs);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (startTs_ == null) {
                  StartTs = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(StartTs);
                break;
              }
              case 18: {
                if (endTs_ == null) {
                  EndTs = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(EndTs);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
