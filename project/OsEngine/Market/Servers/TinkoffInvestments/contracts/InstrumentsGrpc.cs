// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instruments.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tinkoff.InvestApi.V1 {
  /// <summary>
  ///Сервис предназначен для получения:&lt;/br>**1**. информации об инструментах;&lt;/br>**2**.
  ///расписания торговых сессий;&lt;/br>**3**. календаря выплат купонов по облигациям;&lt;/br>**4**.
  ///размера гарантийного обеспечения по фьючерсам;&lt;/br>**5**. дивидендов по ценной бумаге.
  /// </summary>
  public static partial class InstrumentsService
  {
    static readonly string __ServiceName = "tinkoff.public.invest.api.contract.v1.InstrumentsService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.TradingSchedulesRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_TradingSchedulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.TradingSchedulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_TradingSchedulesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.TradingSchedulesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.InstrumentRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.InstrumentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.BondResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_BondResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.BondResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.InstrumentsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.InstrumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.BondsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_BondsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.BondsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetBondCouponsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetBondCouponsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetBondCouponsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetBondCouponsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetBondCouponsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetBondCouponsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetBondEventsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetBondEventsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetBondEventsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetBondEventsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetBondEventsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetBondEventsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.CurrencyResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_CurrencyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.CurrencyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.CurrenciesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_CurrenciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.CurrenciesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.EtfResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_EtfResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.EtfResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.EtfsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_EtfsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.EtfsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.FutureResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_FutureResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.FutureResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.FuturesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_FuturesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.FuturesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.OptionResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_OptionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.OptionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.OptionsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_OptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.OptionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.FilterOptionsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_FilterOptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.FilterOptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.ShareResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_ShareResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.ShareResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.SharesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_SharesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.SharesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.IndicativesRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_IndicativesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.IndicativesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.IndicativesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_IndicativesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.IndicativesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetAccruedInterestsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetAccruedInterestsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetFuturesMarginRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetFuturesMarginResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.InstrumentResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.InstrumentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetDividendsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetDividendsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetDividendsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetDividendsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.AssetRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_AssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.AssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.AssetResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_AssetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.AssetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.AssetsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_AssetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.AssetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.AssetsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_AssetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.AssetsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetFavoritesRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetFavoritesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetFavoritesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetFavoritesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetFavoritesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetFavoritesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.EditFavoritesRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_EditFavoritesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.EditFavoritesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.EditFavoritesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_EditFavoritesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.EditFavoritesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetCountriesRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetCountriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetCountriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetCountriesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetCountriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetCountriesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.FindInstrumentRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_FindInstrumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.FindInstrumentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.FindInstrumentResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_FindInstrumentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.FindInstrumentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetBrandsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetBrandsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetBrandsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetBrandsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetBrandsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetBrandsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetBrandRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetBrandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetBrandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.Brand> __Marshaller_tinkoff_public_invest_api_contract_v1_Brand = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.Brand.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetAssetFundamentalsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetAssetFundamentalsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetAssetReportsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetAssetReportsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetAssetReportsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetAssetReportsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetAssetReportsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetAssetReportsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetConsensusForecastsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetConsensusForecastsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetForecastRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetForecastRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetForecastRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetForecastResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetForecastResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetForecastResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.TradingSchedulesRequest, global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> __Method_TradingSchedules = new grpc::Method<global::Tinkoff.InvestApi.V1.TradingSchedulesRequest, global::Tinkoff.InvestApi.V1.TradingSchedulesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TradingSchedules",
        __Marshaller_tinkoff_public_invest_api_contract_v1_TradingSchedulesRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_TradingSchedulesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.BondResponse> __Method_BondBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.BondResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BondBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_BondResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.BondsResponse> __Method_Bonds = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.BondsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Bonds",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_BondsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetBondCouponsRequest, global::Tinkoff.InvestApi.V1.GetBondCouponsResponse> __Method_GetBondCoupons = new grpc::Method<global::Tinkoff.InvestApi.V1.GetBondCouponsRequest, global::Tinkoff.InvestApi.V1.GetBondCouponsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBondCoupons",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetBondCouponsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetBondCouponsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetBondEventsRequest, global::Tinkoff.InvestApi.V1.GetBondEventsResponse> __Method_GetBondEvents = new grpc::Method<global::Tinkoff.InvestApi.V1.GetBondEventsRequest, global::Tinkoff.InvestApi.V1.GetBondEventsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBondEvents",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetBondEventsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetBondEventsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.CurrencyResponse> __Method_CurrencyBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.CurrencyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CurrencyBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_CurrencyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.CurrenciesResponse> __Method_Currencies = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.CurrenciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Currencies",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_CurrenciesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.EtfResponse> __Method_EtfBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.EtfResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EtfBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_EtfResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.EtfsResponse> __Method_Etfs = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.EtfsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Etfs",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_EtfsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.FutureResponse> __Method_FutureBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.FutureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FutureBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_FutureResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.FuturesResponse> __Method_Futures = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.FuturesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Futures",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_FuturesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.OptionResponse> __Method_OptionBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.OptionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OptionBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_OptionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.OptionsResponse> __Method_Options = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.OptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Options",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_OptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.FilterOptionsRequest, global::Tinkoff.InvestApi.V1.OptionsResponse> __Method_OptionsBy = new grpc::Method<global::Tinkoff.InvestApi.V1.FilterOptionsRequest, global::Tinkoff.InvestApi.V1.OptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OptionsBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_FilterOptionsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_OptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.ShareResponse> __Method_ShareBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.ShareResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ShareBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_ShareResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.SharesResponse> __Method_Shares = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.SharesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Shares",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_SharesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.IndicativesRequest, global::Tinkoff.InvestApi.V1.IndicativesResponse> __Method_Indicatives = new grpc::Method<global::Tinkoff.InvestApi.V1.IndicativesRequest, global::Tinkoff.InvestApi.V1.IndicativesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Indicatives",
        __Marshaller_tinkoff_public_invest_api_contract_v1_IndicativesRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_IndicativesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest, global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> __Method_GetAccruedInterests = new grpc::Method<global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest, global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccruedInterests",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetAccruedInterestsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetAccruedInterestsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest, global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> __Method_GetFuturesMargin = new grpc::Method<global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest, global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFuturesMargin",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetFuturesMarginRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetFuturesMarginResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.InstrumentResponse> __Method_GetInstrumentBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.InstrumentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInstrumentBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetDividendsRequest, global::Tinkoff.InvestApi.V1.GetDividendsResponse> __Method_GetDividends = new grpc::Method<global::Tinkoff.InvestApi.V1.GetDividendsRequest, global::Tinkoff.InvestApi.V1.GetDividendsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDividends",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.AssetRequest, global::Tinkoff.InvestApi.V1.AssetResponse> __Method_GetAssetBy = new grpc::Method<global::Tinkoff.InvestApi.V1.AssetRequest, global::Tinkoff.InvestApi.V1.AssetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_AssetRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_AssetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.AssetsRequest, global::Tinkoff.InvestApi.V1.AssetsResponse> __Method_GetAssets = new grpc::Method<global::Tinkoff.InvestApi.V1.AssetsRequest, global::Tinkoff.InvestApi.V1.AssetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssets",
        __Marshaller_tinkoff_public_invest_api_contract_v1_AssetsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_AssetsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetFavoritesRequest, global::Tinkoff.InvestApi.V1.GetFavoritesResponse> __Method_GetFavorites = new grpc::Method<global::Tinkoff.InvestApi.V1.GetFavoritesRequest, global::Tinkoff.InvestApi.V1.GetFavoritesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFavorites",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetFavoritesRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetFavoritesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.EditFavoritesRequest, global::Tinkoff.InvestApi.V1.EditFavoritesResponse> __Method_EditFavorites = new grpc::Method<global::Tinkoff.InvestApi.V1.EditFavoritesRequest, global::Tinkoff.InvestApi.V1.EditFavoritesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditFavorites",
        __Marshaller_tinkoff_public_invest_api_contract_v1_EditFavoritesRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_EditFavoritesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetCountriesRequest, global::Tinkoff.InvestApi.V1.GetCountriesResponse> __Method_GetCountries = new grpc::Method<global::Tinkoff.InvestApi.V1.GetCountriesRequest, global::Tinkoff.InvestApi.V1.GetCountriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCountries",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetCountriesRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetCountriesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.FindInstrumentRequest, global::Tinkoff.InvestApi.V1.FindInstrumentResponse> __Method_FindInstrument = new grpc::Method<global::Tinkoff.InvestApi.V1.FindInstrumentRequest, global::Tinkoff.InvestApi.V1.FindInstrumentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindInstrument",
        __Marshaller_tinkoff_public_invest_api_contract_v1_FindInstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_FindInstrumentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetBrandsRequest, global::Tinkoff.InvestApi.V1.GetBrandsResponse> __Method_GetBrands = new grpc::Method<global::Tinkoff.InvestApi.V1.GetBrandsRequest, global::Tinkoff.InvestApi.V1.GetBrandsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBrands",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetBrandsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetBrandsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetBrandRequest, global::Tinkoff.InvestApi.V1.Brand> __Method_GetBrandBy = new grpc::Method<global::Tinkoff.InvestApi.V1.GetBrandRequest, global::Tinkoff.InvestApi.V1.Brand>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBrandBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetBrandRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_Brand);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest, global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse> __Method_GetAssetFundamentals = new grpc::Method<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest, global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetFundamentals",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetAssetFundamentalsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetAssetFundamentalsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetAssetReportsRequest, global::Tinkoff.InvestApi.V1.GetAssetReportsResponse> __Method_GetAssetReports = new grpc::Method<global::Tinkoff.InvestApi.V1.GetAssetReportsRequest, global::Tinkoff.InvestApi.V1.GetAssetReportsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetReports",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetAssetReportsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetAssetReportsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest, global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse> __Method_GetConsensusForecasts = new grpc::Method<global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest, global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConsensusForecasts",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetConsensusForecastsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetConsensusForecastsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetForecastRequest, global::Tinkoff.InvestApi.V1.GetForecastResponse> __Method_GetForecastBy = new grpc::Method<global::Tinkoff.InvestApi.V1.GetForecastRequest, global::Tinkoff.InvestApi.V1.GetForecastResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetForecastBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetForecastRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetForecastResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of InstrumentsService</summary>
    [grpc::BindServiceMethod(typeof(InstrumentsService), "BindService")]
    public abstract partial class InstrumentsServiceBase
    {
      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> TradingSchedules(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.BondResponse> BondBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.BondsResponse> Bonds(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения графика выплат купонов по облигации.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetBondCouponsResponse> GetBondCoupons(global::Tinkoff.InvestApi.V1.GetBondCouponsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения событий по облигации
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetBondEventsResponse> GetBondEvents(global::Tinkoff.InvestApi.V1.GetBondEventsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.CurrencyResponse> CurrencyBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.CurrenciesResponse> Currencies(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.EtfResponse> EtfBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.EtfsResponse> Etfs(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.FutureResponse> FutureBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.FuturesResponse> Futures(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения опциона по его идентификатору.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.OptionResponse> OptionBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Deprecated Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.OptionsResponse> Options(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.OptionsResponse> OptionsBy(global::Tinkoff.InvestApi.V1.FilterOptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.ShareResponse> ShareBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.SharesResponse> Shares(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения индикативных инструментов (индексов, товаров и др.)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.IndicativesResponse> Indicatives(global::Tinkoff.InvestApi.V1.IndicativesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> GetAccruedInterests(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> GetFuturesMargin(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.InstrumentResponse> GetInstrumentBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetDividendsResponse> GetDividends(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения актива по его идентификатору.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.AssetResponse> GetAssetBy(global::Tinkoff.InvestApi.V1.AssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка активов. Метод работает для всех инструментов, за исключением срочных - опционов и фьючерсов.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.AssetsResponse> GetAssets(global::Tinkoff.InvestApi.V1.AssetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetFavoritesResponse> GetFavorites(global::Tinkoff.InvestApi.V1.GetFavoritesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод редактирования списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.EditFavoritesResponse> EditFavorites(global::Tinkoff.InvestApi.V1.EditFavoritesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка стран.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetCountriesResponse> GetCountries(global::Tinkoff.InvestApi.V1.GetCountriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод поиска инструмента.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.FindInstrumentResponse> FindInstrument(global::Tinkoff.InvestApi.V1.FindInstrumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка брендов.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetBrandsResponse> GetBrands(global::Tinkoff.InvestApi.V1.GetBrandsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения бренда по его идентификатору.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.Brand> GetBrandBy(global::Tinkoff.InvestApi.V1.GetBrandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения фундаментальных показателей по активу
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse> GetAssetFundamentals(global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения расписания выхода отчетностей эмитентов
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetAssetReportsResponse> GetAssetReports(global::Tinkoff.InvestApi.V1.GetAssetReportsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения мнения аналитиков по инструменту
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse> GetConsensusForecasts(global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения прогнозов инвестдомов по инструменту
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetForecastResponse> GetForecastBy(global::Tinkoff.InvestApi.V1.GetForecastRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InstrumentsService</summary>
    public partial class InstrumentsServiceClient : grpc::ClientBase<InstrumentsServiceClient>
    {
      /// <summary>Creates a new client for InstrumentsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InstrumentsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InstrumentsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InstrumentsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InstrumentsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InstrumentsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.TradingSchedulesResponse TradingSchedules(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradingSchedules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.TradingSchedulesResponse TradingSchedules(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TradingSchedules, null, options, request);
      }
      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> TradingSchedulesAsync(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradingSchedulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> TradingSchedulesAsync(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TradingSchedules, null, options, request);
      }
      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BondResponse BondBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BondBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BondResponse BondBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BondBy, null, options, request);
      }
      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BondResponse> BondByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BondByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BondResponse> BondByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BondBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BondsResponse Bonds(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Bonds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BondsResponse Bonds(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Bonds, null, options, request);
      }
      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BondsResponse> BondsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BondsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BondsResponse> BondsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Bonds, null, options, request);
      }
      /// <summary>
      ///Метод получения графика выплат купонов по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetBondCouponsResponse GetBondCoupons(global::Tinkoff.InvestApi.V1.GetBondCouponsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBondCoupons(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения графика выплат купонов по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetBondCouponsResponse GetBondCoupons(global::Tinkoff.InvestApi.V1.GetBondCouponsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBondCoupons, null, options, request);
      }
      /// <summary>
      ///Метод получения графика выплат купонов по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetBondCouponsResponse> GetBondCouponsAsync(global::Tinkoff.InvestApi.V1.GetBondCouponsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBondCouponsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения графика выплат купонов по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetBondCouponsResponse> GetBondCouponsAsync(global::Tinkoff.InvestApi.V1.GetBondCouponsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBondCoupons, null, options, request);
      }
      /// <summary>
      ///Метод получения событий по облигации
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetBondEventsResponse GetBondEvents(global::Tinkoff.InvestApi.V1.GetBondEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBondEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения событий по облигации
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetBondEventsResponse GetBondEvents(global::Tinkoff.InvestApi.V1.GetBondEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBondEvents, null, options, request);
      }
      /// <summary>
      ///Метод получения событий по облигации
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetBondEventsResponse> GetBondEventsAsync(global::Tinkoff.InvestApi.V1.GetBondEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBondEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения событий по облигации
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetBondEventsResponse> GetBondEventsAsync(global::Tinkoff.InvestApi.V1.GetBondEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBondEvents, null, options, request);
      }
      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.CurrencyResponse CurrencyBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CurrencyBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.CurrencyResponse CurrencyBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CurrencyBy, null, options, request);
      }
      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.CurrencyResponse> CurrencyByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CurrencyByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.CurrencyResponse> CurrencyByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CurrencyBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.CurrenciesResponse Currencies(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Currencies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.CurrenciesResponse Currencies(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Currencies, null, options, request);
      }
      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.CurrenciesResponse> CurrenciesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CurrenciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.CurrenciesResponse> CurrenciesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Currencies, null, options, request);
      }
      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EtfResponse EtfBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EtfBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EtfResponse EtfBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EtfBy, null, options, request);
      }
      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EtfResponse> EtfByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EtfByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EtfResponse> EtfByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EtfBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EtfsResponse Etfs(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Etfs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EtfsResponse Etfs(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Etfs, null, options, request);
      }
      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EtfsResponse> EtfsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EtfsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EtfsResponse> EtfsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Etfs, null, options, request);
      }
      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FutureResponse FutureBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FutureBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FutureResponse FutureBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FutureBy, null, options, request);
      }
      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FutureResponse> FutureByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FutureByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FutureResponse> FutureByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FutureBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FuturesResponse Futures(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Futures(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FuturesResponse Futures(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Futures, null, options, request);
      }
      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FuturesResponse> FuturesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FuturesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FuturesResponse> FuturesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Futures, null, options, request);
      }
      /// <summary>
      ///Метод получения опциона по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.OptionResponse OptionBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения опциона по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.OptionResponse OptionBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OptionBy, null, options, request);
      }
      /// <summary>
      ///Метод получения опциона по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.OptionResponse> OptionByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения опциона по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.OptionResponse> OptionByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OptionBy, null, options, request);
      }
      /// <summary>
      ///Deprecated Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.OptionsResponse Options(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Options(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Deprecated Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.OptionsResponse Options(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Options, null, options, request);
      }
      /// <summary>
      ///Deprecated Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.OptionsResponse> OptionsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Deprecated Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.OptionsResponse> OptionsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Options, null, options, request);
      }
      /// <summary>
      ///Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.OptionsResponse OptionsBy(global::Tinkoff.InvestApi.V1.FilterOptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionsBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.OptionsResponse OptionsBy(global::Tinkoff.InvestApi.V1.FilterOptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OptionsBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.OptionsResponse> OptionsByAsync(global::Tinkoff.InvestApi.V1.FilterOptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionsByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка опционов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.OptionsResponse> OptionsByAsync(global::Tinkoff.InvestApi.V1.FilterOptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OptionsBy, null, options, request);
      }
      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.ShareResponse ShareBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShareBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.ShareResponse ShareBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ShareBy, null, options, request);
      }
      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.ShareResponse> ShareByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShareByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.ShareResponse> ShareByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ShareBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.SharesResponse Shares(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Shares(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.SharesResponse Shares(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Shares, null, options, request);
      }
      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.SharesResponse> SharesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SharesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.SharesResponse> SharesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Shares, null, options, request);
      }
      /// <summary>
      ///Метод получения индикативных инструментов (индексов, товаров и др.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.IndicativesResponse Indicatives(global::Tinkoff.InvestApi.V1.IndicativesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Indicatives(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения индикативных инструментов (индексов, товаров и др.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.IndicativesResponse Indicatives(global::Tinkoff.InvestApi.V1.IndicativesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Indicatives, null, options, request);
      }
      /// <summary>
      ///Метод получения индикативных инструментов (индексов, товаров и др.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.IndicativesResponse> IndicativesAsync(global::Tinkoff.InvestApi.V1.IndicativesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IndicativesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения индикативных инструментов (индексов, товаров и др.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.IndicativesResponse> IndicativesAsync(global::Tinkoff.InvestApi.V1.IndicativesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Indicatives, null, options, request);
      }
      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse GetAccruedInterests(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccruedInterests(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse GetAccruedInterests(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccruedInterests, null, options, request);
      }
      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> GetAccruedInterestsAsync(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccruedInterestsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> GetAccruedInterestsAsync(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccruedInterests, null, options, request);
      }
      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse GetFuturesMargin(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFuturesMargin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse GetFuturesMargin(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFuturesMargin, null, options, request);
      }
      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> GetFuturesMarginAsync(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFuturesMarginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> GetFuturesMarginAsync(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFuturesMargin, null, options, request);
      }
      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.InstrumentResponse GetInstrumentBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstrumentBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.InstrumentResponse GetInstrumentBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstrumentBy, null, options, request);
      }
      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.InstrumentResponse> GetInstrumentByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstrumentByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.InstrumentResponse> GetInstrumentByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstrumentBy, null, options, request);
      }
      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetDividendsResponse GetDividends(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDividends(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetDividendsResponse GetDividends(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDividends, null, options, request);
      }
      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetDividendsResponse> GetDividendsAsync(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDividendsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetDividendsResponse> GetDividendsAsync(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDividends, null, options, request);
      }
      /// <summary>
      ///Метод получения актива по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.AssetResponse GetAssetBy(global::Tinkoff.InvestApi.V1.AssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения актива по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.AssetResponse GetAssetBy(global::Tinkoff.InvestApi.V1.AssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetBy, null, options, request);
      }
      /// <summary>
      ///Метод получения актива по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.AssetResponse> GetAssetByAsync(global::Tinkoff.InvestApi.V1.AssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения актива по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.AssetResponse> GetAssetByAsync(global::Tinkoff.InvestApi.V1.AssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка активов. Метод работает для всех инструментов, за исключением срочных - опционов и фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.AssetsResponse GetAssets(global::Tinkoff.InvestApi.V1.AssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка активов. Метод работает для всех инструментов, за исключением срочных - опционов и фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.AssetsResponse GetAssets(global::Tinkoff.InvestApi.V1.AssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssets, null, options, request);
      }
      /// <summary>
      ///Метод получения списка активов. Метод работает для всех инструментов, за исключением срочных - опционов и фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.AssetsResponse> GetAssetsAsync(global::Tinkoff.InvestApi.V1.AssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка активов. Метод работает для всех инструментов, за исключением срочных - опционов и фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.AssetsResponse> GetAssetsAsync(global::Tinkoff.InvestApi.V1.AssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssets, null, options, request);
      }
      /// <summary>
      ///Метод получения списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetFavoritesResponse GetFavorites(global::Tinkoff.InvestApi.V1.GetFavoritesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFavorites(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetFavoritesResponse GetFavorites(global::Tinkoff.InvestApi.V1.GetFavoritesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFavorites, null, options, request);
      }
      /// <summary>
      ///Метод получения списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetFavoritesResponse> GetFavoritesAsync(global::Tinkoff.InvestApi.V1.GetFavoritesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFavoritesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetFavoritesResponse> GetFavoritesAsync(global::Tinkoff.InvestApi.V1.GetFavoritesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFavorites, null, options, request);
      }
      /// <summary>
      ///Метод редактирования списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EditFavoritesResponse EditFavorites(global::Tinkoff.InvestApi.V1.EditFavoritesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditFavorites(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод редактирования списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EditFavoritesResponse EditFavorites(global::Tinkoff.InvestApi.V1.EditFavoritesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditFavorites, null, options, request);
      }
      /// <summary>
      ///Метод редактирования списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EditFavoritesResponse> EditFavoritesAsync(global::Tinkoff.InvestApi.V1.EditFavoritesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditFavoritesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод редактирования списка избранных инструментов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EditFavoritesResponse> EditFavoritesAsync(global::Tinkoff.InvestApi.V1.EditFavoritesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditFavorites, null, options, request);
      }
      /// <summary>
      ///Метод получения списка стран.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetCountriesResponse GetCountries(global::Tinkoff.InvestApi.V1.GetCountriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка стран.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetCountriesResponse GetCountries(global::Tinkoff.InvestApi.V1.GetCountriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCountries, null, options, request);
      }
      /// <summary>
      ///Метод получения списка стран.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetCountriesResponse> GetCountriesAsync(global::Tinkoff.InvestApi.V1.GetCountriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка стран.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetCountriesResponse> GetCountriesAsync(global::Tinkoff.InvestApi.V1.GetCountriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCountries, null, options, request);
      }
      /// <summary>
      ///Метод поиска инструмента.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FindInstrumentResponse FindInstrument(global::Tinkoff.InvestApi.V1.FindInstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindInstrument(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод поиска инструмента.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FindInstrumentResponse FindInstrument(global::Tinkoff.InvestApi.V1.FindInstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindInstrument, null, options, request);
      }
      /// <summary>
      ///Метод поиска инструмента.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FindInstrumentResponse> FindInstrumentAsync(global::Tinkoff.InvestApi.V1.FindInstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindInstrumentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод поиска инструмента.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FindInstrumentResponse> FindInstrumentAsync(global::Tinkoff.InvestApi.V1.FindInstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindInstrument, null, options, request);
      }
      /// <summary>
      ///Метод получения списка брендов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetBrandsResponse GetBrands(global::Tinkoff.InvestApi.V1.GetBrandsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrands(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка брендов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetBrandsResponse GetBrands(global::Tinkoff.InvestApi.V1.GetBrandsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBrands, null, options, request);
      }
      /// <summary>
      ///Метод получения списка брендов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetBrandsResponse> GetBrandsAsync(global::Tinkoff.InvestApi.V1.GetBrandsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrandsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка брендов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetBrandsResponse> GetBrandsAsync(global::Tinkoff.InvestApi.V1.GetBrandsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBrands, null, options, request);
      }
      /// <summary>
      ///Метод получения бренда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.Brand GetBrandBy(global::Tinkoff.InvestApi.V1.GetBrandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrandBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения бренда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.Brand GetBrandBy(global::Tinkoff.InvestApi.V1.GetBrandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBrandBy, null, options, request);
      }
      /// <summary>
      ///Метод получения бренда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.Brand> GetBrandByAsync(global::Tinkoff.InvestApi.V1.GetBrandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrandByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения бренда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.Brand> GetBrandByAsync(global::Tinkoff.InvestApi.V1.GetBrandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBrandBy, null, options, request);
      }
      /// <summary>
      ///Метод получения фундаментальных показателей по активу
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse GetAssetFundamentals(global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetFundamentals(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения фундаментальных показателей по активу
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse GetAssetFundamentals(global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetFundamentals, null, options, request);
      }
      /// <summary>
      ///Метод получения фундаментальных показателей по активу
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse> GetAssetFundamentalsAsync(global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetFundamentalsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения фундаментальных показателей по активу
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse> GetAssetFundamentalsAsync(global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetFundamentals, null, options, request);
      }
      /// <summary>
      ///Метод получения расписания выхода отчетностей эмитентов
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetAssetReportsResponse GetAssetReports(global::Tinkoff.InvestApi.V1.GetAssetReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetReports(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения расписания выхода отчетностей эмитентов
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetAssetReportsResponse GetAssetReports(global::Tinkoff.InvestApi.V1.GetAssetReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetReports, null, options, request);
      }
      /// <summary>
      ///Метод получения расписания выхода отчетностей эмитентов
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetAssetReportsResponse> GetAssetReportsAsync(global::Tinkoff.InvestApi.V1.GetAssetReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetReportsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения расписания выхода отчетностей эмитентов
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetAssetReportsResponse> GetAssetReportsAsync(global::Tinkoff.InvestApi.V1.GetAssetReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetReports, null, options, request);
      }
      /// <summary>
      ///Метод получения мнения аналитиков по инструменту
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse GetConsensusForecasts(global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConsensusForecasts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения мнения аналитиков по инструменту
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse GetConsensusForecasts(global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConsensusForecasts, null, options, request);
      }
      /// <summary>
      ///Метод получения мнения аналитиков по инструменту
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse> GetConsensusForecastsAsync(global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConsensusForecastsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения мнения аналитиков по инструменту
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse> GetConsensusForecastsAsync(global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConsensusForecasts, null, options, request);
      }
      /// <summary>
      ///Метод получения прогнозов инвестдомов по инструменту
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetForecastResponse GetForecastBy(global::Tinkoff.InvestApi.V1.GetForecastRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetForecastBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения прогнозов инвестдомов по инструменту
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetForecastResponse GetForecastBy(global::Tinkoff.InvestApi.V1.GetForecastRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetForecastBy, null, options, request);
      }
      /// <summary>
      ///Метод получения прогнозов инвестдомов по инструменту
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetForecastResponse> GetForecastByAsync(global::Tinkoff.InvestApi.V1.GetForecastRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetForecastByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения прогнозов инвестдомов по инструменту
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetForecastResponse> GetForecastByAsync(global::Tinkoff.InvestApi.V1.GetForecastRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetForecastBy, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InstrumentsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstrumentsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(InstrumentsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_TradingSchedules, serviceImpl.TradingSchedules)
          .AddMethod(__Method_BondBy, serviceImpl.BondBy)
          .AddMethod(__Method_Bonds, serviceImpl.Bonds)
          .AddMethod(__Method_GetBondCoupons, serviceImpl.GetBondCoupons)
          .AddMethod(__Method_GetBondEvents, serviceImpl.GetBondEvents)
          .AddMethod(__Method_CurrencyBy, serviceImpl.CurrencyBy)
          .AddMethod(__Method_Currencies, serviceImpl.Currencies)
          .AddMethod(__Method_EtfBy, serviceImpl.EtfBy)
          .AddMethod(__Method_Etfs, serviceImpl.Etfs)
          .AddMethod(__Method_FutureBy, serviceImpl.FutureBy)
          .AddMethod(__Method_Futures, serviceImpl.Futures)
          .AddMethod(__Method_OptionBy, serviceImpl.OptionBy)
          .AddMethod(__Method_Options, serviceImpl.Options)
          .AddMethod(__Method_OptionsBy, serviceImpl.OptionsBy)
          .AddMethod(__Method_ShareBy, serviceImpl.ShareBy)
          .AddMethod(__Method_Shares, serviceImpl.Shares)
          .AddMethod(__Method_Indicatives, serviceImpl.Indicatives)
          .AddMethod(__Method_GetAccruedInterests, serviceImpl.GetAccruedInterests)
          .AddMethod(__Method_GetFuturesMargin, serviceImpl.GetFuturesMargin)
          .AddMethod(__Method_GetInstrumentBy, serviceImpl.GetInstrumentBy)
          .AddMethod(__Method_GetDividends, serviceImpl.GetDividends)
          .AddMethod(__Method_GetAssetBy, serviceImpl.GetAssetBy)
          .AddMethod(__Method_GetAssets, serviceImpl.GetAssets)
          .AddMethod(__Method_GetFavorites, serviceImpl.GetFavorites)
          .AddMethod(__Method_EditFavorites, serviceImpl.EditFavorites)
          .AddMethod(__Method_GetCountries, serviceImpl.GetCountries)
          .AddMethod(__Method_FindInstrument, serviceImpl.FindInstrument)
          .AddMethod(__Method_GetBrands, serviceImpl.GetBrands)
          .AddMethod(__Method_GetBrandBy, serviceImpl.GetBrandBy)
          .AddMethod(__Method_GetAssetFundamentals, serviceImpl.GetAssetFundamentals)
          .AddMethod(__Method_GetAssetReports, serviceImpl.GetAssetReports)
          .AddMethod(__Method_GetConsensusForecasts, serviceImpl.GetConsensusForecasts)
          .AddMethod(__Method_GetForecastBy, serviceImpl.GetForecastBy).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InstrumentsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_TradingSchedules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.TradingSchedulesRequest, global::Tinkoff.InvestApi.V1.TradingSchedulesResponse>(serviceImpl.TradingSchedules));
      serviceBinder.AddMethod(__Method_BondBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.BondResponse>(serviceImpl.BondBy));
      serviceBinder.AddMethod(__Method_Bonds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.BondsResponse>(serviceImpl.Bonds));
      serviceBinder.AddMethod(__Method_GetBondCoupons, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetBondCouponsRequest, global::Tinkoff.InvestApi.V1.GetBondCouponsResponse>(serviceImpl.GetBondCoupons));
      serviceBinder.AddMethod(__Method_GetBondEvents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetBondEventsRequest, global::Tinkoff.InvestApi.V1.GetBondEventsResponse>(serviceImpl.GetBondEvents));
      serviceBinder.AddMethod(__Method_CurrencyBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.CurrencyResponse>(serviceImpl.CurrencyBy));
      serviceBinder.AddMethod(__Method_Currencies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.CurrenciesResponse>(serviceImpl.Currencies));
      serviceBinder.AddMethod(__Method_EtfBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.EtfResponse>(serviceImpl.EtfBy));
      serviceBinder.AddMethod(__Method_Etfs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.EtfsResponse>(serviceImpl.Etfs));
      serviceBinder.AddMethod(__Method_FutureBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.FutureResponse>(serviceImpl.FutureBy));
      serviceBinder.AddMethod(__Method_Futures, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.FuturesResponse>(serviceImpl.Futures));
      serviceBinder.AddMethod(__Method_OptionBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.OptionResponse>(serviceImpl.OptionBy));
      serviceBinder.AddMethod(__Method_Options, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.OptionsResponse>(serviceImpl.Options));
      serviceBinder.AddMethod(__Method_OptionsBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.FilterOptionsRequest, global::Tinkoff.InvestApi.V1.OptionsResponse>(serviceImpl.OptionsBy));
      serviceBinder.AddMethod(__Method_ShareBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.ShareResponse>(serviceImpl.ShareBy));
      serviceBinder.AddMethod(__Method_Shares, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.SharesResponse>(serviceImpl.Shares));
      serviceBinder.AddMethod(__Method_Indicatives, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.IndicativesRequest, global::Tinkoff.InvestApi.V1.IndicativesResponse>(serviceImpl.Indicatives));
      serviceBinder.AddMethod(__Method_GetAccruedInterests, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest, global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse>(serviceImpl.GetAccruedInterests));
      serviceBinder.AddMethod(__Method_GetFuturesMargin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest, global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse>(serviceImpl.GetFuturesMargin));
      serviceBinder.AddMethod(__Method_GetInstrumentBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.InstrumentResponse>(serviceImpl.GetInstrumentBy));
      serviceBinder.AddMethod(__Method_GetDividends, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetDividendsRequest, global::Tinkoff.InvestApi.V1.GetDividendsResponse>(serviceImpl.GetDividends));
      serviceBinder.AddMethod(__Method_GetAssetBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.AssetRequest, global::Tinkoff.InvestApi.V1.AssetResponse>(serviceImpl.GetAssetBy));
      serviceBinder.AddMethod(__Method_GetAssets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.AssetsRequest, global::Tinkoff.InvestApi.V1.AssetsResponse>(serviceImpl.GetAssets));
      serviceBinder.AddMethod(__Method_GetFavorites, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetFavoritesRequest, global::Tinkoff.InvestApi.V1.GetFavoritesResponse>(serviceImpl.GetFavorites));
      serviceBinder.AddMethod(__Method_EditFavorites, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.EditFavoritesRequest, global::Tinkoff.InvestApi.V1.EditFavoritesResponse>(serviceImpl.EditFavorites));
      serviceBinder.AddMethod(__Method_GetCountries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetCountriesRequest, global::Tinkoff.InvestApi.V1.GetCountriesResponse>(serviceImpl.GetCountries));
      serviceBinder.AddMethod(__Method_FindInstrument, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.FindInstrumentRequest, global::Tinkoff.InvestApi.V1.FindInstrumentResponse>(serviceImpl.FindInstrument));
      serviceBinder.AddMethod(__Method_GetBrands, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetBrandsRequest, global::Tinkoff.InvestApi.V1.GetBrandsResponse>(serviceImpl.GetBrands));
      serviceBinder.AddMethod(__Method_GetBrandBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetBrandRequest, global::Tinkoff.InvestApi.V1.Brand>(serviceImpl.GetBrandBy));
      serviceBinder.AddMethod(__Method_GetAssetFundamentals, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetAssetFundamentalsRequest, global::Tinkoff.InvestApi.V1.GetAssetFundamentalsResponse>(serviceImpl.GetAssetFundamentals));
      serviceBinder.AddMethod(__Method_GetAssetReports, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetAssetReportsRequest, global::Tinkoff.InvestApi.V1.GetAssetReportsResponse>(serviceImpl.GetAssetReports));
      serviceBinder.AddMethod(__Method_GetConsensusForecasts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetConsensusForecastsRequest, global::Tinkoff.InvestApi.V1.GetConsensusForecastsResponse>(serviceImpl.GetConsensusForecasts));
      serviceBinder.AddMethod(__Method_GetForecastBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetForecastRequest, global::Tinkoff.InvestApi.V1.GetForecastResponse>(serviceImpl.GetForecastBy));
    }

  }
}
#endregion
