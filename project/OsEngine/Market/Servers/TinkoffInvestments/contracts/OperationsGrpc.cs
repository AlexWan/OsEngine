// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: operations.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tinkoff.InvestApi.V1 {
  /// <summary>
  ///Сервис предназначен для получения:&lt;/br> **1**.  списка операций по счёту;&lt;/br> **2**.
  ///портфеля по счёту;&lt;/br> **3**. позиций ценных бумаг на счёте;&lt;/br> **4**.
  ///доступного остатка для вывода средств;&lt;/br> **5**. получения различных отчётов.
  /// </summary>
  public static partial class OperationsService
  {
    static readonly string __ServiceName = "tinkoff.public.invest.api.contract.v1.OperationsService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.OperationsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_OperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.OperationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.OperationsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_OperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.OperationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.PortfolioRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_PortfolioRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.PortfolioRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.PortfolioResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_PortfolioResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.PortfolioResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.PositionsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_PositionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.PositionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.PositionsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_PositionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.PositionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_WithdrawLimitsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_WithdrawLimitsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.BrokerReportRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_BrokerReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.BrokerReportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.BrokerReportResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_BrokerReportResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.BrokerReportResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsForeignIssuerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsForeignIssuerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetOperationsByCursorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetOperationsByCursorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.OperationsRequest, global::Tinkoff.InvestApi.V1.OperationsResponse> __Method_GetOperations = new grpc::Method<global::Tinkoff.InvestApi.V1.OperationsRequest, global::Tinkoff.InvestApi.V1.OperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOperations",
        __Marshaller_tinkoff_public_invest_api_contract_v1_OperationsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_OperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.PortfolioRequest, global::Tinkoff.InvestApi.V1.PortfolioResponse> __Method_GetPortfolio = new grpc::Method<global::Tinkoff.InvestApi.V1.PortfolioRequest, global::Tinkoff.InvestApi.V1.PortfolioResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPortfolio",
        __Marshaller_tinkoff_public_invest_api_contract_v1_PortfolioRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_PortfolioResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.PositionsRequest, global::Tinkoff.InvestApi.V1.PositionsResponse> __Method_GetPositions = new grpc::Method<global::Tinkoff.InvestApi.V1.PositionsRequest, global::Tinkoff.InvestApi.V1.PositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPositions",
        __Marshaller_tinkoff_public_invest_api_contract_v1_PositionsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_PositionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest, global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse> __Method_GetWithdrawLimits = new grpc::Method<global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest, global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWithdrawLimits",
        __Marshaller_tinkoff_public_invest_api_contract_v1_WithdrawLimitsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_WithdrawLimitsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.BrokerReportRequest, global::Tinkoff.InvestApi.V1.BrokerReportResponse> __Method_GetBrokerReport = new grpc::Method<global::Tinkoff.InvestApi.V1.BrokerReportRequest, global::Tinkoff.InvestApi.V1.BrokerReportResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBrokerReport",
        __Marshaller_tinkoff_public_invest_api_contract_v1_BrokerReportRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_BrokerReportResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest, global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse> __Method_GetDividendsForeignIssuer = new grpc::Method<global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest, global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDividendsForeignIssuer",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsForeignIssuerRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsForeignIssuerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest, global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse> __Method_GetOperationsByCursor = new grpc::Method<global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest, global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOperationsByCursor",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetOperationsByCursorRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetOperationsByCursorResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tinkoff.InvestApi.V1.OperationsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OperationsService</summary>
    [grpc::BindServiceMethod(typeof(OperationsService), "BindService")]
    public abstract partial class OperationsServiceBase
    {
      /// <summary>
      ///Метод получения списка операций по счёту.При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.OperationsResponse> GetOperations(global::Tinkoff.InvestApi.V1.OperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения портфеля по счёту.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.PortfolioResponse> GetPortfolio(global::Tinkoff.InvestApi.V1.PortfolioRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка позиций по счёту.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.PositionsResponse> GetPositions(global::Tinkoff.InvestApi.V1.PositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения доступного остатка для вывода средств.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse> GetWithdrawLimits(global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения брокерского отчёта.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.BrokerReportResponse> GetBrokerReport(global::Tinkoff.InvestApi.V1.BrokerReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения отчёта "Справка о доходах за пределами РФ".
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse> GetDividendsForeignIssuer(global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Метод получения списка операций по счёту с пагинацией. При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse> GetOperationsByCursor(global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OperationsService</summary>
    public partial class OperationsServiceClient : grpc::ClientBase<OperationsServiceClient>
    {
      /// <summary>Creates a new client for OperationsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OperationsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OperationsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OperationsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OperationsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OperationsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Метод получения списка операций по счёту.При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.OperationsResponse GetOperations(global::Tinkoff.InvestApi.V1.OperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка операций по счёту.При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.OperationsResponse GetOperations(global::Tinkoff.InvestApi.V1.OperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperations, null, options, request);
      }
      /// <summary>
      ///Метод получения списка операций по счёту.При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.OperationsResponse> GetOperationsAsync(global::Tinkoff.InvestApi.V1.OperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка операций по счёту.При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.OperationsResponse> GetOperationsAsync(global::Tinkoff.InvestApi.V1.OperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperations, null, options, request);
      }
      /// <summary>
      ///Метод получения портфеля по счёту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.PortfolioResponse GetPortfolio(global::Tinkoff.InvestApi.V1.PortfolioRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPortfolio(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения портфеля по счёту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.PortfolioResponse GetPortfolio(global::Tinkoff.InvestApi.V1.PortfolioRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPortfolio, null, options, request);
      }
      /// <summary>
      ///Метод получения портфеля по счёту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.PortfolioResponse> GetPortfolioAsync(global::Tinkoff.InvestApi.V1.PortfolioRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPortfolioAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения портфеля по счёту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.PortfolioResponse> GetPortfolioAsync(global::Tinkoff.InvestApi.V1.PortfolioRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPortfolio, null, options, request);
      }
      /// <summary>
      ///Метод получения списка позиций по счёту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.PositionsResponse GetPositions(global::Tinkoff.InvestApi.V1.PositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка позиций по счёту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.PositionsResponse GetPositions(global::Tinkoff.InvestApi.V1.PositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPositions, null, options, request);
      }
      /// <summary>
      ///Метод получения списка позиций по счёту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.PositionsResponse> GetPositionsAsync(global::Tinkoff.InvestApi.V1.PositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка позиций по счёту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.PositionsResponse> GetPositionsAsync(global::Tinkoff.InvestApi.V1.PositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPositions, null, options, request);
      }
      /// <summary>
      ///Метод получения доступного остатка для вывода средств.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse GetWithdrawLimits(global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWithdrawLimits(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения доступного остатка для вывода средств.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse GetWithdrawLimits(global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWithdrawLimits, null, options, request);
      }
      /// <summary>
      ///Метод получения доступного остатка для вывода средств.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse> GetWithdrawLimitsAsync(global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWithdrawLimitsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения доступного остатка для вывода средств.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse> GetWithdrawLimitsAsync(global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWithdrawLimits, null, options, request);
      }
      /// <summary>
      ///Метод получения брокерского отчёта.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BrokerReportResponse GetBrokerReport(global::Tinkoff.InvestApi.V1.BrokerReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrokerReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения брокерского отчёта.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BrokerReportResponse GetBrokerReport(global::Tinkoff.InvestApi.V1.BrokerReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBrokerReport, null, options, request);
      }
      /// <summary>
      ///Метод получения брокерского отчёта.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BrokerReportResponse> GetBrokerReportAsync(global::Tinkoff.InvestApi.V1.BrokerReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrokerReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения брокерского отчёта.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BrokerReportResponse> GetBrokerReportAsync(global::Tinkoff.InvestApi.V1.BrokerReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBrokerReport, null, options, request);
      }
      /// <summary>
      ///Метод получения отчёта "Справка о доходах за пределами РФ".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse GetDividendsForeignIssuer(global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDividendsForeignIssuer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения отчёта "Справка о доходах за пределами РФ".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse GetDividendsForeignIssuer(global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDividendsForeignIssuer, null, options, request);
      }
      /// <summary>
      ///Метод получения отчёта "Справка о доходах за пределами РФ".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse> GetDividendsForeignIssuerAsync(global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDividendsForeignIssuerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения отчёта "Справка о доходах за пределами РФ".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse> GetDividendsForeignIssuerAsync(global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDividendsForeignIssuer, null, options, request);
      }
      /// <summary>
      ///Метод получения списка операций по счёту с пагинацией. При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse GetOperationsByCursor(global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationsByCursor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка операций по счёту с пагинацией. При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse GetOperationsByCursor(global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperationsByCursor, null, options, request);
      }
      /// <summary>
      ///Метод получения списка операций по счёту с пагинацией. При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse> GetOperationsByCursorAsync(global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationsByCursorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка операций по счёту с пагинацией. При работе с данным методом необходимо учитывать
      /// [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse> GetOperationsByCursorAsync(global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperationsByCursor, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override OperationsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OperationsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(OperationsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetOperations, serviceImpl.GetOperations)
          .AddMethod(__Method_GetPortfolio, serviceImpl.GetPortfolio)
          .AddMethod(__Method_GetPositions, serviceImpl.GetPositions)
          .AddMethod(__Method_GetWithdrawLimits, serviceImpl.GetWithdrawLimits)
          .AddMethod(__Method_GetBrokerReport, serviceImpl.GetBrokerReport)
          .AddMethod(__Method_GetDividendsForeignIssuer, serviceImpl.GetDividendsForeignIssuer)
          .AddMethod(__Method_GetOperationsByCursor, serviceImpl.GetOperationsByCursor).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OperationsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.OperationsRequest, global::Tinkoff.InvestApi.V1.OperationsResponse>(serviceImpl.GetOperations));
      serviceBinder.AddMethod(__Method_GetPortfolio, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.PortfolioRequest, global::Tinkoff.InvestApi.V1.PortfolioResponse>(serviceImpl.GetPortfolio));
      serviceBinder.AddMethod(__Method_GetPositions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.PositionsRequest, global::Tinkoff.InvestApi.V1.PositionsResponse>(serviceImpl.GetPositions));
      serviceBinder.AddMethod(__Method_GetWithdrawLimits, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.WithdrawLimitsRequest, global::Tinkoff.InvestApi.V1.WithdrawLimitsResponse>(serviceImpl.GetWithdrawLimits));
      serviceBinder.AddMethod(__Method_GetBrokerReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.BrokerReportRequest, global::Tinkoff.InvestApi.V1.BrokerReportResponse>(serviceImpl.GetBrokerReport));
      serviceBinder.AddMethod(__Method_GetDividendsForeignIssuer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerRequest, global::Tinkoff.InvestApi.V1.GetDividendsForeignIssuerResponse>(serviceImpl.GetDividendsForeignIssuer));
      serviceBinder.AddMethod(__Method_GetOperationsByCursor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.InvestApi.V1.GetOperationsByCursorRequest, global::Tinkoff.InvestApi.V1.GetOperationsByCursorResponse>(serviceImpl.GetOperationsByCursor));
    }

  }
  public static partial class OperationsStreamService
  {
    static readonly string __ServiceName = "tinkoff.public.invest.api.contract.v1.OperationsStreamService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.PortfolioStreamRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_PortfolioStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.PortfolioStreamRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.PortfolioStreamResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_PortfolioStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.PortfolioStreamResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.PositionsStreamRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_PositionsStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.PositionsStreamRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.PositionsStreamResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_PositionsStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.PositionsStreamResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.PortfolioStreamRequest, global::Tinkoff.InvestApi.V1.PortfolioStreamResponse> __Method_PortfolioStream = new grpc::Method<global::Tinkoff.InvestApi.V1.PortfolioStreamRequest, global::Tinkoff.InvestApi.V1.PortfolioStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PortfolioStream",
        __Marshaller_tinkoff_public_invest_api_contract_v1_PortfolioStreamRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_PortfolioStreamResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.PositionsStreamRequest, global::Tinkoff.InvestApi.V1.PositionsStreamResponse> __Method_PositionsStream = new grpc::Method<global::Tinkoff.InvestApi.V1.PositionsStreamRequest, global::Tinkoff.InvestApi.V1.PositionsStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PositionsStream",
        __Marshaller_tinkoff_public_invest_api_contract_v1_PositionsStreamRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_PositionsStreamResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tinkoff.InvestApi.V1.OperationsReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of OperationsStreamService</summary>
    [grpc::BindServiceMethod(typeof(OperationsStreamService), "BindService")]
    public abstract partial class OperationsStreamServiceBase
    {
      /// <summary>
      ///Server-side stream обновлений портфеля
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task PortfolioStream(global::Tinkoff.InvestApi.V1.PortfolioStreamRequest request, grpc::IServerStreamWriter<global::Tinkoff.InvestApi.V1.PortfolioStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Server-side stream обновлений информации по изменению позиций портфеля
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task PositionsStream(global::Tinkoff.InvestApi.V1.PositionsStreamRequest request, grpc::IServerStreamWriter<global::Tinkoff.InvestApi.V1.PositionsStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OperationsStreamService</summary>
    public partial class OperationsStreamServiceClient : grpc::ClientBase<OperationsStreamServiceClient>
    {
      /// <summary>Creates a new client for OperationsStreamService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OperationsStreamServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OperationsStreamService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OperationsStreamServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OperationsStreamServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OperationsStreamServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Server-side stream обновлений портфеля
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Tinkoff.InvestApi.V1.PortfolioStreamResponse> PortfolioStream(global::Tinkoff.InvestApi.V1.PortfolioStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PortfolioStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Server-side stream обновлений портфеля
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Tinkoff.InvestApi.V1.PortfolioStreamResponse> PortfolioStream(global::Tinkoff.InvestApi.V1.PortfolioStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PortfolioStream, null, options, request);
      }
      /// <summary>
      ///Server-side stream обновлений информации по изменению позиций портфеля
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Tinkoff.InvestApi.V1.PositionsStreamResponse> PositionsStream(global::Tinkoff.InvestApi.V1.PositionsStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PositionsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Server-side stream обновлений информации по изменению позиций портфеля
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Tinkoff.InvestApi.V1.PositionsStreamResponse> PositionsStream(global::Tinkoff.InvestApi.V1.PositionsStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PositionsStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override OperationsStreamServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OperationsStreamServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(OperationsStreamServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PortfolioStream, serviceImpl.PortfolioStream)
          .AddMethod(__Method_PositionsStream, serviceImpl.PositionsStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OperationsStreamServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PortfolioStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Tinkoff.InvestApi.V1.PortfolioStreamRequest, global::Tinkoff.InvestApi.V1.PortfolioStreamResponse>(serviceImpl.PortfolioStream));
      serviceBinder.AddMethod(__Method_PositionsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Tinkoff.InvestApi.V1.PositionsStreamRequest, global::Tinkoff.InvestApi.V1.PositionsStreamResponse>(serviceImpl.PositionsStream));
    }

  }
}
#endregion
